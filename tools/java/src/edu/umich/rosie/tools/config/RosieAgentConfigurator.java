package edu.umich.rosie.tools.config;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Map;

public class RosieAgentConfigurator {
	public static void ConfigureAgent(RosieConfig config){
		try{
			// Create the Agent Directory
			if(!config.agentDir.exists()){
				if(!config.agentDir.mkdir()){
					System.err.println("ERROR: ConfigureAgent could not create directory " + config.agentDir.getAbsolutePath());
					return;
				}
			}

			// Different filenames used by the agent
			String clientConfigFilename = config.agentDir.getAbsolutePath() + "/rosie-client.config";
			String agentSourceFilename =
					(config.agentDir.getAbsolutePath() + "/" + config.agentName + "_source.soar").replaceAll("\\\\", "/");
			File smemSourceFile = SmemConfigurator.configureSmem(config);
			
			// Write the 3 files
			writeClientConfigFile(config, clientConfigFilename, agentSourceFilename, smemSourceFile);
			writeAgentSourceFile(config, agentSourceFilename);

		} catch (Exception e){
			e.printStackTrace();
		}
	}
	
	private static void writeClientConfigFile(RosieConfig config, String clientConfigFilename, 
			String agentSourceFilename, File smemSourceFile) throws IOException {
		// Create the client config file (Sourced by the java or python Rosie client)
		Writer clientConfigWriter = new BufferedWriter(new OutputStreamWriter(
				new FileOutputStream(clientConfigFilename), "utf-8"));
		
		// Config File Beginning
		clientConfigWriter.write("# This Rosie config file was autogenerated by the RosieAgentConfigurator from:\n");
		clientConfigWriter.write("source-config = " + config.sourceFile + "\n");
		clientConfigWriter.write("agent-name = " + config.agentName + "\n\n");
		if(config.domain != null){
			clientConfigWriter.write("domain = " + config.domain + "\n\n");
		}
		
		// Agent Source Information
		clientConfigWriter.write("agent-source = " + agentSourceFilename + "\n");
		clientConfigWriter.write("smem-source = " + smemSourceFile.getAbsolutePath().replaceAll("\\\\", "/") + "\n\n");
		
		//	Parser testing info
		clientConfigWriter.write("parser = " + config.parser + "\n");
		clientConfigWriter.write("parser-test = " + config.parser_test + "\n");
		clientConfigWriter.write("hypothetical = " + config.hypothetical + "\n\n");

		// messages-file
		if (config.sentenceSource.equals("chat") && config.sentencesFile != null && config.sentencesFile.exists()){
			clientConfigWriter.write("messages-file = " + config.sentencesFile.getAbsolutePath().replaceAll("\\\\", "/") + "\n\n");
		}
		
		// Client Settings
		for(Map.Entry<String, String> e : config.clientSettings.entrySet()){
			clientConfigWriter.write(e.getKey() + " = " + e.getValue() + "\n");
		}
		clientConfigWriter.close();
	}
	
	private static void writeAgentSourceFile(RosieConfig config, String agentSourceFilename) throws IOException {
		Writer agentSourceFile = new BufferedWriter(new OutputStreamWriter(
				new FileOutputStream(agentSourceFilename), "utf-8"));
		agentSourceFile.write("# This file was autogenerated by the RosieAgentConfigurator\n");
		agentSourceFile.write("# This is the root agent soar file to source for the '" + config.agentName + "' agent.\n\n");
		
		// BEGIN SOURCING ROSIE FILES
		agentSourceFile.write("# Sourcing rosie agent\n");
		agentSourceFile.write("pushd " + config.rosieAgentDir.getAbsolutePath().replaceAll("\\\\", "/") + "\n");
		agentSourceFile.write("source _agent_source.soar\n\n");

      // Source the proper language comprehension files
      if(config.parser.equals("laird")){
         agentSourceFile.write("pushd language-comprehension\n");
         agentSourceFile.write("source mNL-Soar_source.soar\n");
         agentSourceFile.write("popd\n");
      } else if(config.parser.equals("lucia")){
         agentSourceFile.write("pushd lucia\n");
         agentSourceFile.write("source Lucia_source.soar\n");
         agentSourceFile.write("popd\n");
      }

      // Source the proper language comprehension files
      if(config.parser_test.equals("true")){
         agentSourceFile.write("pushd testing\n");
         agentSourceFile.write("source test-parser.soar\n");
         agentSourceFile.write("popd\n");
      }

		agentSourceFile.write("\npopd\n\n");
		// END SOURCING ROSIE FILES

		// BEGIN SOURCING FILES IN THE CREATED AGENT DIR
		agentSourceFile.write("pushd " + config.agentDir.getAbsolutePath().replaceAll("\\\\", "/") + "\n\n");

		// Sentences
		if (config.sentenceSource.equals("scripts") && config.sentencesFile != null && config.sentencesFile.exists()){
			File sentenceSourceFile = new File(config.agentDir, "sentences_" + config.agentName + ".soar");
			SentencesGenerator.generateRosieSentences(config.sentencesFile, sentenceSourceFile);
			agentSourceFile.write("# Sourcing a list of scripted sentences to autorun\n");
			agentSourceFile.write("source " + sentenceSourceFile.getName() + "\n\n");
		}
		
		// World
		if (config.worldFile != null && config.worldFile.exists()){
			File rosieWorldFile = new File(config.agentDir, "world_" + config.agentName + ".soar");
			WorldGenerator.generateRosieWorld(config.worldFile, rosieWorldFile);
			agentSourceFile.write("# Sourcing a specification for the top-state world\n");
			agentSourceFile.write("source " + rosieWorldFile.getName() + "\n\n");
		}

		agentSourceFile.write("popd\n\n");
		// END SOURCING FILES IN THE CREATED AGENT DIR

		// Source each local soar file
		agentSourceFile.write("# Sourcing any extra soar files:\n");
		for(File soarFile : config.sourceSoarFiles){
			agentSourceFile.write("source " + soarFile.getAbsolutePath().replaceAll("\\\\", "/") + "\n");
		}
		agentSourceFile.write("\n");

		// Create the agent param wme's
		agentSourceFile.write("sp {top-state*agent-params*elaborate*config*information\n");
		agentSourceFile.write("   (state <s> ^superstate nil\n");
		agentSourceFile.write("              ^agent-params <p>)\n");
		agentSourceFile.write("-->\n");
		if(config.domain != null){
			agentSourceFile.write("   (<p> ^domain " + config.domain + ")\n");
		}
		agentSourceFile.write("   (<p> ^parser " + config.parser + ")\n");
		agentSourceFile.write("   (<p> ^parser-test " + config.parser_test + ")\n");
		agentSourceFile.write("   (<p> ^hypothetical " + config.hypothetical + ")\n");
		agentSourceFile.write("   (<p> ^sentence-source " + config.sentenceSource + ")\n");
		agentSourceFile.write("}\n\n");

		
		// Finish writing the agent source file
		agentSourceFile.close();	
	}
	
    public static void main(String[] args) {
    	if (args.length == 0){
    		System.err.println("RosieAgentConfigurator expects 1 argument\n" + 
    							"  1: the filename of the rosie configuration file\n" + 
    							"  2 [OPT]: the rosie directory (defaults from $ROSIE_HOME environment variable");
    		System.exit(0);
    	}
    	
    	//	Figure out the path to the config file
    	String configFilename = args[0];
    	File configFile = new File(configFilename);
    	if(!configFile.exists()){
    		System.err.println("\nThe file " + configFilename + " does not exist");
    		System.exit(0);
    	}
		try {
			// AM: Do this a 2nd time, because the code assumes the given file has the full absolute path 
			configFile = new File(configFile.getCanonicalPath());
		} catch (IOException e){
    		System.err.println("\nThe file " + configFilename + " could not be resolved");
    		System.exit(0);
		}
    	
    	String rosieHome = System.getenv("ROSIE_HOME");
		boolean silent = false;
    	if (args.length >= 2){
			if(args[1].equals("-s")){
				silent = true;
			} else {
				rosieHome = args[1];
			}
    	}
		if (rosieHome == null){
			System.err.println("$ROSIE_HOME environment variable is not set");
			System.exit(1);
		}
    	rosieHome = rosieHome.replaceAll("\\\\", "/");
        
        try{
        	RosieConfig config = new RosieConfig(configFile, rosieHome);
			if(!silent){
				System.out.println(config.toString());
			}
        	ConfigureAgent(config);
        } catch (RosieConfig.RosieConfigException e){
        	System.err.println("Rosie Configuration Error: " + e.getMessage());
        }
    }
}
