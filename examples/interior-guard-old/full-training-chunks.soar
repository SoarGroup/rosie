sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1754944-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type modifiers ^handle <h2> -^handle { <h3> <> <h2> })
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1754944-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<a2> ^arg-type modifiers ^handle <h3> -^handle { <h4> <> <h3> })
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    (<i3> ^abstract true ^predicates <p2>)
    (<a9> ^arg-type modifiers ^handle <h5>)
    (<a11> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p2>)
    (<p2> ^<a12> <a13> ^<a14> { <a15> < <a13> }
          -^<a16> { <a17> <> <a13> <> <a15> } ^<a18> <a19>
          ^<a20> { <a21> < <a19> })
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1754944-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<a2> ^arg-type modifiers ^handle <h3> -^handle { <h4> <> <h3> })
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    (<i3> ^abstract true ^predicates <p2>)
    (<a9> ^arg-type modifiers ^handle <h5>)
    (<a11> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p2>)
    (<p2> ^<a12> <a13> ^<a14> { <a15> < <a13> }
          -^<a16> { <a17> <> <a13> <> <a15> } ^<a18> <a19>
          ^<a20> { <a21> < <a19> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1754944-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<s2> ^name <n2>)
    (<a2> ^arg-type modifiers ^handle <h2> -^handle { <h3> <> <h2> })
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1754944-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<s2> ^name <n2>)
    (<a2> ^arg-type modifiers ^handle <h2> -^handle { <h3> <> <h2> })
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*Tie*t1754940-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a3> ^<a4> <a12>)
    (<t2> ^task-handle <t1> ^<a1> <a2> ^{ <a4> < <a1> } <a5>)
    (<a2> ^arg-type modifiers ^handle <h1> -^handle { <h2> <> <h1> })
    (<a3> -^handle { <h3> <> <h1> } ^arg-type modifiers ^handle <h1>)
   -{ (<c2> ^{ <a6> <> <a1> <> <a4> } <a7>)
      (<a7> ^arg-type <a8>)}
   -{ (<t2> ^{ <a9> <> <a1> <> <a4> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a5> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p2>)
    (<a12> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p1>)
    (<p1> ^<a13> <a14> ^<a15> { <a16> < <a14> })
    (<p2> ^<a13> <a14> -^<a17> { <a18> <> <a14> <> <a16> } ^<a15> <a16>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t1754935-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type modifiers ^handle <h1> -^handle { <h2> <> <h1> })
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<p1> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a14> ^<a3> <a15>)
    (<a14> ^handle <h1> ^arg-type modifiers)
    (<a15> ^id <i2> ^arg-type object)
    (<i2> ^predicates <p2> ^abstract true ^item-type object)
    (<p2> ^<a8> <a9> ^<a10> <a11>)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1754863-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1term168)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle guard1term168 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1754852-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1term168 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1754843-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle guard1exit91)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle guard1term168
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1754666-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1exit91)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle guard1exit91)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1754651-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1exit91 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1754642-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle guard1repeat92)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 relieving1 ^is-confirmed1 confirmed1 ^category officer1)
    -->
    (<s1> ^operator <o3> + ^operator <o3> =)
    (<o3> ^name select-next-goal ^next-goal-handle guard1exit91
           ^next-goal-type loop-exit ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1754621-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle guard1goal166)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle guard1repeat92
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1633349-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c1>)
    (<o1> ^object { <o2> <> <c1> })
    (<o2> ^predicates <p2>)
    (<p2> ^possessive cos1 ^is-confirmed1 confirmed1 ^category office1
          ^category location)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle go-to-location1 ^item-type task-operator
           ^name op_go-to-location1 ^arg2 <a1> ^subtask-handle subtask165)
    (<a1> ^2 <o2> ^handle to1 ^arg-type partial-predicate)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1633327-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1goal166)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle guard1goal166)
    (<i1> ^subtask-handle subtask165 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1633296-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1goal166 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> guard1goal166 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^possessive cos1 ^category office1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1633285-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle guard1goal146)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle guard1goal166
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1627163-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<i3> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1627163-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^3 <i2> ^2 <i3> ^2 <i4>
          ^1 <i5> ^1 <i6> ^handle <h1> ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s5>)
    (<i2> ^type subtask ^subtask-handle <s7>)
    (<i3> ^type subtask ^subtask-handle <s4>)
    (<i4> ^type subtask ^subtask-handle <s6>)
    (<i5> ^type subtask ^subtask-handle <s2>)
    (<i6> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type concept ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    (<a9> ^arg-type concept ^handle <h4>)
    (<a11> ^arg-type object ^id <o4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1627163-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^3 <i2> ^2 <i3> ^2 <i4>
          ^1 <i5> ^1 <i6> ^handle <h1> ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s5>)
    (<i2> ^type subtask ^subtask-handle <s7>)
    (<i3> ^type subtask ^subtask-handle <s4>)
    (<i4> ^type subtask ^subtask-handle <s6>)
    (<i5> ^type subtask ^subtask-handle <s2>)
    (<i6> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type concept ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    (<a9> ^arg-type concept ^handle <h4>)
    (<a11> ^arg-type object ^id <o4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1627163-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s8>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s7>)
    (<i2> ^type subtask ^subtask-handle <s6>)
    (<i3> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1627163-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s8>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s7>)
    (<i2> ^type subtask ^subtask-handle <s6>)
    (<i3> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1627147-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<i3> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s3> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1627147-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^3 <i2> ^2 <i3> ^2 <i4>
          ^1 <i5> ^1 <i6> ^handle <h1> ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s5>)
    (<i2> ^type subtask ^subtask-handle <s7>)
    (<i3> ^type subtask ^subtask-handle <s3>)
    (<i4> ^type subtask ^subtask-handle <s4>)
    (<i5> ^type subtask ^subtask-handle <s2>)
    (<i6> ^type subtask ^subtask-handle <s6>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s3> ^subtask-handle <s4> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type concept ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    (<a9> ^arg-type concept ^handle <h4>)
    (<a11> ^arg-type object ^id <o4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1627147-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^3 <i2> ^2 <i3> ^2 <i4>
          ^1 <i5> ^1 <i6> ^handle <h1> ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s5>)
    (<i2> ^type subtask ^subtask-handle <s7>)
    (<i3> ^type subtask ^subtask-handle <s3>)
    (<i4> ^type subtask ^subtask-handle <s4>)
    (<i5> ^type subtask ^subtask-handle <s2>)
    (<i6> ^type subtask ^subtask-handle <s6>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s3> ^subtask-handle <s4> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type concept ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    (<a9> ^arg-type concept ^handle <h4>)
    (<a11> ^arg-type object ^id <o4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1627147-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s6> ^superoperator <s8>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s7>)
    (<i2> ^type subtask ^subtask-handle <s5>)
    (<i3> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s6> ^subtask-handle <s5> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<s6> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1627147-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s6> ^superoperator <s8>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s7>)
    (<i2> ^type subtask ^subtask-handle <s5>)
    (<i3> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s6> ^subtask-handle <s5> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<s6> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1627129-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<i3> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1627129-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^3 <i2> ^2 <i3> ^2 <i4>
          ^1 <i5> ^1 <i6> ^handle <h1> ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<i2> ^type subtask ^subtask-handle <s5>)
    (<i3> ^type subtask ^subtask-handle <s3>)
    (<i4> ^type subtask ^subtask-handle <s7>)
    (<i5> ^type subtask ^subtask-handle <s2>)
    (<i6> ^type subtask ^subtask-handle <s6>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s4> ^subtask-handle <s5> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2> ^<a6> <a7>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    (<a7> ^arg-type object ^id <o4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1627129-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^3 <i2> ^2 <i3> ^2 <i4>
          ^1 <i5> ^1 <i6> ^handle <h1> ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<i2> ^type subtask ^subtask-handle <s5>)
    (<i3> ^type subtask ^subtask-handle <s3>)
    (<i4> ^type subtask ^subtask-handle <s7>)
    (<i5> ^type subtask ^subtask-handle <s2>)
    (<i6> ^type subtask ^subtask-handle <s6>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s4> ^subtask-handle <s5> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2> ^<a6> <a7>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    (<a7> ^arg-type object ^id <o4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1627129-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s7> ^superoperator <s8>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s6>)
    (<i2> ^type subtask ^subtask-handle <s5>)
    (<i3> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s7> ^subtask-handle <s6> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
   -{ (<s7> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1627129-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s7> ^superoperator <s8>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s6>)
    (<i2> ^type subtask ^subtask-handle <s5>)
    (<i3> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s7> ^subtask-handle <s6> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
   -{ (<s7> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t1627128-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 3 ^3 <i1> ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<i3> ^type subtask ^subtask-handle <s2>)
    (<d1> ^copy-objects-map <c2>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^3 <i4> ^2 <i5> ^1 <i6>
           ^pred-count 3)
    (<i4> ^subtask-handle <s4> ^type subtask)
    (<i5> ^subtask-handle <s3> ^type subtask)
    (<i6> ^subtask-handle <s2> ^type subtask)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1626868-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int152)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int152 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1626857-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int152 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1626848-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal151)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int152
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1626835-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal151)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^3 <i1> ^2 <i2> ^1 <i3> ^pred-count 3 ^handle inspect1goal151)
    (<i1> ^subtask-handle subtask162 ^type subtask)
    (<i2> ^subtask-handle subtask160 ^type subtask)
    (<i3> ^subtask-handle subtask158 ^type subtask)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1626641-5
    :chunk
    (state <s1> ^name op_lock1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle lock1 ^name op_lock1 ^arg1 <a4> ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_view1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1626641-4
    :chunk
    (state <s1> ^name op_lock1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle lock1 ^name op_lock1 ^arg1 <a4> ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle lock1 ^name op_lock1 ^arg1 <a5> ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1
          ^<a11> not-locked1 -^dont-copy <a11> ^<a12> not-locked1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1626641-3
    :chunk
    (state <s1> ^name op_lock1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle lock1 ^name op_lock1 ^arg1 <a4> ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle lock1 ^name op_lock1 ^arg1 <a5> ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1
          ^<a11> not-locked1 -^dont-copy <a11> ^<a12> not-locked1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1626641-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_lock1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle lock1 ^name op_lock1 ^arg1 <a8> ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1626641-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_lock1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle lock1 ^name op_lock1 ^arg1 <a8> ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1626626-5
    :chunk
    (state <s1> ^name op_lock1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1626626-4
    :chunk
    (state <s1> ^name op_lock1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1
          ^<a10> not-locked1 -^dont-copy <a10> ^<a12> not-locked1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h3>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a11> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a11> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1626626-3
    :chunk
    (state <s1> ^name op_lock1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1
          ^<a10> not-locked1 -^dont-copy <a10> ^<a12> not-locked1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h3>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a11> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a11> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1626626-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_lock1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1626626-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_lock1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1626590-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle lock1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle lock1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1626580-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle lock1)
    (<o1> ^next-goal-handle lock1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1626571-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle lock1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle lock1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1623785-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle lock1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask164)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1623746-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_lock1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1623746-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_lock1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1622621-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle lock1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^is-visible1 not-visible1
          ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle view1 ^item-type task-operator ^name op_view1
           ^arg1 <a2> ^subtask-handle subtask163)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1622582-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_lock1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1622582-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_lock1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1
          ^<a9> not-locked1 -^dont-copy <a9>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1622560-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle lock1goal1)
    (<t1> ^task-handle lock1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle lock1goal1)
    (<i2> ^1 <i1> ^property-handle is-locked1 ^handle locked1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1622543-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle lock1)
    (<o1> ^next-goal-handle lock1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1622534-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle lock1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle lock1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1622528-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle lock1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle lock1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1622504-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^affordance1 lockable1 ^is-confirmed1 confirmed1 ^category vehicle1
          ^<a2> not-locked1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle lock1 ^item-type task-operator ^name op_lock1
           ^arg1 <a3> ^subtask-handle subtask162)
    (<a3> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1622254-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category dispatcher1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle ensure1 ^item-type task-operator ^name op_ensure115
           ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask160)
    (<a1> ^handle confirmed1 ^arg-type concept)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1621937-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category sentry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle ensure1 ^item-type task-operator ^name op_ensure115
           ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask158)
    (<a1> ^handle confirmed1 ^arg-type concept)
    (<a2> ^id <o2> ^arg-type object)
}

#sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1621651-1
#    :chunk
#    (state <s1> ^task-operator <t1> ^operator <o1>)
#    (<t1> ^task-handle inspect1)
#    (<o1> ^next-goal-handle inspect1goal151 ^name select-next-goal)
#    -->
#    (<s1> ^apply-select-next-goal true)
#}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1621642-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle inspect1int153)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c4>)
    (<c4> ^predicates <p2>)
    (<p2> ^category room1 ^name motorpool1)
    (<o1> ^object <c4>)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle inspect1goal151
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1621624-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int153)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int153 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1621613-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int153 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1621604-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal156)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int153
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1621591-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal156)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal156)
    (<i1> ^subtask-handle subtask5 ^type subtask)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1621127-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal124)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int121
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1618180-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal124)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal124)
    (<i1> ^subtask-handle subtask5 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1618155-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal124 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> inspect1goal124 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category lightswitch1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1618144-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle inspect1goal122)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-activated1 not-activated1 ^category lightswitch1)
    -->
    (<s1> ^operator <o3> + ^operator <o3> =)
    (<o3> ^name select-next-goal ^next-goal-handle inspect1goal124
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1448468-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category room1 ^name motorpool1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle inspect1 ^item-type task-operator ^name op_inspect11
           ^arg1 <a1> ^subtask-handle subtask145)
    (<a1> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1448444-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1goal146)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle guard1goal146)
    (<i1> ^subtask-handle subtask145 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1448415-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1goal146 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> guard1goal146 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^name motorpool1 ^category room1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1448404-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle guard1goal142)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle guard1goal146
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1448162-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1int30)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int34
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1448093-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1int120)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int119
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1448080-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int120 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1448045-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int121)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int121 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1448035-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int121 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1318294-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal122)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal122)
    (<i1> ^subtask-handle subtask3 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1318279-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal122 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1318268-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1start123)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1goal122
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1318255-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1start123)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1start123 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1318231-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^cardinal-direction1 east1 ^category post1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle inspect1 ^item-type task-operator ^name op_inspect11
           ^arg1 <a1> ^subtask-handle subtask141)
    (<a1> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1318207-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1goal142)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle guard1goal142)
    (<i1> ^subtask-handle subtask141 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1318176-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1goal142 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> guard1goal142 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category post1 ^cardinal-direction1 east1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1318165-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle guard1goal94)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle guard1goal142
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1317826-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal35)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int34
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1317795-5
    :chunk
    (state <s1> ^name op_turn-off1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle turn-off1 ^name op_turn-off1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 not-visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_view1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1317795-4
    :chunk
    (state <s1> ^name op_turn-off1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle turn-off1 ^name op_turn-off1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle turn-off1 ^name op_turn-off1 ^arg1 <a5>
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 not-visible1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1317795-3
    :chunk
    (state <s1> ^name op_turn-off1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle turn-off1 ^name op_turn-off1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle turn-off1 ^name op_turn-off1 ^arg1 <a5>
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 not-visible1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1317795-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_turn-off1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle turn-off1 ^name op_turn-off1 ^arg1 <a8>
          ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1317795-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_turn-off1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle turn-off1 ^name op_turn-off1 ^arg1 <a8>
          ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1317780-5
    :chunk
    (state <s1> ^name op_turn-off1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1317780-4
    :chunk
    (state <s1> ^name op_turn-off1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h3>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1317780-3
    :chunk
    (state <s1> ^name op_turn-off1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h3>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1317780-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_turn-off1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1317780-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_turn-off1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1317750-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle turn-off1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle turn-off1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1317740-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle turn-off1)
    (<o1> ^next-goal-handle turn-off1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1317731-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle turn-off1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle turn-off1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1314758-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle turn-off1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask140)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1314719-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_turn-off1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1314719-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_turn-off1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1314112-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle turn-off1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^is-visible1 not-visible1
          ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle view1 ^item-type task-operator ^name op_view1
           ^arg1 <a2> ^subtask-handle subtask139)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1314073-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_turn-off1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1314073-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_turn-off1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-activated1 activated1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1314051-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle turn-off1goal1)
    (<t1> ^task-handle turn-off1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle turn-off1goal1)
    (<i2> ^1 <i1> ^property-handle is-activated1 ^handle not-activated1
           ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1314034-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle turn-off1)
    (<o1> ^next-goal-handle turn-off1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1314025-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle turn-off1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle turn-off1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1314019-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle turn-off1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle turn-off1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1313995-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^affordance1 activatable1 ^is-activated1 activated1
          ^is-confirmed1 confirmed1 ^category lightswitch1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle turn-off1 ^item-type task-operator ^name op_turn-off1
           ^arg1 <a2> ^subtask-handle subtask33)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1313975-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal35)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal35)
    (<i1> ^subtask-handle subtask33 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1313948-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal35 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> inspect1goal35 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category lightswitch1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1313937-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle inspect1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle inspect1int30)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^contents1 empty1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle inspect1goal35
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1313916-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1int20)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int30
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1313719-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int119)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int119 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1313708-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int119 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1313699-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal118)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int119
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1313668-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i4>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_open1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i2>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1313668-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i4> ^1 <i5> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i6>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i7>)
    (<i5> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^property-handle is-open1 ^handle not-open1 ^1 <i7> ^type unary)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i2> ^object <i7> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1313668-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i4> ^1 <i5> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i6>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i7>)
    (<i5> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^property-handle is-open1 ^handle not-open1 ^1 <i7> ^type unary)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_open1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i6>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i2> ^object <i7> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1313668-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^category fridge1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^1 <i2> ^type unary)
    (<s5> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1313668-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_open1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1 ^category fridge1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^1 <i2> ^type unary)
    (<s5> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1313652-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i4>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^category fridge1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_pick-up1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i2>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1313652-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i4> ^1 <i5> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i6>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i7>)
    (<i5> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^property-handle is-open1 ^handle not-open1 ^1 <i7> ^type unary)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i2> ^object <i7> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1313652-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i4> ^1 <i5> ^1 <i8>
          ^handle <h1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle store1 ^arg1 <a4> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle store1 ^arg1 <a5> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i6>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i7>)
    (<i5> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i6>)
    (<i6> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^category fridge1)
    (<i7> ^predicates <p2>)
    (<i8> ^property-handle is-open1 ^handle not-open1 ^1 <i7> ^type unary)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i6> ^object <i2> ^object <i7> ^object <i3>)
    (<r1> ^arm <a11>)
    (<a11> ^holding-object false)
    (<r2> ^arm <a12>)
    (<a12> ^holding-object false)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1313652-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^category fridge1)
    (<s5> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i2>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1313652-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^category fridge1)
    (<s5> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle store1 ^arg1 <a8> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator })
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i2>)
    (<r1> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1313637-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h2>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<i1> ^type relation ^2 <i3> ^handle <h1> ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^category fridge1)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<a5> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1313637-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i2> ^type relation ^2 <i5> ^handle <h2> ^1 <i8>)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^property-handle is-open1 ^handle not-open1 ^1 <i5> ^type unary)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1313637-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h3> ^handle <h4>)
    (<t1> ^task-handle store1 ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<t2> ^task-handle store1 ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<i1> ^type relation ^2 <i4> ^handle <h1> ^1 <i7>)
    (<i2> ^type relation ^2 <i5> ^handle <h2> ^1 <i8>)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^category fridge1)
    (<i5> ^predicates <p1>)
    (<i6> ^property-handle is-open1 ^handle not-open1 ^1 <i5> ^type unary)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s4> ^task-handle <t3>
          ^task-handle <t4>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h1>)
    (<a5> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a6> ^arg-type object ^id <i7>)
    (<a7> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i7> ^object <i5> ^object <i8>)
    (<r1> ^arm <a8>)
    (<a8> ^holding-object true)
    (<r2> ^arm <a9>)
    (<a9> ^holding-object true)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h1>)
    (<p5> ^handle <h2>)
   -{ (<t1> ^{ <a12> <> <a10> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type object ^id <i7>)
    (<a16> ^arg-type object ^id <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1313637-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i4> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^category fridge1)
    (<i4> ^property-handle is-open1 ^handle not-open1 ^1 <i3> ^type unary)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1313637-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i4> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy category -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^category fridge1)
    (<i4> ^property-handle is-open1 ^handle not-open1 ^1 <i3> ^type unary)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle store1 ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type object ^id <i2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1313622-5
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^type relation ^2 <i3> ^handle <h2> ^1 <i4>)
    (<i2> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i3>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^subtask-handle <s2> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i3> ^1 <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1313622-4
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h1> ^handle <h3>)
    (<i1> ^type relation ^2 <i4> ^handle <h2> ^1 <i7>)
    (<i2> ^type relation ^2 <i5> ^handle <h4> ^1 <i8>)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
    (<i5> ^predicates <p1>)
    (<i6> ^property-handle is-open1 ^handle not-open1 ^1 <i5> ^type unary)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i4>)
    (<a5> ^arg-type object ^id <i5>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i5> ^object <i7> ^object <i8>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h2> ^instance <i9> -^dont-copy <i9>)
    (<i9> -^3 <i10> ^2 <i4> ^1 <i7>)
    (<p5> ^handle <h4> ^instance <i11>)
    (<i11> ^2 <i5> ^1 <i8>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1313622-3
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^2 <i2> ^1 <i3> ^1 <i6>
          ^handle <h1> ^handle <h3>)
    (<i1> ^type relation ^2 <i4> ^handle <h2> ^1 <i7>)
    (<i2> ^type relation ^2 <i5> ^handle <h4> ^1 <i8>)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p1>)
    (<p1> -^dont-copy is-open1 ^is-open1 open2)
    (<i5> ^predicates <p1>)
    (<i6> ^property-handle is-open1 ^handle not-open1 ^1 <i5> ^type unary)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_close1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i4>)
    (<a5> ^arg-type object ^id <i5>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i4> ^object <i5> ^object <i7> ^object <i8>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle <h2> ^instance <i9> -^dont-copy <i9>)
    (<i9> -^3 <i10> ^2 <i4> ^1 <i7>)
    (<p5> ^handle <h4> ^instance <i11>)
    (<i11> ^2 <i5> ^1 <i8>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1313622-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_close1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^handle <h2> ^1 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^1 <i2> ^type unary)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1313622-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_close1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^handle <h2> ^1 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^1 <i2> ^type unary)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1313593-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1term128)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1term128 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1313582-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1term128 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1313573-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle store1goal129)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle store1term128
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1313556-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle close1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1313546-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle close1)
    (<o1> ^next-goal-handle close1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1313537-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle close1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle close1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1313402-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1goal1)
    (<t1> ^task-handle close1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle close1goal1)
    (<i2> ^1 <i1> ^property-handle is-open1 ^handle not-open1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1313385-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle close1)
    (<o1> ^next-goal-handle close1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1313376-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle close1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle close1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1313363-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle close1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle close1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1313339-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^affordance1 openable1 ^is-open1 open2 ^is-confirmed1 confirmed1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle close1 ^item-type task-operator ^name op_close1
           ^arg1 <a2> ^subtask-handle subtask137)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1311501-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object { <o2> <> <i1> })
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<o2> ^predicates <p3>)
    (<p3> ^affordance1 openable1 ^affordance1 receptacle1 ^is-open1 open2
          ^is-confirmed1 confirmed1 ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a2> ^arg1 <a3> ^subtask-handle subtask136)
    (<a2> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1309605-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask135)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1309531-5
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle open1 ^name op_open1 ^arg1 <a4> ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_view1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1309531-4
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle open1 ^name op_open1 ^arg1 <a4> ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle open1 ^name op_open1 ^arg1 <a5> ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1309531-3
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle open1 ^name op_open1 ^arg1 <a4> ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle open1 ^name op_open1 ^arg1 <a5> ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1309531-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle open1 ^name op_open1 ^arg1 <a8> ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1309531-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle open1 ^name op_open1 ^arg1 <a8> ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1309516-5
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1309516-4
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h3>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1309516-3
    :chunk
    (state <s1> ^name op_open1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h3>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1309516-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1309516-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1309486-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle open1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1309476-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle open1)
    (<o1> ^next-goal-handle open1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1309467-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle open1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle open1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1308640-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle open1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask134)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1308601-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1308601-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_open1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1308264-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle open1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^is-visible1 not-visible1
          ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle view1 ^item-type task-operator ^name op_view1
           ^arg1 <a2> ^subtask-handle subtask133)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1308225-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_open1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1308225-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_open1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1308203-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1goal1)
    (<t1> ^task-handle open1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle open1goal1)
    (<i2> ^1 <i1> ^property-handle is-open1 ^handle open2 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1308186-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle open1)
    (<o1> ^next-goal-handle open1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1308177-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle open1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle open1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1308171-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle open1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle open1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1308147-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle store1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^affordance1 openable1 ^is-open1 not-open1 ^is-confirmed1 confirmed1
          ^category fridge1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle open1 ^item-type task-operator ^name op_open1
           ^arg1 <a2> ^subtask-handle subtask132)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1308108-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_open1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^1 <i2> ^type unary)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1308108-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_open1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 not-open1
          ^is-confirmed1 confirmed1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^1 <i2> ^type unary)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 confirmed1)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1308107-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_close1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^handle <h2> ^1 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^1 <i2> ^type unary)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1308107-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_close1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^handle <h2> ^1 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 ^is-open1 open2)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^1 <i2> ^type unary)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i4>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h2> ^instance <i5> -^dont-copy <i5>)
    (<i5> -^3 <i6> ^2 <i2> ^1 <i4>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1308083-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-open1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 open2 ^is-confirmed1 confirmed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i2>)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1308083-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i3> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i4>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^property-handle is-open1 ^handle not-open1 ^type unary ^1 <i4>)
    (<i4> ^predicates <p3>)
    (<p3> -^dont-copy is-open1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1
          ^affordance1 receptacle1 ^is-open1 open2 ^is-confirmed1 confirmed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i4> ^object <i2>)
    (<r1> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1308081-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i4> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1 ^is-open1 open2
          ^is-confirmed1 confirmed1)
    (<i4> ^property-handle is-open1 ^handle not-open1 ^1 <i3> ^type unary)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1308081-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i4> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-open1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 openable1 ^is-open1 open2
          ^is-confirmed1 confirmed1)
    (<i4> ^property-handle is-open1 ^handle not-open1 ^1 <i3> ^type unary)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2>)
    (<r1> ^arm <a6>)
    (<a6> ^holding-object true)
    (<p3> ^predicate <p4>)
    (<p4> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t1307520-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 2 ^2 <i1> ^1 <i2> ^handle <h1>)
    (<i1> ^type relation ^handle <h3> ^2 <i3> ^1 <i5>)
    (<i2> ^type unary ^property-handle <p1> ^handle <h2> ^1 <i4>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i4> <i6> ^<i5> <i7> ^<i3> <i8>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^2 <i9> ^1 <i10> ^pred-count 2)
    (<i9> ^2 <i8> ^1 <i7> ^handle <h3> ^type relation)
    (<i10> ^1 <i6> ^property-handle <p1> ^handle <h2> ^type unary)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1307508-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1goal129)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category fridge1)
    (<o3> ^predicates <p2>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^2 <i2> ^1 <i3> ^pred-count 2 ^handle store1goal129)
    (<i2> ^2 <o3> ^1 <i1> ^handle in1 ^type relation)
    (<i3> ^1 <o2> ^property-handle is-open1 ^handle not-open1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1307460-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle store1)
    (<o1> ^next-goal-handle store1goal129 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> store1goal129 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^default <d1>)
    (<d1> ^category fridge1)
    (<i2> ^default <d2>)
    (<d2> ^category fridge1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1307451-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle store1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle store1start127)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^category condiment1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle store1goal129
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1306711-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle store1start127)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle store1start127 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1306680-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category condiment1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle store1 ^item-type task-operator ^name op_store1116
           ^arg1 <a1> ^subtask-handle subtask117)
    (<a1> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1306656-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal118)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal118)
    (<i1> ^subtask-handle subtask117 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1306627-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal118 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> inspect1goal118 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category condiment1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1306616-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle inspect1int120)
    (<w1> ^robot <r1> ^objects <o1> ^predicates <p3>)
    (<r1> ^current-location <c4>)
    (<c4> ^predicates <p2>)
    (<p2> ^category room1 ^name messhall1)
    (<o1> ^object <c4> ^object <i2> ^object <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p5>)
    (<p5> ^category table1)
    (<i3> ^predicates <p6>)
    (<p6> ^category condiment1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle inspect1goal118
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1306594-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int120)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int120 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1305904-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int100)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int100 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1305893-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int100 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1305884-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal101)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int100
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1305853-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle move1 ^arg2 <a4> ^arg1 <a5>
          ^name { <n1> <> evaluate-operator } ^subtask-handle <s3>)
    (<a4> ^arg-type partial-predicate ^handle in1 ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-confirmed1 -^dont-copy affordance1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^is-confirmed1 confirmed1)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_pick-up1 ^arg1 <a9> ^subtask-handle <s2> ^task-handle <t2>)
    (<a9> ^arg-type object ^id <i2>)
    (<p3> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1305853-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i6> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle move1 ^arg2 <a4> ^arg1 <a5>
          ^name { <n1> <> evaluate-operator } ^subtask-handle <s3>)
    (<a4> ^arg-type partial-predicate ^handle in1 ^2 <i4>)
    (<a5> ^arg-type object ^id <i2>)
    (<t2> ^task-handle move1 ^arg2 <a6> ^arg1 <a7>
          ^name { <n2> <> evaluate-operator } ^subtask-handle <s5>)
    (<a6> ^arg-type partial-predicate ^handle in1 ^2 <i5>)
    (<a7> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i4>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-confirmed1 -^dont-copy affordance1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^is-confirmed1 confirmed1)
    (<i5> ^predicates <p2>)
    (<i6> ^handle in1 ^2 <i5> ^1 <i3> ^type relation)
   -{ (<o1> ^{ <a8> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<o1> ^name op_pick-up1 ^arg1 <a11> ^arg1 <a12> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a11> ^arg-type object ^id <i2>)
    (<a12> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4> ^object <i3> ^object <i5>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1305853-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p3>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i6> ^handle <h1>
          ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle move1 ^arg2 <a4> ^arg1 <a5>
          ^name { <n1> <> evaluate-operator } ^subtask-handle <s3>)
    (<a4> ^arg-type partial-predicate ^handle in1 ^2 <i4>)
    (<a5> ^arg-type object ^id <i2>)
    (<t2> ^task-handle move1 ^arg2 <a6> ^arg1 <a7>
          ^name { <n2> <> evaluate-operator } ^subtask-handle <s5>)
    (<a6> ^arg-type partial-predicate ^handle in1 ^2 <i5>)
    (<a7> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i4>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-confirmed1 -^dont-copy affordance1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^is-confirmed1 confirmed1)
    (<i5> ^predicates <p2>)
    (<i6> ^handle in1 ^2 <i5> ^1 <i3> ^type relation)
   -{ (<o1> ^{ <a8> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<o1> ^name op_pick-up1 ^arg1 <a11> ^arg1 <a12> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a11> ^arg-type object ^id <i2>)
    (<a12> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4> ^object <i3> ^object <i5>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1305853-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle move1 ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s6>
          ^name { <n1> <> evaluate-operator })
    (<a8> ^arg-type partial-predicate ^handle in1 ^2 <i3>)
    (<a9> ^arg-type object ^id <i2>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy affordance1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^is-confirmed1 confirmed1)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s8> ^name <n1>)
    (<s4> ^name <n2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1305853-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle move1 ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s6>
          ^name { <n1> <> evaluate-operator })
    (<a8> ^arg-type partial-predicate ^handle in1 ^2 <i3>)
    (<a9> ^arg-type object ^id <i2>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy affordance1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^is-confirmed1 confirmed1)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s8> ^name <n1>)
    (<s4> ^name <n2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1305838-5
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action ^name <n1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1305838-4
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h3>
          ^handle <h4>)
    (<i1> ^type relation ^handle <h1> ^1 <i3> ^2 <i5>)
    (<i2> ^type relation ^handle <h2> ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i5>)
    (<a5> ^arg-type partial-predicate ^handle <h2> ^2 <i6>)
    (<a6> ^arg-type object ^id <i3>)
    (<a7> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i5> ^object <i4> ^object <i6>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle <h1>)
    (<p4> ^handle <h2>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1305838-3
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h3>
          ^handle <h4>)
    (<i1> ^type relation ^handle <h1> ^1 <i3> ^2 <i5>)
    (<i2> ^type relation ^handle <h2> ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg2 <a5> ^arg1 <a6> ^arg1 <a7>
          ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i5>)
    (<a5> ^arg-type partial-predicate ^handle <h2> ^2 <i6>)
    (<a6> ^arg-type object ^id <i3>)
    (<a7> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i5> ^object <i4> ^object <i6>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle <h1>)
    (<p4> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1305838-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1305838-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1305810-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle move1term110)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle move1term110 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1305799-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle move1)
    (<o1> ^next-goal-handle move1term110 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1305790-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle move1goal109)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle move1term110
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1305757-5
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle put-down1 ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^subtask-handle <s3>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^subtask-handle <s2> ^task-handle <t2>)
    (<a9> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1305757-4
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i6> ^handle <h2>
          ^handle <h5>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle put-down1 ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^subtask-handle <s3>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<t2> ^task-handle put-down1 ^name op_put-down1 ^arg2 <a6> ^arg1 <a7>
          ^subtask-handle <s5>)
    (<a6> ^arg-type partial-predicate ^2 <i5> ^handle <h6>)
    (<a7> ^arg-type object ^id <i3>)
    (<i1> ^type relation ^1 <i2> ^2 <i4> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<i5> ^predicates <p2>)
    (<i6> ^2 <i5> ^1 <i3> ^type relation ^handle <h4>)
   -{ (<o1> ^{ <a8> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<o1> ^name op_view1 ^arg1 <a11> ^arg1 <a12> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a11> ^arg-type object ^id <i4>)
    (<a12> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4> ^object <i3> ^object <i5>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1305757-3
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i6> ^handle <h2>
          ^handle <h5>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle put-down1 ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^subtask-handle <s3>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<t2> ^task-handle put-down1 ^name op_put-down1 ^arg2 <a6> ^arg1 <a7>
          ^subtask-handle <s5>)
    (<a6> ^arg-type partial-predicate ^2 <i5> ^handle <h6>)
    (<a7> ^arg-type object ^id <i3>)
    (<i1> ^type relation ^1 <i2> ^2 <i4> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<i5> ^predicates <p2>)
    (<i6> ^2 <i5> ^1 <i3> ^type relation ^handle <h4>)
   -{ (<o1> ^{ <a8> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<o1> ^name op_view1 ^arg1 <a11> ^arg1 <a12> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a11> ^arg-type object ^id <i4>)
    (<a12> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4> ^object <i3> ^object <i5>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1305757-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle put-down1 ^name op_put-down1 ^arg2 <a8> ^arg1 <a9>
          ^subtask-handle <s7>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1305757-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle put-down1 ^name op_put-down1 ^arg2 <a8> ^arg1 <a9>
          ^subtask-handle <s7>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1305742-5
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^subtask-handle <s2> ^task-handle <t2>)
    (<a9> ^arg-type object ^id <i3>)
    (<p3> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1305742-4
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h5>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i4> ^type relation ^2 <i5> ^1 <i6> ^handle <h4>)
    (<i5> ^predicates <p2>)
    (<i6> ^predicates <p1>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i3>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3> ^object <i6> ^object <i5>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i5> ^handle <h6>)
    (<a12> ^arg-type object ^id <i6>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1305742-3
    :chunk
    (state <s1> ^name op_put-down1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h5>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i3> ^handle <h3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<i4> ^type relation ^2 <i5> ^1 <i6> ^handle <h4>)
    (<i5> ^predicates <p2>)
    (<i6> ^predicates <p1>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_approach1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i3>)
    (<a10> ^arg-type object ^id <i5>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3> ^object <i6> ^object <i5>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i5> ^handle <h6>)
    (<a12> ^arg-type object ^id <i6>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1305742-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1305742-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1305711-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle put-down1goal2)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1305041-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle put-down1 ^arg2 <a1> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask114)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1305002-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1305002-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_put-down1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1304762-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle put-down1 ^arg2 <a1> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^is-visible1 not-visible1
          ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle view1 ^item-type task-operator ^name op_view1
           ^arg1 <a2> ^subtask-handle subtask113)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1304723-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_put-down1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1304723-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_put-down1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^2 <i2> ^1 <i3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-reachable1
          ^is-reachable1 not-reachable1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2>)
    (<o2> ^object <i3> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1304701-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1goal2)
    (<t1> ^task-handle put-down1 ^arg2 <a1> ^arg2 <a2> ^arg1 <a3> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i2>)
    (<a2> ^arg-type partial-predicate ^handle <h1>)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i3> ^pred-count 1 ^handle put-down1goal2)
    (<i3> ^2 <i2> ^1 <i1> ^handle <h1> ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1304683-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1goal2 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1304674-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle put-down1 ^name <n1> ^arg2 <a1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle put-down1start1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1goal2
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1304626-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle move1 ^arg2 <a1> ^arg2 <a2> ^arg1 <a3> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 { <i2> <> <i1> })
    (<a2> ^arg-type partial-predicate ^handle in1)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1> ^object <i2>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    (<i2> ^predicates <p3>)
    (<p3> ^affordance1 always-open1 ^affordance1 receptacle1
          ^is-confirmed1 confirmed1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg2 <a4> ^arg1 <a5> ^subtask-handle subtask112)
    (<a4> ^2 <i2> ^handle in1 ^arg-type partial-predicate)
    (<a5> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1303711-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle move1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask111)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1303672-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy affordance1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^is-confirmed1 confirmed1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1303672-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy affordance1
          ^affordance1 always-open1 ^affordance1 receptacle1
          ^is-confirmed1 confirmed1)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1303671-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1303671-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5>
          ^task-handle <t1>)
   -{ (<s2> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h1>)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1303604-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle move1goal109)
    (<t1> ^task-handle move1 ^arg2 <a1> ^arg2 <a2> ^arg1 <a3> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i2>)
    (<a2> ^arg-type partial-predicate ^handle <h1>)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i3> ^pred-count 1 ^handle move1goal109)
    (<i3> ^2 <i2> ^1 <i1> ^handle <h1> ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1303585-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle move1)
    (<o1> ^next-goal-handle move1goal109 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1303576-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle move1start108)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle move1goal109
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1303163-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle move1start108)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle move1start108 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1303130-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^category sink1)
    (<o3> ^predicates <p3>)
    (<p3> ^category plate1)
    -->
    (<s1> ^operator <o4> +)
    (<o4> ^task-handle move1 ^item-type task-operator ^name op_move198
           ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask99)
    (<a1> ^2 <o2> ^handle in1 ^arg-type partial-predicate)
    (<a2> ^id <o3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1303110-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal101)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal101)
    (<i1> ^subtask-handle subtask99 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1303068-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal101 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> inspect1goal101 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^default <d1>)
    (<d1> ^category sink1)
    (<i2> ^default <d2>)
    (<d2> ^category plate1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1303057-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle inspect1int102)
    (<w1> ^robot <r1> ^objects <o1> ^predicates <p3>)
    (<r1> ^current-location <c4>)
    (<c4> ^predicates <p2>)
    (<p2> ^category room1 ^name messhall1)
    (<o1> ^object <c4> ^object <i2> ^object <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle on1 ^instance <i1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<i2> ^predicates <p5>)
    (<p5> ^category table1)
    (<i3> ^predicates <p6>)
    (<p6> ^category plate1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle inspect1goal101
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t1303042-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int102)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int102 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1303031-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int102 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1303022-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal105)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int102
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1303016-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal105)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal105)
    (<i1> ^subtask-handle subtask5 ^type subtask)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1159344-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category room1 ^name messhall1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle inspect1 ^item-type task-operator ^name op_inspect11
           ^arg1 <a1> ^subtask-handle subtask93)
    (<a1> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1159320-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1goal94)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle guard1goal94)
    (<i1> ^subtask-handle subtask93 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1159291-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1goal94 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> guard1goal94 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^name messhall1 ^category room1)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1159033-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1repeat92)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^pred-count 0 ^handle guard1repeat92)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1159018-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1repeat92 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1159009-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle guard1goal87)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle guard1repeat92
           ^next-goal-type repeat-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1158586-1
    :chunk
    (state <s1> ^current-task-segment <c1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^world <w1>)
    (<c1> -^performed-subtask subtask86)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 relieving1 ^is-confirmed1 not-confirmed1
          ^category officer1)
    (<o3> ^predicates <p3>)
    (<p3> ^modifier1 answered1)
    -->
    (<s1> ^operator <o4> +)
    (<o4> ^task-handle remember1 ^item-type task-operator ^name op_remember1
           ^modifiers <m1> ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask86)
    (<m1> ^handle once1 ^arg-type modifiers)
    (<a1> ^id <o2> ^arg-type object)
    (<a2> ^id <o3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1158560-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1goal87)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle guard1goal87)
    (<i1> ^subtask-handle subtask86 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t1158522-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1goal87 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> guard1goal87 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 relieving1 ^category officer1)
    (<i2> ^default <d2>)
    (<d2> ^modifier1 answered1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1158511-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle guard1goal82)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle guard1goal87
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1158195-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ask1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle ask1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1158185-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle ask1)
    (<o1> ^next-goal-handle ask1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1158176-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ask1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ask1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1156894-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ask1goal1)
    (<t1> ^task-handle ask1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle ask1goal1)
    (<i1> ^command-name ask-command ^type execute-command)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1156879-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle ask1)
    (<o1> ^next-goal-handle ask1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1156870-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ask1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ask1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1156857-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ask1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle ask1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t1156836-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type modifiers ^handle <h1> -^handle { <h2> <> <h1> })
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<p1> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a14> ^<a3> <a15>)
    (<a14> ^handle <h1> ^arg-type modifiers)
    (<a15> ^id <i2> ^arg-type object)
    (<i2> ^predicates <p2> ^abstract true ^item-type object)
    (<p2> ^<a8> <a9> ^<a10> <a11>)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t1156829-1
    :chunk
    (state <s1> ^current-task-segment <c1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^world <w1>)
    (<c1> -^performed-subtask subtask81)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^task-handle ask1 ^item-type task-operator ^name op_ask1
           ^modifiers <m1> ^arg1 <a1> ^subtask-handle subtask81)
    (<m1> ^handle once1 ^arg-type modifiers)
    (<a1> ^id <i1> ^arg-type object)
    (<i1> ^predicates <p2> ^abstract true)
    (<p2> ^sentence |who is my relieving officer?| ^category message)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t1156811-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1goal82)
    (<t1> ^task-handle guard1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle guard1goal82)
    (<i1> ^subtask-handle subtask81 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t1156786-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle guard1)
    (<o1> ^next-goal-handle guard1goal82 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> guard1goal82 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^sentence |who is my relieving officer?| ^category message)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1156775-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle guard1start77)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle guard1goal82
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t1156601-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle guard1start77)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle guard1start77 ^item-type start-goal)
}

sp {chunkx2*__WHENEVER__PROP__*problem-space*action*propose*whenever*task*OpNoChange*t1150630-1
    :chunk
    (state <s1> ^world <w1> -^child-task-segment <c1> ^problem-space <p1>
          ^task-operator <t1> ^name <n1>)
    (<p1> ^subproblem execute ^name action)
    (<w1> ^objects <o1>)
    (<t1> ^name <n1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-visible1 visible1 ^category fire1)
    -->
    (<s1> ^operator <o3> + ^operator <o3> =)
    (<o3> ^whenever-handle whenever72 ^task-handle raise1
           ^item-type task-operator ^name op_raise138 ^arg1 <a1>)
    (<a1> ^id <i1> ^arg-type object)
    (<i1> ^predicates <p3> ^abstract true)
    (<p3> ^category fire-alarm1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t1150235-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t1150235-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    (<i3> ^abstract true ^predicates <p2>)
    (<a9> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    (<a11> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p2>)
    (<p2> ^<a12> <a13> ^<a14> { <a15> < <a13> }
          -^<a16> { <a17> <> <a13> <> <a15> } ^<a18> <a19>
          ^<a20> { <a21> < <a19> })
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t1150235-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    (<i3> ^abstract true ^predicates <p2>)
    (<a9> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    (<a11> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p2>)
    (<p2> ^<a12> <a13> ^<a14> { <a15> < <a13> }
          -^<a16> { <a17> <> <a13> <> <a15> } ^<a18> <a19>
          ^<a20> { <a21> < <a19> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t1150235-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t1150235-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*Tie*t1150232-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a3> ^<a4> <a12>)
    (<t2> ^task-handle <t1> ^<a1> <a2> ^{ <a4> < <a1> } <a5>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<a3> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
   -{ (<c2> ^{ <a6> <> <a1> <> <a4> } <a7>)
      (<a7> ^arg-type <a8>)}
   -{ (<t2> ^{ <a9> <> <a1> <> <a4> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a5> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<a12> ^arg-type object ^id <i3>)
    (<i3> ^abstract true ^predicates <p1>)
    (<p1> ^<a13> <a14> ^<a15> { <a16> < <a14> })
    (<p2> ^<a13> <a14> -^<a17> { <a18> <> <a14> <> <a16> } ^<a15> <a16>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t1150180-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle raise1term69)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle raise1term69 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t1150169-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle raise1)
    (<o1> ^next-goal-handle raise1term69 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t1150160-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle raise1goal67)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle raise1term69
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t935534-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c1>)
    (<o1> ^object { <o2> <> <c1> })
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 emergency1 ^is-confirmed1 confirmed1 ^category location)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle go-to-location1 ^item-type task-operator
           ^name op_go-to-location1 ^arg2 <a1> ^subtask-handle subtask66)
    (<a1> ^2 <o2> ^handle to1 ^arg-type partial-predicate)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t935512-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle raise1goal67)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle raise1goal67)
    (<i1> ^subtask-handle subtask66 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t935485-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle raise1)
    (<o1> ^next-goal-handle raise1goal67 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> raise1goal67 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 emergency1 ^category location)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t935474-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle raise1goal64)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle raise1goal67
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t934611-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 emergency1 ^category location)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle describe1 ^item-type task-operator ^name op_describe1
           ^arg1 <a1> ^subtask-handle subtask63)
    (<a1> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t934587-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle raise1goal64)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle raise1goal64)
    (<i1> ^subtask-handle subtask63 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t934560-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle raise1)
    (<o1> ^next-goal-handle raise1goal64 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> raise1goal64 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 emergency1 ^category location)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t934549-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle raise1goal56)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle raise1goal64
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t934311-5
    :chunk
    (state <s1> ^name op_say1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h3>)
    (<a5> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<i2> ^type relation ^2 <i3> ^1 <i4> ^handle <h2>)
    (<i3> ^abstract true ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_find1 ^arg1 <a9> ^subtask-handle <s2> ^task-handle <t2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i4>)
    (<p1> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> } ^<a16> <a17>
          ^<a18> { <a19> < <a17> } -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t934311-4
    :chunk
    (state <s1> ^name op_say1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i2> ^1 <i5> ^handle <h1>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h3>)
    (<a5> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<i2> ^type relation ^2 <i3> ^1 <i4> ^handle <h2>)
    (<i3> ^abstract true ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i5> ^type relation ^2 <i6> ^1 <i7> ^handle <h5>)
    (<i6> ^abstract true ^predicates <p1>)
    (<i7> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_find1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i4> ^object <i7>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i7> ^handle <h6>)
    (<a12> ^arg-type object ^id <i8>)
    (<i8> ^abstract true ^predicates <p1>)
    (<p1> ^<a13> <a14> ^<a15> { <a16> < <a14> }
          -^<a17> { <a18> <> <a14> <> <a16> } ^<a19> <a20>
          ^<a21> { <a22> < <a20> } -^<a23> { <a24> <> <a20> <> <a22> }
          ^<a25> <a26> ^<a27> { <a28> < <a26> } ^<a29> <a30>
          ^<a31> { <a32> < <a30> })
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t934311-3
    :chunk
    (state <s1> ^name op_say1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i2> ^1 <i5> ^handle <h1>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h3>)
    (<a5> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<i2> ^type relation ^2 <i3> ^1 <i4> ^handle <h2>)
    (<i3> ^abstract true ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i5> ^type relation ^2 <i6> ^1 <i7> ^handle <h5>)
    (<i6> ^abstract true ^predicates <p1>)
    (<i7> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_find1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i4> ^object <i7>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i7> ^handle <h6>)
    (<a12> ^arg-type object ^id <i8>)
    (<i8> ^abstract true ^predicates <p1>)
    (<p1> ^<a13> <a14> ^<a15> { <a16> < <a14> }
          -^<a17> { <a18> <> <a14> <> <a16> } ^<a19> <a20>
          ^<a21> { <a22> < <a20> } -^<a23> { <a24> <> <a20> <> <a22> }
          ^<a25> <a26> ^<a27> { <a28> < <a26> } ^<a29> <a30>
          ^<a31> { <a32> < <a30> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t934311-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_find1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_say1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i3> ^abstract true ^predicates <p3>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    (<p3> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> } ^<a16> <a17>
          ^<a18> { <a19> < <a17> } -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t934311-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_find1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_say1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i3> ^abstract true ^predicates <p3>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    (<p3> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> } ^<a16> <a17>
          ^<a18> { <a19> < <a17> } -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t934297-5
    :chunk
    (state <s1> ^name op_say1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i2> ^handle <h1>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h3>)
    (<a5> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<i2> ^type relation ^2 <i3> ^1 <i4> ^handle <h2>)
    (<i3> ^abstract true ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^subtask-handle <s2> ^task-handle <t2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p3> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i4>)
    (<p1> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> } ^<a16> <a17>
          ^<a18> { <a19> < <a17> } -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t934297-4
    :chunk
    (state <s1> ^name op_say1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i2> ^1 <i5> ^handle <h1>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h3>)
    (<a5> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<i2> ^type relation ^2 <i3> ^1 <i4> ^handle <h2>)
    (<i3> ^abstract true ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i5> ^type relation ^2 <i6> ^1 <i7> ^handle <h5>)
    (<i6> ^abstract true ^predicates <p1>)
    (<i7> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i4> ^object <i7>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i7> ^handle <h6>)
    (<a12> ^arg-type object ^id <i8>)
    (<i8> ^abstract true ^predicates <p1>)
    (<p1> ^<a13> <a14> ^<a15> { <a16> < <a14> }
          -^<a17> { <a18> <> <a14> <> <a16> } ^<a19> <a20>
          ^<a21> { <a22> < <a20> } -^<a23> { <a24> <> <a20> <> <a22> }
          ^<a25> <a26> ^<a27> { <a28> < <a26> } ^<a29> <a30>
          ^<a31> { <a32> < <a30> })
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t934297-3
    :chunk
    (state <s1> ^name op_say1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p3> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i2> ^1 <i5> ^handle <h1>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg2 <a4> ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t3>
          ^name <n2>)
    (<a4> ^arg-type partial-predicate ^2 <i4> ^handle <h3>)
    (<a5> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<i2> ^type relation ^2 <i3> ^1 <i4> ^handle <h2>)
    (<i3> ^abstract true ^predicates <p1>)
    (<i4> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i5> ^type relation ^2 <i6> ^1 <i7> ^handle <h5>)
    (<i6> ^abstract true ^predicates <p1>)
    (<i7> ^predicates <p2>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i4>)
    (<a10> ^arg-type object ^id <i7>)
    (<p3> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i4> ^object <i7>)
    (<t5> ^arg2 <a11> ^arg1 <a12> ^subtask-handle <s5> ^task-handle <t6>
          ^name <n4>)
    (<a11> ^arg-type partial-predicate ^2 <i7> ^handle <h6>)
    (<a12> ^arg-type object ^id <i8>)
    (<i8> ^abstract true ^predicates <p1>)
    (<p1> ^<a13> <a14> ^<a15> { <a16> < <a14> }
          -^<a17> { <a18> <> <a14> <> <a16> } ^<a19> <a20>
          ^<a21> { <a22> < <a20> } -^<a23> { <a24> <> <a20> <> <a22> }
          ^<a25> <a26> ^<a27> { <a28> < <a26> } ^<a29> <a30>
          ^<a31> { <a32> < <a30> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t934297-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_say1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i3> ^abstract true ^predicates <p3>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    (<p3> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> } ^<a16> <a17>
          ^<a18> { <a19> < <a17> } -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t934297-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_say1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i3> ^abstract true ^predicates <p3>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    (<p3> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> } ^<a16> <a17>
          ^<a18> { <a19> < <a17> } -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t934259-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle say1goal2)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle say1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t925624-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle say1 ^arg2 <a1> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^is-visible1 not-visible1
          ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle view1 ^item-type task-operator ^name op_view1
           ^arg1 <a2> ^subtask-handle subtask62)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t925585-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_say1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i3> ^abstract true ^predicates <p3>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    (<p3> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> })
    (<p4> ^<a16> <a17> ^<a18> { <a19> < <a17> }
          -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t925585-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_say1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i3> ^abstract true ^predicates <p3>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    (<p3> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> })
    (<p4> ^<a16> <a17> ^<a18> { <a19> < <a17> }
          -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t794065-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle say1 ^arg2 <a1> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> ^is-confirmed1 not-confirmed1 ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle find1 ^item-type task-operator ^name op_find1
           ^arg1 <a2> ^subtask-handle subtask59)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t794026-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_find1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_say1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i3> ^abstract true ^predicates <p3>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    (<p3> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> })
    (<p4> ^<a16> <a17> ^<a18> { <a19> < <a17> }
          -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t794026-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_find1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_say1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^1 <i2> ^2 <i3> ^handle <h2>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 ^is-visible1 not-visible1)
    (<i3> ^abstract true ^predicates <p3>)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg2 <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg2 <a8> ^arg1 <a9> ^subtask-handle <s7> ^task-handle <t3>
          ^name <n2>)
    (<a8> ^arg-type partial-predicate ^2 <i2> ^handle <h3>)
    (<a9> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    (<p3> ^<a10> <a11> ^<a12> { <a13> < <a11> }
          -^<a14> { <a15> <> <a11> <> <a13> })
    (<p4> ^<a16> <a17> ^<a18> { <a19> < <a17> }
          -^<a20> { <a21> <> <a17> <> <a19> })
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t794019-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^2 <i2> ^handle <h2> ^1 <i3>)
    (<i2> ^abstract true ^predicates <p1>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i3> <i4>)
    (<p1> ^<a1> <a2> ^<a3> { <a4> < <a2> } -^<a5> { <a6> <> <a2> <> <a4> })
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i5> ^pred-count 1)
    (<i5> ^2 <i6> ^1 <i4> ^handle <h2> ^type relation)
    (<i6> ^predicates <p2> ^abstract true ^item-type object)
    (<p2> ^<a1> <a2> ^<a3> <a4>)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t794013-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    (<i3> ^abstract true ^predicates <p1>)
    (<p1> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a14> ^<a3> <a15>)
    (<a14> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
    (<a15> ^id <i4> ^arg-type object)
    (<i4> ^predicates <p2> ^abstract true ^item-type object)
    (<p2> ^<a8> <a9> ^<a10> <a11>)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t794000-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle say1goal2)
    (<t1> ^task-handle say1 ^arg2 <a1> ^arg1 <a2> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i2>)
    (<a2> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i3> ^pred-count 1 ^handle say1goal2)
    (<i3> ^2 <i1> ^1 <i2> ^handle heard2 ^type relation)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t793982-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle say1)
    (<o1> ^next-goal-handle say1goal2 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t793973-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle say1 ^name <n1> ^arg2 <a1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle say1start1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle say1goal2
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t793943-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^2 <i1> ^handle <h1>)
    (<i1> -^abstract true)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p1>)
    (<p1> ^<a8> <a9> ^<a10> { <a11> < <a9> }
          -^<a12> { <a13> <> <a9> <> <a11> })
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a14> ^<a3> <a15>)
    (<a14> ^2 <i1> ^handle <h1> ^arg-type partial-predicate)
    (<a15> ^id <i3> ^arg-type object)
    (<i3> ^predicates <p2> ^abstract true ^item-type object)
    (<p2> ^<a8> <a9> ^<a10> <a11>)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t793935-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category officer1 ^name co1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle say1 ^item-type task-operator ^name op_say1 ^arg2 <a1>
           ^arg1 <a2> ^subtask-handle subtask55)
    (<a1> ^2 <o2> ^handle to1 ^arg-type partial-predicate)
    (<a2> ^id <i1> ^arg-type object)
    (<i1> ^predicates <p3> ^abstract true)
    (<p3> ^sentence |there is a fire.| ^category message)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t793915-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle raise1goal56)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle raise1goal56)
    (<i1> ^subtask-handle subtask55 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t793877-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle raise1)
    (<o1> ^next-goal-handle raise1goal56 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> raise1goal56 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^default <d1>)
    (<d1> ^name co1 ^category officer1)
    (<i2> ^default <d2>)
    (<d2> ^sentence |there is a fire.| ^category message)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t793866-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle raise1goal50)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle raise1goal56
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t744696-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^affordance1 activatable1 ^is-activated1 not-activated1
          ^is-confirmed1 confirmed1 ^category alarm1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle turn-on1 ^item-type task-operator ^name op_turn-on1
           ^arg1 <a2> ^subtask-handle subtask49)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t744683-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle raise1goal50)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle raise1goal50)
    (<i1> ^subtask-handle subtask49 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t744654-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle raise1)
    (<o1> ^next-goal-handle raise1goal50 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> raise1goal50 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category alarm1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t744643-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle raise1goal47)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle raise1goal50
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t699408-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c1>)
    (<o1> ^object { <o2> <> <c1> })
    (<o2> ^predicates <p2>)
    (<p2> ^cardinal-direction1 east1 ^is-confirmed1 confirmed1 ^category hall1
          ^category location)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle go-to-location1 ^item-type task-operator
           ^name op_go-to-location1 ^arg2 <a1> ^subtask-handle subtask46)
    (<a1> ^2 <o2> ^handle to1 ^arg-type partial-predicate)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t699393-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle raise1goal47)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle raise1goal47)
    (<i1> ^subtask-handle subtask46 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t699364-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle raise1)
    (<o1> ^next-goal-handle raise1goal47 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> raise1goal47 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category hall1 ^cardinal-direction1 east1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t699353-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle raise1goal43)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle raise1goal47
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t699070-1
    :chunk
    (state <s1> ^current-task-segment <c1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^world <w1>)
    (<c1> -^performed-subtask subtask42)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 emergency1 ^is-confirmed1 not-confirmed1
          ^category location)
    (<o3> ^predicates <p3>)
    (<p3> ^modifier1 current1 ^category location)
    -->
    (<s1> ^operator <o4> +)
    (<o4> ^task-handle remember1 ^item-type task-operator ^name op_remember1
           ^modifiers <m1> ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask42)
    (<m1> ^handle once1 ^arg-type modifiers)
    (<a1> ^id <o2> ^arg-type object)
    (<a2> ^id <o3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t699051-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle raise1goal43)
    (<t1> ^task-handle raise1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle raise1goal43)
    (<i1> ^subtask-handle subtask42 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t699013-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle raise1)
    (<o1> ^next-goal-handle raise1goal43 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> raise1goal43 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 emergency1 ^category location)
    (<i2> ^default <d2>)
    (<d2> ^modifier1 current1 ^category location)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t699002-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle raise1start39)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle raise1goal43
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t698695-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle raise1start39)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle raise1start39 ^item-type start-goal)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t698460-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type partial-predicate ^2 <o4> ^handle <h2>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t698460-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4> ^object <o5> ^object <o6>)
    (<a2> ^arg-type partial-predicate ^2 <o4> ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    (<a9> ^arg-type partial-predicate ^2 <o6> ^handle <h4>)
    (<a11> ^arg-type object ^id <o5>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t698460-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4> ^object <o5> ^object <o6>)
    (<a2> ^arg-type partial-predicate ^2 <o4> ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    (<a9> ^arg-type partial-predicate ^2 <o6> ^handle <h4>)
    (<a11> ^arg-type object ^id <o5>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t698460-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type partial-predicate ^2 <o4> ^handle <h2>)
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t698460-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type partial-predicate ^2 <o4> ^handle <h2>)
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*Tie*t698456-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a3> ^<a4> <a12>)
    (<t2> ^task-handle <t1> ^<a1> <a2> ^{ <a4> < <a1> } <a5>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<a3> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
   -{ (<c2> ^{ <a6> <> <a1> <> <a4> } <a7>)
      (<a7> ^arg-type <a8>)}
   -{ (<t2> ^{ <a9> <> <a1> <> <a4> } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a5> ^arg-type object ^id <i2>)
    (<a12> ^arg-type object ^id <i2>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t698444-9
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t698444-8
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type concept ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    (<a9> ^arg-type concept ^handle <h4>)
    (<a11> ^arg-type object ^id <o4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t698444-7
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n2> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n3> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4> ^<a8> <a9> ^{ <a10> < <a8> } <a11>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type concept ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    (<a9> ^arg-type concept ^handle <h4>)
    (<a11> ^arg-type object ^id <o4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t698444-6
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t698444-5
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n2>)
    (<o2> ^object <o3>)
    (<a2> ^arg-type concept ^handle <h2>)
   -{ (<s5> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o3>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*execution-type*internal*apply*task-operator*mark*performed-subtask*OpNoChange*t698444-4
    :chunk
    (state <s1> ^operator <o1> ^problem-space <p1> ^current-task-segment <c1>)
    (<o1> ^item-type task-operator ^subtask-handle <s2> ^task-handle <t1>)
    (<p1> ^execution-type internal ^name action)
    -->
    (<c1> ^performed-subtask <s2>)
}

sp {chunk*execution-type*internal*apply*task-operator*increment*plan-length*OpNoChange*t698444-3
    :chunk
    (state <s1> ^problem-space <p1> ^plan-length <p2> ^operator <o1>)
    (<p1> ^execution-type internal ^name action)
    (<o1> ^task-handle <t1>)
    -->
    (<s1> ^plan-length <p2> - ^plan-length (+ <p2> 1))
}

sp {chunk*execution-type*internal*apply*task-operator*update*current-evaluation-depth*OpNoChange*t698444-2
    :chunk
    (state <s1> ^problem-space <p1> ^current-evaluation-depth <c1>
          ^operator <o1>)
    (<p1> ^execution-type internal ^name action)
    (<o1> ^task-handle <t1>)
    -->
    (<s1> ^current-evaluation-depth <c1> -
           ^current-evaluation-depth (- <c1> 1))
}

sp {chunk*execution-type*internal*apply*task-operator*mark*tried-tied-operator*OpNoChange*t698444-1
    :chunk
    (state <s1> ^untried-tied-operator <u1> ^operator <u1> ^problem-space <p1>)
    (<p1> ^execution-type internal ^name action)
    (<u1> ^task-handle <t1>)
    -->
    (<s1> ^untried-tied-operator <u1> - ^tried-tied-operator <u1>)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t698429-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type concept ^handle <h1>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a8> ^<a3> <a9>)
    (<a8> ^handle <h1> ^arg-type concept)
    (<a9> ^id <i2> ^arg-type object)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t698403-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1term36)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1term36 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t698392-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1term36 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t698383-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1int34)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1term36
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t698206-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int34)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int34 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t698195-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int34 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t697745-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int30)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int30 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t697734-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int30 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t697725-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal29)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int30
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t697696-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type concept ^handle <h1>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a8> ^<a3> <a9>)
    (<a8> ^handle <h1> ^arg-type concept)
    (<a9> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t697689-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category sentry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle ensure1 ^item-type task-operator ^name op_ensure115
           ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask28)
    (<a1> ^handle confirmed1 ^arg-type concept)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t697664-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal29)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal29)
    (<i1> ^subtask-handle subtask28 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t697637-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal29 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> inspect1goal29 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category sentry1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t697626-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle inspect1int20)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c4>)
    (<c4> ^predicates <p2>)
    (<p2> ^category post1)
    (<o1> ^object <c4>)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle inspect1goal29
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t697148-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int20)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int20 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t697137-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int20 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t697128-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal21)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int20
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t697099-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> })
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a2> ^arg1 <a3>
          ^subtask-handle <s2> ^{ <a5> > arg2 } <a6>)
    (<a2> ^arg-type object ^id <i3>)
    (<a3> ^arg-type object ^id <i4>)
    (<p2> ^name action ^learning <l1> ^name <n2>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<o1> ^{ <a7> <> <a5> <> arg2 <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> ^handle { <h3> > <h2> }
          -^handle { <h4> <> <h3> <> <h2> })
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t697099-2
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a14> <a15>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a21> <a22>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> }
          ^category { <c2> << object person >> })
    (<i3> ^predicates <p1> ^root-category { <r2> <> drink1 })
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a3> ^arg2 <a4>
          ^arg1 <a5> ^arg1 <a6> ^subtask-handle <s2> ^subtask-handle <s4>
          ^{ <a9> > arg2 } <a10> ^{ <a19> > arg2 } <a20>)
    (<a3> ^arg-type object ^id <i5>)
    (<a4> ^arg-type object ^id <i6>)
    (<a5> ^arg-type object ^id <i7>)
    (<a6> ^arg-type object ^id <i8>)
    (<p2> ^name action ^learning <l1> ^name <n3> ^name <n4>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r3> ^robot <r4> ^robot <r5> ^robot <r6>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i5> ^object <i3> ^object <i6> ^object <i7>
          ^object <i8> ^object <o3> ^object <o4>)
    (<r3> ^current-location <i7>)
    (<r4> ^current-location <i8>)
    (<r5> ^arm <a7>)
    (<a7> ^holding-object false)
    (<r6> ^arm <a8>)
    (<a8> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<o1> ^{ <a11> <> <a9> <> arg2 <> arg1 } <a12>)
      (<a12> ^arg-type <a13>)}
    (<a10> ^arg-type modifiers ^handle <h3> ^handle { <h4> > <h3> }
          -^handle { <h5> <> <h4> <> <h3> })
   -{ (<t1> ^{ <a16> <> <a14> <> arg1 } <a17>)
      (<a17> ^arg-type <a18>)}
    (<a15> ^arg-type partial-predicate ^2 <o3> ^handle <h6>)
    (<a20> ^arg-type modifiers ^handle <h7> ^handle { <h8> > <h7> })
    (<a22> ^arg-type partial-predicate ^2 <o4> ^handle <h9>)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t697099-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a14> <a15>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a21> <a22>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> }
          ^category { <c2> << object person >> })
    (<i3> ^predicates <p1> ^root-category { <r2> <> drink1 })
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a3> ^arg2 <a4>
          ^arg1 <a5> ^arg1 <a6> ^subtask-handle <s2> ^subtask-handle <s4>
          ^{ <a9> > arg2 } <a10> ^{ <a19> > arg2 } <a20>)
    (<a3> ^arg-type object ^id <i5>)
    (<a4> ^arg-type object ^id <i6>)
    (<a5> ^arg-type object ^id <i7>)
    (<a6> ^arg-type object ^id <i8>)
    (<p2> ^name action ^learning <l1> ^name <n3> ^name <n4>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r3> ^robot <r4> ^robot <r5> ^robot <r6>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i5> ^object <i3> ^object <i6> ^object <i7>
          ^object <i8> ^object <o3> ^object <o4>)
    (<r3> ^current-location <i7>)
    (<r4> ^current-location <i8>)
    (<r5> ^arm <a7>)
    (<a7> ^holding-object false)
    (<r6> ^arm <a8>)
    (<a8> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<o1> ^{ <a11> <> <a9> <> arg2 <> arg1 } <a12>)
      (<a12> ^arg-type <a13>)}
    (<a10> ^arg-type modifiers ^handle <h3> ^handle { <h4> > <h3> }
          -^handle { <h5> <> <h4> <> <h3> })
   -{ (<t1> ^{ <a16> <> <a14> <> arg1 } <a17>)
      (<a17> ^arg-type <a18>)}
    (<a15> ^arg-type partial-predicate ^2 <o3> ^handle <h6>)
    (<a20> ^arg-type modifiers ^handle <h7> ^handle { <h8> > <h7> })
    (<a22> ^arg-type partial-predicate ^2 <o4> ^handle <h9>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t697088-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a7> <a8>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
   -{ (<o1> ^{ <a2> <> arg1 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_find1 ^arg1 <a5> ^subtask-handle <s2> ^task-handle <t2>)
    (<a5> ^arg-type object ^id <i2>)
    (<p2> ^name action ^learning <l1> ^name <n2>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t697088-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_find1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^learning <l1> ^name <n3> ^name <n4>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^robot <r3> ^robot <r4>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <o3>
          ^object <o4>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<r3> ^arm <a8>)
    (<a8> ^holding-object false)
    (<r4> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    (<a16> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t697088-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a15> <a16>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_find1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^learning <l1> ^name <n3> ^name <n4>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^robot <r3> ^robot <r4>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <o3>
          ^object <o4>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<r3> ^arm <a8>)
    (<a8> ^holding-object false)
    (<r4> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    (<a16> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t697088-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_find1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle fetch1 ^arg1 <a5> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t697088-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_find1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle fetch1 ^arg1 <a5> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t697069-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a6> <a7>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a2> <> arg1 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_pick-up1 ^arg1 <a5> ^subtask-handle <s2> ^task-handle <t2>)
    (<a5> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy is-confirmed1 -^dont-copy modifier1
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t697069-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a13> <a14>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_pick-up1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <c1>
          ^object <c2>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy is-confirmed1 -^dont-copy modifier1
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<i6> ^predicates <p3>)
    (<r1> ^current-location <c1>)
    (<r2> ^current-location <c2>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
   -{ (<t1> ^{ <a10> <> <a8> <> arg1 } <a11>)
      (<a11> ^arg-type <a12>)}
    (<a9> ^arg-type partial-predicate ^2 <c1> ^handle <h3>)
    (<a14> ^arg-type partial-predicate ^2 <c2> ^handle <h4>)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t697069-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a13> <a14>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_pick-up1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <c1>
          ^object <c2>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy is-confirmed1 -^dont-copy modifier1
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<i6> ^predicates <p3>)
    (<r1> ^current-location <c1>)
    (<r2> ^current-location <c2>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
   -{ (<t1> ^{ <a10> <> <a8> <> arg1 } <a11>)
      (<a11> ^arg-type <a12>)}
    (<a9> ^arg-type partial-predicate ^2 <c1> ^handle <h3>)
    (<a14> ^arg-type partial-predicate ^2 <c2> ^handle <h4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t697069-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle fetch1 ^arg1 <a5> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy is-confirmed1 -^dont-copy modifier1
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t697069-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle fetch1 ^arg1 <a5> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy category -^dont-copy is-confirmed1 -^dont-copy modifier1
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t697053-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a6> <a7>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
   -{ (<o1> ^{ <a2> <> arg2 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a5> ^subtask-handle <s2>
          ^task-handle <t2>)
    (<a5> ^arg-type partial-predicate ^2 <i3> ^handle <h2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t697053-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h3>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a13> <a14>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg2 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a6> ^arg2 <a7> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a7> ^arg-type partial-predicate ^2 <i6> ^handle <h4>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i5> ^object <i3> ^object <i6> ^object <o3>
          ^object <o4>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a10> <> <a8> <> arg1 } <a11>)
      (<a11> ^arg-type <a12>)}
    (<a9> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    (<a14> ^arg-type partial-predicate ^2 <o4> ^handle <h6>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t697053-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h3>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^subtask-handle <s3> ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> ^task-handle fetch1 ^arg1 <a2> ^name { <n2> <> evaluate-operator }
          ^subtask-handle <s5> ^<a13> <a14>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg2 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a6> ^arg2 <a7> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type partial-predicate ^2 <i5> ^handle <h2>)
    (<a7> ^arg-type partial-predicate ^2 <i6> ^handle <h4>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i5> ^object <i3> ^object <i6> ^object <o3>
          ^object <o4>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a10> <> <a8> <> arg1 } <a11>)
      (<a11> ^arg-type <a12>)}
    (<a9> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    (<a14> ^arg-type partial-predicate ^2 <o4> ^handle <h6>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t697053-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_go-to-location1 ^arg2 <a4> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle fetch1 ^arg1 <a5> ^subtask-handle <s6>
          ^name { <n1> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s8> ^name <n1>)
    (<s4> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t697053-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_go-to-location1 ^arg2 <a4> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle fetch1 ^arg1 <a5> ^subtask-handle <s6>
          ^name { <n1> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s8> ^name <n1>)
    (<s4> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t534012-5
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 not-visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_view1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t534012-4
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a5>
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 not-visible1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t534012-3
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a5>
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 not-visible1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t534012-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a8>
          ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t534012-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a8>
          ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t518216-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^is-visible1 not-visible1
          ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle view1 ^item-type task-operator ^name op_view1
           ^arg1 <a2> ^subtask-handle subtask25)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t518177-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a8>
          ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t518177-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-grabbed1
          -^dont-copy is-reachable1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle pick-up1 ^name op_pick-up1 ^arg1 <a8>
          ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t343037-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
    (<s2> ^task-handle remember1 ^name op_remember1 ^arg2 <a1> ^arg1 <a2>
          ^subtask-handle <s3> ^{ <a5> > arg2 } <a6>)
    (<a1> ^arg-type object ^id <i2>)
    (<a2> ^arg-type object ^id <i4>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle fetch1 ^arg1 <a3> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator } ^<a10> <a11>)
    (<a3> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> })
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<s2> ^{ <a7> <> <a5> <> arg2 <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> ^handle { <h3> > <h2> }
          -^handle { <h4> <> <h3> <> <h2> })
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t343037-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
    (<s2> ^task-handle remember1 ^name op_remember1 ^arg2 <a1> ^arg1 <a2>
          ^subtask-handle <s3> ^{ <a5> > arg2 } <a6>)
    (<a1> ^arg-type object ^id <i2>)
    (<a2> ^arg-type object ^id <i4>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> ^task-handle fetch1 ^arg1 <a3> ^subtask-handle <s6>
          ^name { <n2> <> evaluate-operator } ^<a10> <a11>)
    (<a3> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> -^dont-copy is-grabbed1 -^dont-copy is-confirmed1
          -^dont-copy category -^dont-copy affordance1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1
          ^category { <c1> << object person >> })
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<s2> ^{ <a7> <> <a5> <> arg2 <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> ^handle { <h3> > <h2> }
          -^handle { <h4> <> <h3> <> <h2> })
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t341663-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a8> ^<a3> <a9>)
    (<a8> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i4> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t341616-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^2 <i1> ^handle <h1>)
    (<i1> -^abstract true)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    (<i2> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a8> ^<a3> <a9>)
    (<a8> ^2 <i1> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t341608-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 supply1 ^category room1)
    (<o3> ^predicates <p3>)
    (<p3> ^category extinguisher1)
    -->
    (<s1> ^operator <o4> +)
    (<o4> ^task-handle fetch1 ^item-type task-operator ^name op_fetch12
           ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask19)
    (<a1> ^2 <o2> ^handle from1 ^arg-type partial-predicate)
    (<a2> ^id <o3> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t341588-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal21)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal21)
    (<i1> ^subtask-handle subtask19 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t341548-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal21 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> inspect1goal21 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 supply1 ^category room1)
    (<i2> ^default <d2>)
    (<d2> ^category extinguisher1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t341537-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle inspect1int7)
    (<w1> ^objects <o1> ^robot <r1>)
   -{ (<o1> ^object <o2>)
      (<o2> ^predicates <p2>)
      (<p2> ^is-confirmed1 confirmed1 ^category extinguisher1)}
    (<r1> ^current-location <c4>)
    (<o1> ^object <c4>)
    (<c4> ^predicates <p3>)
    (<p3> ^category post1)
    -->
    (<s1> ^operator <o3> + ^operator <o3> =)
    (<o3> ^name select-next-goal ^next-goal-handle inspect1goal21
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_I_GOAL_*task*elaborate*desired*intermediate-goal*OpNoChange*t340864-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1int7)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1int7 ^item-type intermediate-goal ^pred-count 0)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t340853-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1int7 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t340844-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1goal6)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1int7
           ^next-goal-type intermediate-goal ^has-conditions false)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t340815-5
    :chunk
    (state <s1> ^name op_turn-on1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle turn-on1 ^name op_turn-on1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 not-visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_view1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t340815-4
    :chunk
    (state <s1> ^name op_turn-on1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle turn-on1 ^name op_turn-on1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle turn-on1 ^name op_turn-on1 ^arg1 <a5>
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 not-visible1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t340815-3
    :chunk
    (state <s1> ^name op_turn-on1 ^desired <d1> ^task-operator <t1>
          ^task-operator <t2> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^task-handle turn-on1 ^name op_turn-on1 ^arg1 <a4>
          ^subtask-handle <s3>)
    (<a4> ^arg-type object ^id <i2>)
    (<t2> ^task-handle turn-on1 ^name op_turn-on1 ^arg1 <a5>
          ^subtask-handle <s5>)
    (<a5> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 not-visible1)
    (<i3> ^predicates <p1>)
    (<i4> ^1 <i3> ^type unary ^property-handle <p4> ^handle <h3>)
   -{ (<o1> ^{ <a6> <> arg1 } <a7>)
      (<a7> ^arg-type <a8>)}
    (<o1> ^name op_view1 ^arg1 <a9> ^arg1 <a10> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a9> ^arg-type object ^id <i2>)
    (<a10> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t340815-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_turn-on1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle turn-on1 ^name op_turn-on1 ^arg1 <a8>
          ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t340815-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_view1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_turn-on1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^task-handle turn-on1 ^name op_turn-on1 ^arg1 <a8>
          ^subtask-handle <s7>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t340800-5
    :chunk
    (state <s1> ^name op_turn-on1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t340800-4
    :chunk
    (state <s1> ^name op_turn-on1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h3>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t340800-3
    :chunk
    (state <s1> ^name op_turn-on1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i3> ^handle <h2>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 visible1)
    (<i3> ^type unary ^1 <i4> ^property-handle <p4> ^handle <h3>)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s4> ^task-handle <t2> ^task-handle <t4>)
    (<a8> ^arg-type object ^id <i2>)
    (<a9> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n1> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2> ^object <i4>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n4>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t340800-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_turn-on1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t340800-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_turn-on1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t340770-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle turn-on1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle turn-on1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t340760-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle turn-on1)
    (<o1> ^next-goal-handle turn-on1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t340751-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle turn-on1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle turn-on1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t326722-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i1> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t299848-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle turn-on1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask15)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t299809-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_turn-on1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t299809-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_turn-on1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t299787-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle view1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle view1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t299777-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle view1)
    (<o1> ^next-goal-handle view1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t299768-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle view1goal2)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle view1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t299751-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle face1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle face1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t299741-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle face1)
    (<o1> ^next-goal-handle face1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t299732-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle face1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle face1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t286339-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle face1goal1)
    (<t1> ^task-handle face1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle face1goal1)
    (<i1> ^command-name face-command ^type execute-command)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t286324-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle face1)
    (<o1> ^next-goal-handle face1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t286315-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle face1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle face1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t286300-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle face1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle face1start1 ^item-type start-goal)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t286276-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle view1goal2)
    (<t1> ^task-handle view1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle view1goal2)
    (<i2> ^1 <i1> ^property-handle is-visible1 ^handle visible1 ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t286259-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle view1)
    (<o1> ^next-goal-handle view1goal2 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t286250-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle view1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle view1goal2
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t286237-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle view1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle view1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t286213-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle turn-on1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^is-visible1 not-visible1
          ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle view1 ^item-type task-operator ^name op_view1
           ^arg1 <a2> ^subtask-handle subtask14)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t286174-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_turn-on1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t286174-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
    (<s2> -^subtask-handle <s3> ^name op_view1 ^arg1 <a4> ^task-handle <t2>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_turn-on1)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-visible1 -^dont-copy is-activated1
          -^dont-copy is-reachable1 -^dont-copy affordance1
          ^affordance1 activatable1 ^is-reachable1 not-reachable1
          ^is-activated1 not-activated1 ^is-visible1 not-visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t3> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t286152-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle turn-on1goal1)
    (<t1> ^task-handle turn-on1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle turn-on1goal1)
    (<i2> ^1 <i1> ^property-handle is-activated1 ^handle activated1
           ^type unary)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t286135-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle turn-on1)
    (<o1> ^next-goal-handle turn-on1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t286126-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle turn-on1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle turn-on1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t286120-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle turn-on1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle turn-on1start1 ^item-type start-goal)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t286096-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a1>)
    (<a1> ^holding-object false)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^affordance1 activatable1 ^is-activated1 not-activated1
          ^is-confirmed1 confirmed1 ^category lightswitch1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle turn-on1 ^item-type task-operator ^name op_turn-on1
           ^arg1 <a2> ^subtask-handle subtask5)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t286083-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal6)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal6)
    (<i1> ^subtask-handle subtask5 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t286056-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal6 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> inspect1goal6 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category lightswitch1)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t286045-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c2> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    (<c2> ^current-goal <c3>)
    (<c3> ^handle inspect1goal4)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^is-activated1 not-activated1 ^category lightswitch1)
    -->
    (<s1> ^operator <o3> + ^operator <o3> =)
    (<o3> ^name select-next-goal ^next-goal-handle inspect1goal6
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t285610-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle scan1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle scan1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t285600-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle scan1)
    (<o1> ^next-goal-handle scan1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t285591-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle scan1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle scan1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t250395-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> ^name copy-task-operator ^task-operator <t1> ^copy-name <c1>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1>)
   -{ (<t1> ^<a1> <a2>)
      (<a2> ^arg-type <a3>)}
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^task-handle <t2> ^item-type task-operator ^name <n1>)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t39421-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle goto-xy1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle goto-xy1term1 ^item-type terminal-goal)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t39411-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-xy1)
    (<o1> ^next-goal-handle goto-xy1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t39402-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle goto-xy1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle goto-xy1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t16138-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle goto-xy1goal1)
    (<t1> ^task-handle go-to-xy1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle goto-xy1goal1)
    (<i1> ^command-name go-to-command ^type execute-command)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t16123-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-xy1)
    (<o1> ^next-goal-handle goto-xy1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t16114-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle goto-xy1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle goto-xy1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t739-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle goto-xy1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle goto-xy1start1 ^item-type start-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t718-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type coordinate ^coord <c2>)
    (<c2> -^z <z1> ^y <y1> ^x <x1>)
    -->
    (<d1> ^<c1> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^coord <c4> ^arg-type coordinate)
    (<c4> ^y <y1> ^x <x1>)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t607-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle inspect1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id { <i1> <> <c1> })
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1 ^category location)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle go-to-location1 ^item-type task-operator
           ^name op_go-to-location1 ^arg2 <a2> ^subtask-handle subtask3)
    (<a2> ^2 <i1> ^handle to1 ^arg-type partial-predicate)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t592-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1goal4)
    (<t1> ^task-handle inspect1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle inspect1goal4)
    (<i1> ^subtask-handle subtask3 ^type subtask)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t576-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle inspect1)
    (<o1> ^next-goal-handle inspect1goal4 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t565-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle inspect1start2)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle inspect1goal4
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t330-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle inspect1start2)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle inspect1start2 ^item-type start-goal)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t478-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle fetch1start3)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle fetch1start3 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t895-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle fetch1start3)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle fetch1goal6
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t904-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle fetch1)
    (<o1> ^next-goal-handle fetch1goal6 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> fetch1goal6 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 starting1 ^category location)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t934-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle fetch1goal6)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 starting1 ^category location)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle fetch1goal6)
    (<i2> ^2 <o2> ^1 <i1> ^handle in1 ^type relation)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t947-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4>)
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a3> <> <a1> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a3> <a8>
           ^<a1> <a9>)
    (<a8> ^2 <i4> ^handle <h1> ^arg-type partial-predicate)
    (<a9> ^id <i2> ^arg-type object)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t953-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^2 <i2> ^1 <i3>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i2> <i4> ^<i3> <i5>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h2> ^1 <i6> ^pred-count 1)
    (<i6> ^2 <i4> ^1 <i5> ^handle <h1> ^type relation)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t962-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t970-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i2> ^arg-type object)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t3137-1
    :chunk
    (state <s1> ^current-task-segment <c1> ^task-operator <t1> ^name <n1>
          ^problem-space <p2> ^world <w1>)
    (<c1> -^performed-subtask <p1> -^performed-subtask subtask8)
    (<t1> ^task-handle fetch1 ^name <n1>)
    (<p2> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p3>)
    (<p3> ^modifier1 current1 ^category location)
    (<o3> ^predicates <p4>)
    (<p4> ^modifier1 starting1 ^is-confirmed1 not-confirmed1
          ^category location)
    -->
    (<s1> ^operator <o4> +)
    (<o4> ^task-handle remember1 ^item-type task-operator ^name op_remember1
           ^modifiers <m1> ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask8)
    (<m1> ^handle first1 ^handle once1 ^arg-type modifiers)
    (<a1> ^id <o3> ^arg-type object)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t3145-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6>)
    (<a2> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    (<a4> ^arg-type object ^id <i2>)
    (<i2> -^abstract true)
   -{ (<t1> ^{ <a7> <> <a5> <> <a3> <> <a1> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h1> ^handle { <h2> > <h1> }
          -^handle { <h3> <> <h2> <> <h1> })
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a5> <a10> ^<a3> <a11> ^<a1> <a12>)
    (<a10> ^handle <h2> ^handle <h1> ^arg-type modifiers)
    (<a11> ^id <i2> ^arg-type object)
    (<a12> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3166-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle remember1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle remember1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3172-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle remember1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle remember1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3181-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle remember1)
    (<o1> ^next-goal-handle remember1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t3196-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle remember1goal1)
    (<t1> ^task-handle remember1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle remember1goal1)
    (<i1> ^command-name remember-command ^type execute-command)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3210-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle remember1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle remember1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3219-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle remember1)
    (<o1> ^next-goal-handle remember1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t3229-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle remember1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle remember1term1 ^item-type terminal-goal)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t3368-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg1 <a4>
          ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t3368-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_put-down1 ^arg1 <a4>
          ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t3369-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t3369-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t3374-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_find1 ^arg1 <a4> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-grabbed1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t3374-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_find1 ^arg1 <a4> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-grabbed1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a5>)
    (<a5> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*OpNoChange*t3414-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a9>)
    (<t2> ^task-handle <t1> ^<a1> <a2>)
   -{ (<t2> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
   -{ (<c2> ^{ <a6> <> <a1> } <a7>)
      (<a7> ^arg-type <a8>)}
    (<a2> ^arg-type object ^id <i1>)
    (<a9> ^arg-type object ^id <i1>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t3415-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> ^is-confirmed1 not-confirmed1 ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle find1 ^item-type task-operator ^name op_find1
           ^arg1 <a2> ^subtask-handle subtask9)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t3421-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3442-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle find1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle find1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3455-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle find1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle find1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3464-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle find1)
    (<o1> ^next-goal-handle find1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t3481-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle find1goal1)
    (<t1> ^task-handle find1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle find1goal1)
    (<i2> ^1 <i1> ^property-handle is-confirmed1 ^handle confirmed1
           ^type unary)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t3488-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^2 <i1> ^handle <h1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^2 <i1> ^handle <h1> ^arg-type partial-predicate)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3511-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle gotoloc1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle gotoloc1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3524-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle gotoloc1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle gotoloc1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3533-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-location1)
    (<o1> ^next-goal-handle gotoloc1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t3549-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle gotoloc1goal1)
    (<t1> ^task-handle go-to-location1 ^arg2 <a1> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^2 <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle gotoloc1goal1)
    (<i2> ^1 <i1> ^name current-location ^type status)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t3555-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type waypoint ^id <i1>)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i1> ^arg-type waypoint)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3576-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-waypoint1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle go-to-waypoint1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3589-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle go-to-waypoint1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle go-to-waypoint1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3598-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-waypoint1)
    (<o1> ^next-goal-handle go-to-waypoint1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t3676-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-next-waypoint1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle go-to-next-waypoint1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3700-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle go-to-next-waypoint1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle go-to-next-waypoint1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3709-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-next-waypoint1)
    (<o1> ^next-goal-handle go-to-next-waypoint1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t3725-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-next-waypoint1goal1)
    (<t1> ^task-handle go-to-next-waypoint1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type waypoint ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle go-to-next-waypoint1goal1)
    (<i2> ^1 <i1> ^name current-waypoint ^type status)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t3731-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle go-to-next-waypoint1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle go-to-next-waypoint1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t3740-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-next-waypoint1)
    (<o1> ^next-goal-handle go-to-next-waypoint1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t3750-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-next-waypoint1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle go-to-next-waypoint1term1 ^item-type terminal-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4050-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle go-to-waypoint1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle go-to-waypoint1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4059-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-waypoint1)
    (<o1> ^next-goal-handle go-to-waypoint1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4069-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle go-to-waypoint1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle go-to-waypoint1term1 ^item-type terminal-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4086-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle gotoloc1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle gotoloc1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4095-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle go-to-location1)
    (<o1> ^next-goal-handle gotoloc1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4105-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle gotoloc1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle gotoloc1term1 ^item-type terminal-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4122-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle find1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle find1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4131-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle find1)
    (<o1> ^next-goal-handle find1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4141-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle find1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle find1term1 ^item-type terminal-goal)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t4194-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^id <i2> ^arg-type object)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t4300-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_go-to-location1 ^arg2 <a4>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t4300-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_go-to-location1 ^arg2 <a4>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t4305-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy category
          ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t4305-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_pick-up1 ^arg1 <a4> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy is-confirmed1 -^dont-copy category
          ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t4344-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^arm <a2>)
    (<a2> ^holding-object false)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 confirmed1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle pick-up1 ^item-type task-operator ^name op_pick-up1
           ^arg1 <a3> ^subtask-handle subtask10)
    (<a3> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t4368-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle pick-up1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4374-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle pick-up1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle pick-up1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4383-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle pick-up1)
    (<o1> ^next-goal-handle pick-up1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t4400-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1goal1)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle pick-up1goal1)
    (<i2> ^1 <i1> ^property-handle is-grabbed1 ^handle grabbed1 ^type unary)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t4409-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^property-handle <p1> ^handle <h1> ^1 <i2>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i2> <i3>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h2> ^1 <i4> ^pred-count 1)
    (<i4> ^1 <i3> ^property-handle <p1> ^handle <h1> ^type unary)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t4416-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t3>)
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-reachable1 -^dont-copy is-grabbed1
          -^dont-copy is-visible1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t2> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t4416-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s4> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> -^subtask-handle <s3> ^name op_approach1 ^arg1 <a4>
          ^task-handle <t3>)
    (<a4> ^arg-type object ^id <i2>)
    (<s4> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-reachable1 -^dont-copy is-grabbed1
          -^dont-copy is-visible1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t2> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t4455-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle pick-up1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-reachable1 not-reachable1 ^is-visible1 visible1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle approach1 ^item-type task-operator ^name op_approach1
           ^arg1 <a2> ^subtask-handle subtask11)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t4479-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle approach1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4492-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle approach1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle approach1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4501-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle approach1)
    (<o1> ^next-goal-handle approach1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t4518-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1goal1)
    (<t1> ^task-handle approach1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle approach1goal1)
    (<i2> ^1 <i1> ^property-handle is-reachable1 ^handle reachable1
           ^type unary)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4534-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle approach1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle approach1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4543-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle approach1)
    (<o1> ^next-goal-handle approach1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4553-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle approach1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle approach1term1 ^item-type terminal-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t4573-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle pick-up1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle pick-up1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t4582-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle pick-up1)
    (<o1> ^next-goal-handle pick-up1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t4592-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle pick-up1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle pick-up1term1 ^item-type terminal-goal)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t4622-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t3>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-reachable1 -^dont-copy is-grabbed1
          -^dont-copy is-visible1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t2> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t4622-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s6> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superstate <s3> ^superproblem-space <s5> ^evaluation <e2>
          ^superoperator <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_approach1 ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t3>)
    (<a4> ^arg-type object ^id <i2>)
    (<s3> ^name op_pick-up1)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-reachable1 -^dont-copy is-grabbed1
          -^dont-copy is-visible1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<s6> ^desired <d1> ^task-operator <t1>)
   -{ (<t1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<t1> ^arg1 <a8> ^subtask-handle <s7> ^task-handle <t2> ^name <n2>)
    (<a8> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    (<s5> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t4622-3
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h3>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t4> ^name <n4>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i4> ^property-handle <p3> ^handle <h1>)
    (<i2> ^type unary ^1 <i3> ^property-handle <p4> ^handle <h2>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-reachable1 -^dont-copy is-grabbed1
          -^dont-copy is-visible1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t2> ^task-handle <t3>)
    (<a8> ^arg-type object ^id <i4>)
    (<a9> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n2> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i4> ^object <i3>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n1>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t4622-4
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1> ^task-operator <t5>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h3>
          ^handle <h4>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s4> ^task-handle <t4> ^name <n4>)
    (<a4> ^arg-type object ^id <i3>)
    (<i1> ^type unary ^1 <i4> ^property-handle <p3> ^handle <h1>)
    (<i2> ^type unary ^1 <i3> ^property-handle <p4> ^handle <h2>)
    (<i3> ^predicates <p1>)
    (<p1> -^dont-copy is-reachable1 -^dont-copy is-grabbed1
          -^dont-copy is-visible1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
    (<i4> ^predicates <p1>)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^arg1 <a9> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t2> ^task-handle <t3>)
    (<a8> ^arg-type object ^id <i4>)
    (<a9> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n2> ^name <n3>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i4> ^object <i3>)
    (<t5> ^arg1 <a10> ^subtask-handle <s5> ^task-handle <t6> ^name <n1>)
    (<a10> ^arg-type object ^id <i4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t4622-5
    :chunk
    (state <s1> ^name op_pick-up1 ^desired <d1> ^task-operator <t1>
          ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
   -{ (<t1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<t1> ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t3> ^name <n2>)
    (<a4> ^arg-type object ^id <i2>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p3> ^handle <h1>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-reachable1 -^dont-copy is-grabbed1
          -^dont-copy is-visible1 ^is-reachable1 not-reachable1
          ^is-grabbed1 not-grabbed1 ^is-visible1 visible1)
   -{ (<o1> ^{ <a5> <> arg1 } <a6>)
      (<a6> ^arg-type <a7>)}
    (<o1> ^name op_approach1 ^arg1 <a8> ^subtask-handle <s2> ^task-handle <t2>)
    (<a8> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n1>)
    (<w1> ^objects <o2>)
    (<o2> ^object <i2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*OpNoChange*t4702-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a9>)
    (<t2> ^task-handle <t1> ^<a1> <a2>)
   -{ (<t2> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
   -{ (<c2> ^{ <a6> <> <a1> } <a7>)
      (<a7> ^arg-type <a8>)}
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<a9> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t4703-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle fetch1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c1>)
    (<o1> ^object { <o2> <> <c1> })
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle go-to-location1 ^item-type task-operator
           ^name op_go-to-location1 ^arg2 <a1> ^subtask-handle subtask12)
    (<a1> ^2 <o2> ^handle to1 ^arg-type partial-predicate)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t4710-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^2 <i1> ^handle <h1>)
    (<i1> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^2 <i1> ^handle <h1> ^arg-type partial-predicate)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t5227-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-grabbed1 grabbed1)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
           ^arg1 <a2> ^subtask-handle subtask13)
    (<a2> ^id <i1> ^arg-type object)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t5251-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle put-down1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t5277-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c3> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> -^arg2 <a1> ^task-handle put-down1 ^name <n1>)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle put-down1start1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1goal1
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t5286-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t5303-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1goal1)
    (<t1> ^task-handle put-down1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i2> ^pred-count 1 ^handle put-down1goal1)
    (<i2> ^1 <i1> ^property-handle is-grabbed1 ^handle not-grabbed1
           ^type unary)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t5319-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle put-down1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle put-down1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t5328-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle put-down1)
    (<o1> ^next-goal-handle put-down1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t5338-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle put-down1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle put-down1term1 ^item-type terminal-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t5355-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle fetch1goal6)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle fetch1term5
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t5364-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle fetch1)
    (<o1> ^next-goal-handle fetch1term5 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t5375-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle fetch1term5)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle fetch1term5 ^item-type terminal-goal)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5410-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5410-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s6>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_put-down1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<s5> ^desired <d1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    (<s4> ^name <n1>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5410-3
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^handle in1 ^type relation ^1 <i3> ^2 <i5>)
    (<i2> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i4> ^object <i5> ^object <i6>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle in1)
    (<p4> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5410-4
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^handle in1 ^type relation ^1 <i3> ^2 <i5>)
    (<i2> ^handle in1 ^type relation ^1 <i4> ^2 <i6>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg1 <a4> ^arg1 <a5> ^subtask-handle <s2>
          ^subtask-handle <s3> ^task-handle <t1> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i3>)
    (<a5> ^arg-type object ^id <i4>)
    (<p1> ^name action ^name <n1> ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p2>)
    (<o2> ^object <i3> ^object <i4> ^object <i5> ^object <i6>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<p2> ^predicate <p3> ^predicate <p4>)
    (<p3> ^handle in1)
    (<p4> ^handle in1)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5410-5
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p1> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg1 <a4> ^subtask-handle <s2> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^name <n1>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p2>)
    (<o2> ^object <i2> ^object <i3>)
    (<r1> ^current-location <i3>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle in1)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t5421-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a6>)
    (<a6> ^2 <i2> ^handle <h1> ^arg-type partial-predicate)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5429-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_go-to-location1 ^arg2 <a4> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5429-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg2 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_go-to-location1 ^arg2 <a4> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a4> ^arg-type partial-predicate ^2 <i2> ^handle <h2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5429-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h3>
          ^handle <h4>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a2>
          ^name { <n2> <> evaluate-operator } ^<a10> <a11>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg2 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a6> ^arg2 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type partial-predicate ^2 <i5> ^handle <h1>)
    (<a7> ^arg-type partial-predicate ^2 <i6> ^handle <h2>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i5> ^object <i3> ^object <i6> ^object <o3>
          ^object <o4>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
    (<a9> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
   -{ (<t2> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o4> ^handle <h6>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 2)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5429-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h3>
          ^handle <h4>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a2>
          ^name { <n2> <> evaluate-operator } ^<a10> <a11>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg2 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a6> ^arg2 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type partial-predicate ^2 <i5> ^handle <h1>)
    (<a7> ^arg-type partial-predicate ^2 <i6> ^handle <h2>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i5> ^object <i3> ^object <i6> ^object <o3>
          ^object <o4>)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
    (<a9> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
   -{ (<t2> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o4> ^handle <h6>)
    -->
    (<o1> ^plan-length 2)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5429-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a6> <a7>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 grabbed1)
   -{ (<o1> ^{ <a2> <> arg2 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_go-to-location1 ^arg2 <a5> ^subtask-handle <s3>
          ^task-handle <t2>)
    (<a5> ^arg-type partial-predicate ^2 <i3> ^handle <h1>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5445-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy modifier1 -^dont-copy is-confirmed1 -^dont-copy category
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5445-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy modifier1 -^dont-copy is-confirmed1 -^dont-copy category
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5445-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a2>
          ^name { <n2> <> evaluate-operator } ^<a10> <a11>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_pick-up1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <c1>
          ^object <c2>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy modifier1 -^dont-copy is-confirmed1 -^dont-copy category
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<i6> ^predicates <p3>)
    (<r1> ^current-location <c1>)
    (<r2> ^current-location <c2>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    (<a9> ^arg-type partial-predicate ^2 <c1> ^handle <h3>)
   -{ (<t2> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <c2> ^handle <h4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5445-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^<a8> <a9>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a2>
          ^name { <n2> <> evaluate-operator } ^<a10> <a11>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_pick-up1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <c1>
          ^object <c2>)
    (<i5> ^predicates <p3>)
    (<p3> -^dont-copy modifier1 -^dont-copy is-confirmed1 -^dont-copy category
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<i6> ^predicates <p3>)
    (<r1> ^current-location <c1>)
    (<r2> ^current-location <c2>)
    (<p4> ^predicate <p5> ^predicate <p6>)
    (<p5> ^handle in1)
    (<p6> ^handle in1)
    (<a9> ^arg-type partial-predicate ^2 <c1> ^handle <h3>)
   -{ (<t2> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <c2> ^handle <h4>)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5445-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a6> <a7>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
   -{ (<o1> ^{ <a2> <> arg1 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_pick-up1 ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t2>)
    (<a5> ^arg-type object ^id <i2>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3> ^object <c1>)
    (<i3> ^predicates <p3>)
    (<p3> -^dont-copy modifier1 -^dont-copy is-confirmed1 -^dont-copy category
          ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    (<r1> ^current-location <c1>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle in1)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <c1> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5519-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_find1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-grabbed1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^plan-length 3)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5519-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_find1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-grabbed1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a7> <a8>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5519-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a2>
          ^name { <n2> <> evaluate-operator } ^<a12> <a13>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-grabbed1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_find1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^learning <l1> ^name <n3> ^name <n4>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^robot <r3> ^robot <r4>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <o3>
          ^object <o4>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<r3> ^arm <a8>)
    (<a8> ^holding-object false)
    (<r4> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
   -{ (<t2> ^{ <a14> <> <a12> <> arg1 } <a15>)
      (<a15> ^arg-type <a16>)}
    (<a13> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 3)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5519-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a2>
          ^name { <n2> <> evaluate-operator } ^<a12> <a13>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-grabbed1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
    (<i3> ^predicates <p1>)
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
   -{ (<o1> ^{ <a3> <> arg1 } <a4>)
      (<a4> ^arg-type <a5>)}
    (<o1> ^name op_find1 ^arg1 <a6> ^arg1 <a7> ^subtask-handle <s3>
          ^subtask-handle <s4> ^task-handle <t3> ^task-handle <t4>)
    (<a6> ^arg-type object ^id <i2>)
    (<a7> ^arg-type object ^id <i3>)
    (<p2> ^name action ^learning <l1> ^name <n3> ^name <n4>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^robot <r3> ^robot <r4>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i5> ^object <i6> ^object <o3>
          ^object <o4>)
    (<r1> ^current-location <i5>)
    (<r2> ^current-location <i6>)
    (<r3> ^arm <a8>)
    (<a8> ^holding-object false)
    (<r4> ^arm <a9>)
    (<a9> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
   -{ (<t2> ^{ <a14> <> <a12> <> arg1 } <a15>)
      (<a15> ^arg-type <a16>)}
    (<a13> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    -->
    (<o1> ^plan-length 3)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5519-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a7> <a8>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1>)
    (<p1> -^dont-copy affordance1 -^dont-copy is-confirmed1
          -^dont-copy is-grabbed1 ^affordance1 grabbable1
          ^is-grabbed1 not-grabbed1 ^is-confirmed1 not-confirmed1)
   -{ (<o1> ^{ <a2> <> arg1 } <a3>)
      (<a3> ^arg-type <a4>)}
    (<o1> ^name op_find1 ^arg1 <a5> ^subtask-handle <s3> ^task-handle <t2>)
    (<a5> ^arg-type object ^id <i2>)
    (<p2> ^name action ^learning <l1> ^name <n2>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^robot <r1> ^robot <r2> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<r2> ^arm <a6>)
    (<a6> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<t1> ^{ <a9> <> <a7> <> arg1 } <a10>)
      (<a10> ^arg-type <a11>)}
    (<a8> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t5531-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6>)
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
    (<a4> ^arg-type object ^id <i3>)
   -{ (<t1> ^{ <a7> <> <a5> <> <a3> <> <a1> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h1> ^handle { <h2> > <h1> }
          -^handle { <h3> <> <h2> <> <h1> })
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a5> <a10> ^<a3> <a11> ^<a1> <a12>)
    (<a10> ^handle <h2> ^handle <h1> ^arg-type modifiers)
    (<a11> ^id <i4> ^arg-type object)
    (<a12> ^id <i2> ^arg-type object)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*Tie*t5536-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a3> ^<a4> <a6> ^<a7> <a15>)
    (<t2> ^task-handle <t1> ^<a1> <a2> ^{ <a4> > <a1> } <a5>
          ^{ <a7> > <a4> } <a8>)
    (<a2> ^arg-type object ^id <i1>)
    (<a3> ^arg-type object ^id <i1>)
    (<a5> ^arg-type object ^id <i2>)
    (<a6> ^arg-type object ^id <i2>)
   -{ (<t2> ^{ <a9> <> <a7> <> <a4> <> <a1> } <a10>)
      (<a10> ^arg-type <a11>)}
   -{ (<c2> ^{ <a12> <> <a7> <> <a4> <> <a1> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a8> ^arg-type modifiers ^handle <h1> -^handle { <h4> <> <h2> <> <h1> }
          ^handle <h2>)
    (<a15> ^arg-type modifiers ^handle <h1> ^handle { <h2> > <h1> }
          -^handle { <h3> <> <h2> <> <h1> })
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5568-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^plan-length 2)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5568-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
   -{ (<s2> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<s2> ^name op_pick-up1 ^arg1 <a4> ^subtask-handle <s3> ^task-handle <t2>)
    (<a4> ^arg-type object ^id <i2>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p2>)
    (<p2> -^dont-copy is-grabbed1 ^is-grabbed1 not-grabbed1)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a5>
          ^name { <n2> <> evaluate-operator } ^<a6> <a7>)
    (<a5> ^arg-type object ^id <i2>)
    (<w1> ^objects <o2> ^robot <r1> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <o3>)
    (<r1> ^current-location <i3>)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a8> <> <a6> <> arg1 } <a9>)
      (<a9> ^arg-type <a10>)}
    (<a7> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t5570-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
    (<s2> ^task-handle remember1 ^name op_remember1 ^arg2 <a1> ^arg1 <a2>
          ^subtask-handle <s3> ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<a2> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a3>
          ^name { <n2> <> evaluate-operator } ^<a5> <a6>)
    (<a3> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> -^dont-copy affordance1 -^dont-copy category
          -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 not-confirmed1 ^category { <c1> << object person >> })
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a7> <> <a5> <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
   -{ (<s2> ^{ <a12> <> <a10> <> arg2 <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type modifiers ^handle <h3> ^handle { <h4> > <h3> }
          -^handle { <h5> <> <h4> <> <h3> })
    -->
    (<e1> ^plan-length 4)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t5570-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s5> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superoperator <s2>
          ^superproblem-space <s4> ^evaluation <e2> ^superoperator <s7>
          ^superstate <s8>)
    (<s2> ^task-handle remember1 ^name op_remember1 ^arg2 <a1> ^arg1 <a2>
          ^subtask-handle <s3> ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<a2> ^arg-type object ^id <i4>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^handle in1 ^type relation ^2 <i2> ^1 <i3>)
    (<s5> ^desired <d1> ^task-operator <t1>)
    (<t1> -^subtask-handle <s6> ^task-handle fetch1 ^arg1 <a3>
          ^name { <n2> <> evaluate-operator } ^<a5> <a6>)
    (<a3> ^arg-type object ^id <i3>)
    (<i3> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> -^dont-copy affordance1 -^dont-copy category
          -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 not-confirmed1 ^category { <c1> << object person >> })
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i3> ^object <i2> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
    (<s4> ^name <n1>)
    (<s8> ^name <n2>)
   -{ (<t1> ^{ <a7> <> <a5> <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
   -{ (<s2> ^{ <a12> <> <a10> <> arg2 <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type modifiers ^handle <h3> ^handle { <h4> > <h3> }
          -^handle { <h5> <> <h4> <> <h3> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t5570-3
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^<a16> <a17>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a2>
          ^name { <n2> <> evaluate-operator } ^<a18> <a19>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy affordance1 -^dont-copy category
          -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 not-confirmed1 ^category { <c1> << object person >> }
          ^category { <c2> << object person >> })
    (<i3> ^predicates <p1> ^root-category { <r2> <> drink1 })
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a3> ^arg2 <a4>
          ^arg1 <a5> ^arg1 <a6> ^subtask-handle <s3> ^subtask-handle <s4>
          ^<a9> <a10> ^<a11> <a12>)
    (<a3> ^arg-type object ^id <i5>)
    (<a4> ^arg-type object ^id <i6>)
    (<a5> ^arg-type object ^id <i7>)
    (<a6> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r3> ^robot <r4> ^robot <r5> ^robot <r6>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i5> ^object <i3> ^object <i6> ^object <i7>
          ^object <i8> ^object <o3> ^object <o4>)
    (<r3> ^current-location <i7>)
    (<r4> ^current-location <i8>)
    (<r5> ^arm <a7>)
    (<a7> ^holding-object false)
    (<r6> ^arm <a8>)
    (<a8> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
    (<a10> ^arg-type modifiers ^handle <h3> ^handle { <h4> > <h3> })
   -{ (<o1> ^{ <a13> <> <a11> <> arg2 <> arg1 } <a14>)
      (<a14> ^arg-type <a15>)}
    (<a12> ^arg-type modifiers ^handle <h5> ^handle { <h6> > <h5> }
          -^handle { <h7> <> <h6> <> <h5> })
    (<a17> ^arg-type partial-predicate ^2 <o3> ^handle <h8>)
   -{ (<t2> ^{ <a20> <> <a18> <> arg1 } <a21>)
      (<a21> ^arg-type <a22>)}
    (<a19> ^arg-type partial-predicate ^2 <o4> ^handle <h9>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 4)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t5570-4
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^task-operator <t2>
          ^name <n1> ^name <n2> ^operator <o1> + ^problem-space <p2>
          ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i4> ^handle <h1>
          ^handle <h2>)
    (<t1> ^task-handle fetch1 ^arg1 <a1> ^name { <n1> <> evaluate-operator }
          ^<a16> <a17>)
    (<a1> ^arg-type object ^id <i2>)
    (<t2> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a2>
          ^name { <n2> <> evaluate-operator } ^<a18> <a19>)
    (<a2> ^arg-type object ^id <i3>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i5>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy affordance1 -^dont-copy category
          -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 not-confirmed1 ^category { <c1> << object person >> }
          ^category { <c2> << object person >> })
    (<i3> ^predicates <p1> ^root-category { <r2> <> drink1 })
    (<i4> ^handle in1 ^1 <i3> ^type relation ^2 <i6>)
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a3> ^arg2 <a4>
          ^arg1 <a5> ^arg1 <a6> ^subtask-handle <s3> ^subtask-handle <s4>
          ^<a9> <a10> ^<a11> <a12>)
    (<a3> ^arg-type object ^id <i5>)
    (<a4> ^arg-type object ^id <i6>)
    (<a5> ^arg-type object ^id <i7>)
    (<a6> ^arg-type object ^id <i8>)
    (<p2> ^name action ^name <n3> ^name <n4>)
    (<w1> ^objects <o2> ^robot <r3> ^robot <r4> ^robot <r5> ^robot <r6>
          ^predicates <p3>)
    (<o2> ^object <i2> ^object <i5> ^object <i3> ^object <i6> ^object <i7>
          ^object <i8> ^object <o3> ^object <o4>)
    (<r3> ^current-location <i7>)
    (<r4> ^current-location <i8>)
    (<r5> ^arm <a7>)
    (<a7> ^holding-object false)
    (<r6> ^arm <a8>)
    (<a8> ^holding-object false)
    (<p3> ^predicate <p4> ^predicate <p5>)
    (<p4> ^handle in1)
    (<p5> ^handle in1)
    (<a10> ^arg-type modifiers ^handle <h3> ^handle { <h4> > <h3> })
   -{ (<o1> ^{ <a13> <> <a11> <> arg2 <> arg1 } <a14>)
      (<a14> ^arg-type <a15>)}
    (<a12> ^arg-type modifiers ^handle <h5> ^handle { <h6> > <h5> }
          -^handle { <h7> <> <h6> <> <h5> })
    (<a17> ^arg-type partial-predicate ^2 <o3> ^handle <h8>)
   -{ (<t2> ^{ <a20> <> <a18> <> arg1 } <a21>)
      (<a21> ^arg-type <a22>)}
    (<a19> ^arg-type partial-predicate ^2 <o4> ^handle <h9>)
    -->
    (<o1> ^plan-length 4)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t5570-5
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1> ^operator <o1> +
          ^problem-space <p2> ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<t1> -^subtask-handle <s2> ^task-handle fetch1 ^arg1 <a1>
          ^name { <n1> <> evaluate-operator } ^<a10> <a11>)
    (<a1> ^arg-type object ^id <i2>)
    (<i1> ^handle in1 ^type relation ^1 <i2> ^2 <i3>)
    (<i2> ^predicates <p1> ^root-category { <r1> <> drink1 })
    (<p1> -^dont-copy affordance1 -^dont-copy category
          -^dont-copy is-confirmed1 -^dont-copy is-grabbed1
          ^affordance1 grabbable1 ^is-grabbed1 not-grabbed1
          ^is-confirmed1 not-confirmed1 ^category { <c1> << object person >> })
    (<o1> ^task-handle remember1 ^name op_remember1 ^arg2 <a2> ^arg1 <a3>
          ^subtask-handle <s3> ^<a5> <a6>)
    (<a2> ^arg-type object ^id <i3>)
    (<a3> ^arg-type object ^id <i4>)
    (<p2> ^name action ^name <n2>)
    (<w1> ^objects <o2> ^robot <r2> ^robot <r3> ^predicates <p3>)
    (<o2> ^object <i2> ^object <i3> ^object <i4> ^object <o3>)
    (<r2> ^current-location <i4>)
    (<r3> ^arm <a4>)
    (<a4> ^holding-object false)
    (<p3> ^predicate <p4>)
    (<p4> ^handle in1)
   -{ (<o1> ^{ <a7> <> <a5> <> arg2 <> arg1 } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> ^handle { <h3> > <h2> }
          -^handle { <h4> <> <h3> <> <h2> })
   -{ (<t1> ^{ <a12> <> <a10> <> arg1 } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a11> ^arg-type partial-predicate ^2 <o3> ^handle <h5>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t6449-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1start16)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle ensure1start16 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t6829-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c3> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> ^task-handle ensure1 ^arg1 <a1> ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ensure1start16)
    (<w1> ^objects <o1>)
    (<o1> ^object <i1>)
    (<i1> ^predicates <p2>)
    (<p2> ^is-confirmed1 confirmed1)
    -->
    (<s1> ^operator <o2> + ^operator <o2> =)
    (<o2> ^name select-next-goal ^next-goal-handle ensure1term19
           ^next-goal-type terminal-goal ^has-conditions true)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t6838-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle ensure1)
    (<o1> ^next-goal-handle ensure1term19 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t6849-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1term19)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle ensure1term19 ^item-type terminal-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t7434-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ensure1start16)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ensure1goal23
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit*OpNoChange*t7445-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle ensure1)
    (<o1> ^next-goal-handle ensure1goal23 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> ensure1goal23 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1> ^implicit-object <i2>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 starting1 ^category location)
    (<i2> ^default <d2>)
    (<d2> ^modifier1 current1 ^category location)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t7483-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1goal23)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle ensure1goal23)
    (<i1> ^subtask-handle subtask22 ^type subtask)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t7502-1
    :chunk
    (state <s1> ^current-task-segment <c1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^world <w1>)
    (<c1> -^performed-subtask subtask22)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2> ^object <o3>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 current1 ^category location)
    (<o3> ^predicates <p3>)
    (<p3> ^modifier1 starting1 ^is-confirmed1 not-confirmed1
          ^category location)
    -->
    (<s1> ^operator <o4> +)
    (<o4> ^task-handle remember1 ^item-type task-operator ^name op_remember1
           ^modifiers <m1> ^arg2 <a1> ^arg1 <a2> ^subtask-handle subtask22)
    (<m1> ^handle once1 ^arg-type modifiers)
    (<a1> ^id <o3> ^arg-type object)
    (<a2> ^id <o2> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t7510-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6>)
    (<a2> ^arg-type object ^id <i1>)
    (<i1> -^abstract true)
    (<a4> ^arg-type object ^id <i2>)
    (<i2> -^abstract true)
   -{ (<t1> ^{ <a7> <> <a5> <> <a3> <> <a1> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h1> -^handle { <h2> <> <h1> })
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a5> <a10> ^<a3> <a11> ^<a1> <a12>)
    (<a10> ^handle <h1> ^arg-type modifiers)
    (<a11> ^id <i2> ^arg-type object)
    (<a12> ^id <i1> ^arg-type object)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t7759-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ensure1goal23)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ensure1goal27
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t7770-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle ensure1)
    (<o1> ^next-goal-handle ensure1goal27 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> ensure1goal27 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^name co1 ^category officer1)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t7799-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1goal27)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle ensure1goal27)
    (<i1> ^subtask-handle subtask26 ^type subtask)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t7812-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2> ^root-category { <r1> <> drink1 })
    (<p2> ^is-confirmed1 not-confirmed1 ^category officer1 ^name co1
          ^category { <c1> << object person >> })
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle find1 ^item-type task-operator ^name op_find1
           ^arg1 <a1> ^subtask-handle subtask26)
    (<a1> ^id <o2> ^arg-type object)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t7835-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^task-operator <t1>
          ^copy-name <c1> ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^pred-count 1 ^arg-type temporal-clause ^1 <i1>)
    (<i1> ^type unary ^1 <i2> ^property-handle <p1> ^handle <h1>)
    (<i2> -^abstract true)
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a1> <a6>)
    (<a6> ^1 <i3> ^pred-count 1 ^arg-type temporal-clause)
    (<i3> ^1 <i2> ^property-handle <p1> ^handle <h1> ^type unary)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t7856-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle scan1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle scan1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t7869-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle scan1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle scan1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t7878-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle scan1)
    (<o1> ^next-goal-handle scan1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t7893-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle scan1goal1)
    (<t1> ^task-handle scan1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle scan1goal1)
    (<i1> ^command-name scan-command ^type execute-command)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t7910-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a7> > <a1> } <a8> ^{ <a9> > <a7> } <a10>)
    (<a2> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<p1> ^<a3> <a4> -^<a5> { <a6> <> <a4> })
    (<a8> ^arg-type object ^id <i2>)
    (<i2> -^abstract true)
   -{ (<t1> ^{ <a11> <> <a9> <> <a7> <> <a1> } <a12>)
      (<a12> ^arg-type <a13>)}
    (<a10> ^arg-type modifiers ^handle <h1> -^handle { <h2> <> <h1> })
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a9> <a14> ^<a7> <a15> ^<a1> <a16>)
    (<a14> ^handle <h1> ^arg-type modifiers)
    (<a15> ^id <i2> ^arg-type object)
    (<a16> ^id <i3> ^arg-type object)
    (<i3> ^predicates <p2> ^abstract true ^item-type object)
    (<p2> ^<a3> <a4>)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t7931-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle recall1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle recall1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t7937-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle recall1start1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle recall1goal1
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t7946-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle recall1)
    (<o1> ^next-goal-handle recall1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t7961-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle recall1goal1)
    (<t1> ^task-handle recall1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle recall1goal1)
    (<i1> ^command-name recall-command ^type execute-command)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t7989-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle recall1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle recall1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t7998-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle recall1)
    (<o1> ^next-goal-handle recall1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t8008-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle recall1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle recall1term1 ^item-type terminal-goal)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t8023-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6>)
    (<a2> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<a4> ^arg-type modifiers ^handle <h1> -^handle { <h2> <> <h1> })
   -{ (<t1> ^{ <a7> <> <a5> <> <a3> <> <a1> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^pred-count 1 ^arg-type temporal-clause ^1 <i2>)
    (<i2> ^type unary ^1 <i3> ^property-handle <p2> ^handle <h3>)
    (<i3> -^abstract true)
    (<p1> ^<a10> <a11> ^<a12> { <a13> > <a11> }
          -^<a14> { <a15> <> <a13> <> <a11> })
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a5> <a16> ^<a3> <a17> ^<a1> <a18>)
    (<a16> ^1 <i4> ^pred-count 1 ^arg-type temporal-clause)
    (<i4> ^1 <i3> ^property-handle <p2> ^handle <h3> ^type unary)
    (<a17> ^handle <h1> ^arg-type modifiers)
    (<a18> ^id <i5> ^arg-type object)
    (<i5> ^predicates <p3> ^abstract true ^item-type object)
    (<p3> ^<a12> <a13> ^<a10> <a11>)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t9024-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ensure1goal27)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ensure1goal33
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t9035-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle ensure1)
    (<o1> ^next-goal-handle ensure1goal33 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> ensure1goal33 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^category sentry1)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t9062-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1goal33)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle ensure1goal33)
    (<i1> ^subtask-handle subtask32 ^type subtask)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t9079-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^category sentry1)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle describe1 ^item-type task-operator ^name op_describe1
           ^arg1 <a1> ^subtask-handle subtask32)
    (<a1> ^id <o2> ^arg-type object)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t9103-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle describe1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle describe1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t9129-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c3> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> -^arg2 <a1> ^task-handle describe1 ^name <n1>)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle describe1start1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle describe1goal1
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t9138-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle describe1)
    (<o1> ^next-goal-handle describe1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t9153-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle describe1goal1)
    (<t1> ^task-handle describe1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle describe1goal1)
    (<i1> ^command-name describe-command ^type execute-command)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t9179-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle describe1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle describe1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t9188-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle describe1)
    (<o1> ^next-goal-handle describe1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t9199-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle describe1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle describe1term1 ^item-type terminal-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t9389-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ensure1goal33)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ensure1goal39
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t9400-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle ensure1)
    (<o1> ^next-goal-handle ensure1goal39 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> ensure1goal39 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^sentence |is not present| ^category message)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t9425-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1goal39)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle ensure1goal39)
    (<i1> ^subtask-handle subtask38 ^type subtask)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t9449-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^task-handle say1 ^item-type task-operator ^name op_say1 ^arg1 <a1>
           ^subtask-handle subtask38)
    (<a1> ^id <i1> ^arg-type object)
    (<i1> ^predicates <p2> ^abstract true)
    (<p2> ^category message ^sentence |is not present|)
}

sp {chunk*__COPY__TASK__*anystate*apply*copy-task-operator*OpNoChange*t9455-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<p1> ^<a6> <a7> ^<a8> { <a9> > <a7> } -^<a10> { <a11> <> <a9> <> <a7> })
    -->
    (<d1> ^<c1> <c2>)
    (<c2> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a12>)
    (<a12> ^id <i2> ^arg-type object)
    (<i2> ^predicates <p2> ^abstract true ^item-type object)
    (<p2> ^<a8> <a9> ^<a6> <a7>)
}

sp {chunkx2*__TASK_S_GOAL_*task*elaborate*desired*start-goal*OpNoChange*t9476-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle say1start1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle say1start1 ^item-type start-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t9493-1
    :chunk
    (state <s1> ^desired <d1> ^task-operator <t1> ^name <n1>
          ^problem-space <p1> ^current-task-segment <c1>
          ^current-task-segment <c3> ^world <w1>)
    (<d1> ^satisfied true)
    (<t1> -^arg2 <a1> ^task-handle say1 ^name <n1>)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle say1start1)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle say1goal1
           ^next-goal-type task-goal ^has-conditions true)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t9502-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle say1)
    (<o1> ^next-goal-handle say1goal1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t9517-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle say1goal1)
    (<t1> ^task-handle say1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle say1goal1)
    (<i1> ^command-name say-command ^type execute-command)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t9543-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle say1goal1)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle say1term1
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t9552-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle say1)
    (<o1> ^next-goal-handle say1term1 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t9563-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle say1term1)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle say1term1 ^item-type terminal-goal)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t9799-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ensure1goal39)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ensure1goal42
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t9810-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle ensure1)
    (<o1> ^next-goal-handle ensure1goal42 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> ensure1goal42 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 starting1 ^category location)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t9837-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1goal42)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle ensure1goal42)
    (<i1> ^subtask-handle subtask41 ^type subtask)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*2*OpNoChange*t9861-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 starting1 ^category location)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle describe1 ^item-type task-operator ^name op_describe1
           ^arg1 <a1> ^subtask-handle subtask41)
    (<a1> ^id <o2> ^arg-type object)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t10146-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ensure1goal42)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ensure1goal45
           ^next-goal-type task-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit*OpNoChange*t10157-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1> ^current-task-segment <c1>)
    (<t1> ^task-handle ensure1)
    (<o1> ^next-goal-handle ensure1goal45 ^name select-next-goal)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle { <h1> <> ensure1goal45 })
    -->
    (<s1> ^apply-select-next-goal true)
    (<c1> ^implicit-object <i1>)
    (<i1> ^default <d1>)
    (<d1> ^modifier1 starting1 ^category location)
}

sp {chunkx2*__TASK__GOAL__*task*elaborate*desired*OpNoChange*t10184-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1goal45)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^1 <i1> ^pred-count 1 ^handle ensure1goal45)
    (<i1> ^subtask-handle subtask44 ^type subtask)
}

sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t10206-1
    :chunk
    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
    (<t1> ^task-handle ensure1 ^name <n1>)
    (<p1> ^name action)
    (<w1> ^robot <r1> ^objects <o1>)
    (<r1> ^current-location <c1>)
    (<o1> ^object { <o2> <> <c1> })
    (<o2> ^predicates <p2>)
    (<p2> ^modifier1 starting1 ^is-confirmed1 confirmed1 ^category location)
    -->
    (<s1> ^operator <o3> +)
    (<o3> ^task-handle go-to-location1 ^item-type task-operator
           ^name op_go-to-location1 ^arg2 <a1> ^subtask-handle subtask44)
    (<a1> ^2 <o2> ^handle to1 ^arg-type partial-predicate)
}

sp {chunkx2*__SEL_NEXT_GOAL__*propose*select-next-goal*superstate*OpNoChange*t10828-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^current-task-segment <c1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^satisfied true)
    (<p1> ^name action)
    (<c1> ^current-goal <c2>)
    (<c2> ^handle ensure1goal45)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o1> + ^operator <o1> =)
    (<o1> ^name select-next-goal ^next-goal-handle ensure1term47
           ^next-goal-type terminal-goal ^has-conditions false)
}

sp {chunk*subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit*OpNoChange*t10837-1
    :chunk
    (state <s1> ^task-operator <t1> ^operator <o1>)
    (<t1> ^task-handle ensure1)
    (<o1> ^next-goal-handle ensure1term47 ^name select-next-goal)
    -->
    (<s1> ^apply-select-next-goal true)
}

sp {chunkx2*__TASK_T_GOAL_*task*elaborate*desired*terminal-goal*OpNoChange*t10848-1
    :chunk
    (state <s1> ^current-task-segment <c1> -^copy-task-goal <c2>
          ^problem-space <p1> ^task-operator <t1> ^name <n1>)
    (<c1> ^current-goal <c3>)
    (<c3> ^handle ensure1term47)
    (<p1> ^name action)
    (<t1> ^name <n1>)
    -->
    (<s1> ^desired <d1>)
    (<d1> ^handle ensure1term47 ^item-type terminal-goal)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t10881-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4>)
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
   -{ (<t1> ^{ <a5> <> <a3> <> <a1> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type concept ^handle <h1>)
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^task-handle <t2> ^item-type task-operator ^name <n1> ^<a3> <a8>
           ^<a1> <a9>)
    (<a8> ^handle <h1> ^arg-type concept)
    (<a9> ^id <i2> ^arg-type object)
}

sp {chunk*__COPY__GOAL__*anystate*copy-task-goal*elaborate*copy*no*modifiers*OpNoChange*t10891-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<d1> ^copy-objects-map <c2>)
    -->
    (<s1> ^desired <d2>)
    (<d2> ^duplicate-of <c1> ^handle <h1> ^1 <i2> ^pred-count 1)
    (<i2> ^subtask-handle <s2> ^type subtask)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t10892-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n2> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n1>)
    (<o2> ^object <o3>)
   -{ (<s5> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t10892-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n2> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n1>)
    (<o2> ^object <o3>)
   -{ (<s5> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t10892-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n3> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n2> ^<a1> <a2> ^<a3> <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t10892-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n3> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n2> ^<a1> <a2> ^<a3> <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h3>)
   -{ (<o1> ^{ <a5> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type partial-predicate ^2 <o4> ^handle <h4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t10892-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type partial-predicate ^2 <o3> ^handle <h2>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t10906-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n2> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n1>)
    (<o2> ^object <o3>)
   -{ (<s5> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t10906-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n2> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n1>)
    (<o2> ^object <o3>)
   -{ (<s5> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t10906-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n3> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n2> ^<a1> <a2> ^<a3> <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type object ^id <o3>)
   -{ (<o1> ^{ <a5> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o4>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t10906-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n3> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n2> ^<a1> <a2> ^<a3> <a4>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type object ^id <o3>)
   -{ (<o1> ^{ <a5> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <o4>)
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t10906-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <o3>)
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t10916-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p1>)
    (<p1> ^<a6> <a7> ^<a8> { <a9> > <a7> } -^<a10> { <a11> <> <a9> <> <a7> })
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a1> <a12>)
    (<a12> ^id <i2> ^arg-type object)
    (<i2> ^predicates <p2> ^abstract true ^item-type object)
    (<p2> ^<a8> <a9> ^<a6> <a7>)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*Tie*t10921-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a9>)
    (<t2> ^task-handle <t1> ^<a1> <a2>)
   -{ (<t2> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
   -{ (<c2> ^{ <a6> <> <a1> } <a7>)
      (<a7> ^arg-type <a8>)}
    (<a2> ^arg-type object ^id <i1>)
    (<i1> ^abstract true ^predicates <p2>)
    (<a9> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p1>)
    (<p2> ^<a10> <a11> ^<a12> { <a13> > <a11> }
          -^<a14> { <a15> <> <a13> <> <a11> })
    (<p1> ^<a10> <a11> ^<a12> <a13>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t10925-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n2> ^<a1> <a2>)
    (<s2> ^name <n1>)
   -{ (<s5> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a6> <a7> ^<a8> { <a9> > <a7> } -^<a10> { <a11> <> <a9> <> <a7> })
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t10925-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n2> ^<a1> <a2>)
    (<s2> ^name <n1>)
   -{ (<s5> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a6> <a7> ^<a8> { <a9> > <a7> } -^<a10> { <a11> <> <a9> <> <a7> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t10925-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n3> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n2> ^<a1> <a2> ^<a3> <a4>)
    (<a2> ^arg-type object ^id <i3>)
    (<i3> ^abstract true ^predicates <p2>)
   -{ (<o1> ^{ <a5> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p2>)
    (<p2> ^<a8> <a9> ^<a10> { <a11> > <a9> } ^<a12> <a13>
          ^<a14> { <a15> > <a13> } -^<a16> { <a17> <> <a15> <> <a13> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t10925-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n3> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n2> ^<a1> <a2> ^<a3> <a4>)
    (<a2> ^arg-type object ^id <i3>)
    (<i3> ^abstract true ^predicates <p2>)
   -{ (<o1> ^{ <a5> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i4>)
    (<i4> ^abstract true ^predicates <p2>)
    (<p2> ^<a8> <a9> ^<a10> { <a11> > <a9> } ^<a12> <a13>
          ^<a14> { <a15> > <a13> } -^<a16> { <a17> <> <a15> <> <a13> })
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t10925-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>)
   -{ (<o1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i2>)
    (<i2> ^abstract true ^predicates <p2>)
    (<p2> ^<a6> <a7> ^<a8> { <a9> > <a7> } -^<a10> { <a11> <> <a9> <> <a7> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

sp {chunk*__COPY__TASK__*anystate*copy-task-operator*elaborate*copy*OpNoChange*t10955-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^subtask-handle <s2> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6>)
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
    (<a4> ^arg-type object ^id <i3>)
   -{ (<t1> ^{ <a7> <> <a5> <> <a3> <> <a1> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h1> -^handle { <h2> <> <h1> })
    -->
    (<d1> ^<c2> <c3>)
    (<c3> ^subtask-handle <s2> ^task-handle <t2> ^item-type task-operator
           ^name <n1> ^<a5> <a10> ^<a3> <a11> ^<a1> <a12>)
    (<a10> ^handle <h1> ^arg-type modifiers)
    (<a11> ^id <i4> ^arg-type object)
    (<a12> ^id <i2> ^arg-type object)
}

sp {chunk*__MATCH_TASK__*anystate*match-task-operator*elaborate*successful-match*Tie*t10960-1
    :chunk
    (state <s1> ^match-task-operator <m1>)
    (<m1> ^candidate-tasks <c1> ^task-operator <t2>)
    (<c1> ^candidate-task-operator <c2>)
    (<c2> ^task-handle <t1> ^<a1> <a3> ^<a4> <a6> ^<a7> <a15>)
    (<t2> ^task-handle <t1> ^<a1> <a2> ^{ <a4> > <a1> } <a5>
          ^{ <a7> > <a4> } <a8>)
    (<a2> ^arg-type object ^id <i1>)
    (<a3> ^arg-type object ^id <i1>)
    (<a5> ^arg-type object ^id <i2>)
    (<a6> ^arg-type object ^id <i2>)
   -{ (<t2> ^{ <a9> <> <a7> <> <a4> <> <a1> } <a10>)
      (<a10> ^arg-type <a11>)}
   -{ (<c2> ^{ <a12> <> <a7> <> <a4> <> <a1> } <a13>)
      (<a13> ^arg-type <a14>)}
    (<a8> ^arg-type modifiers ^handle <h1> -^handle { <h2> <> <h1> })
    (<a15> -^handle { <h3> <> <h1> } ^arg-type modifiers ^handle <h1>)
    -->
    (<m1> ^successful-match <c2>)
}

sp {chunk*evaluate-operator*elaborate*evaluation*plan-length*Tie*t10964-1
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n2> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n1>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type object ^id <o4>)
    (<a4> ^arg-type object ^id <o3>)
   -{ (<s5> ^{ <a7> <> <a5> <> <a3> <> <a1> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> -^handle { <h3> <> <h2> })
    -->
    (<e1> ^plan-length 1)
}

sp {chunk*evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired*Tie*t10964-2
    :chunk
    (state <s1> ^operator <o1> ^evaluation <e1> ^problem-space <p1>
          ^superstate <s3> ^world <w1>)
    (<o1> ^name evaluate-operator ^evaluation <e1> ^superproblem-space <s2>
          ^evaluation <e2> ^superoperator <s5> ^superoperator <s6>)
    (<p1> ^name action)
    (<e2> ^desired <d1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s4>)
    (<s3> ^desired <d1>)
    (<s5> ^subtask-handle <s4> ^task-handle <t1> ^name <n2> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6>)
    (<w1> ^objects <o2>)
    (<s2> ^name <n1>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type object ^id <o4>)
    (<a4> ^arg-type object ^id <o3>)
   -{ (<s5> ^{ <a7> <> <a5> <> <a3> <> <a1> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> -^handle { <h3> <> <h2> })
    -->
    (<e1> ^symbolic-value success)
}

sp {chunk*__PLAN__LEN__*problem-space*action*subtask*plan-length*OpNoChange*t10964-3
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n3> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n2> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6> ^<a7> <a8>
          ^{ <a9> > <a7> } <a10> ^{ <a11> > <a9> } <a12>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4> ^object <o5> ^object <o6>)
    (<a2> ^arg-type object ^id <o4>)
    (<a4> ^arg-type object ^id <o3>)
    (<a6> ^arg-type modifiers ^handle <h3>)
    (<a8> ^arg-type object ^id <o6>)
    (<a10> ^arg-type object ^id <o5>)
   -{ (<o1> ^{ <a13> <> <a11> <> <a9> <> <a7> } <a14>)
      (<a14> ^arg-type <a15>)}
    (<a12> ^arg-type modifiers ^handle <h4> -^handle { <h5> <> <h4> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
    (<o1> ^plan-length 1)
}

sp {chunk*problem-space*action*elaborate*subtask-plan-length*OpNoChange*t10964-4
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^1 <i2> ^handle <h1>
          ^handle <h2>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<i2> ^type subtask ^subtask-handle <s3>)
    (<p1> ^name action ^name <n3> ^name <n4>)
    (<o1> ^subtask-handle <s2> ^subtask-handle <s3> ^task-handle <t1>
          ^task-handle <t2> ^name <n1> ^name <n2> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6> ^<a7> <a8>
          ^{ <a9> > <a7> } <a10> ^{ <a11> > <a9> } <a12>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4> ^object <o5> ^object <o6>)
    (<a2> ^arg-type object ^id <o4>)
    (<a4> ^arg-type object ^id <o3>)
    (<a6> ^arg-type modifiers ^handle <h3>)
    (<a8> ^arg-type object ^id <o6>)
    (<a10> ^arg-type object ^id <o5>)
   -{ (<o1> ^{ <a13> <> <a11> <> <a9> <> <a7> } <a14>)
      (<a14> ^arg-type <a15>)}
    (<a12> ^arg-type modifiers ^handle <h4> -^handle { <h5> <> <h4> })
    -->
    (<o1> ^plan-length 1)
}

sp {chunk*__TASK_POLICY__*problem-space*action*subtask*best*preference*OpNoChange*t10964-5
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^operator <o1> + ^world <w1>)
    (<d1> -^modifiers <m1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type subtask ^subtask-handle <s2>)
    (<p1> ^name action ^name <n2>)
    (<o1> ^subtask-handle <s2> ^task-handle <t1> ^name <n1> ^<a1> <a2>
          ^{ <a3> > <a1> } <a4> ^{ <a5> > <a3> } <a6>)
    (<w1> ^objects <o2>)
    (<o2> ^object <o3> ^object <o4>)
    (<a2> ^arg-type object ^id <o4>)
    (<a4> ^arg-type object ^id <o3>)
   -{ (<o1> ^{ <a7> <> <a5> <> <a3> <> <a1> } <a8>)
      (<a8> ^arg-type <a9>)}
    (<a6> ^arg-type modifiers ^handle <h2> -^handle { <h3> <> <h2> })
    -->
    (<s1> ^operator <o1> > ^best-pref-eval <o1>)
}

