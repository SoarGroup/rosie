sp {top-state*elaborate*agent-params*custom
   (state <s> ^superstate nil
              ^agent-params <p>)
-->
   (<p> ^debug-ids true
#       ^report-tasks-to-output-link true
#       ^debug-op-ties true
#       ^debug-wait-limit 3

#       ^interrupt-operator interpret-message 
#       ^interrupt-end-of-sentence true
#       ^interrupt-new-task true
#       ^interrupt-task-search true
        
        ^print-perception true
#       ^print-new-task true
#       ^print-new-task-shorthand true
#       ^print-wp-search-path-costs true
#       ^print-parsed-messages true
#       ^print-outgoing-messages true
#       ^print-interaction-stack true

   )
}

# Load chunks for fetch
#source fetch-chunks.soar
source full-training-chunks.soar

source waypoint-map.soar
source internal-world.soar

#explain all on

sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates*internal
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor <pred-mon>)
-->
   (<preds> ^predicate.handle in1)
   (<preds> ^predicate.handle on1)
   (<preds> ^predicate.handle holding1)
   (<preds> ^predicate.handle heard2)
}

sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates*magicbot
   (state <s> ^superstate nil
              ^agent-params.domain magicbot
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor <pred-mon>)
-->
   # Extract predicates via SVS
   (<pred-mon> ^predicate-info.predicate-handle in1)
   (<pred-mon> ^predicate-info.predicate-handle on1)

   (<preds> ^predicate.handle holding1)
   (<preds> ^predicate.handle heard2)
}

# Remove modifiers relieiving or emergency when the top task segment is popped
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*modifiers*relieving
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <seg>
              ^task-stack.top <seg>
              ^top-state.world.objects.object.predicates <preds>)
   (<preds> ^modifier1 { <mod> << relieving1 emergency1 >> })
-->
   (<preds> ^modifier1 <mod> -)
}

########### SCRIPTING CONDITIONS ###############
# These are ways of advancing the script in response to 
# some conditions being met in the world

sp {top-state*elaborate*script-triggers
   (state <s> ^superstate nil)
-->
   (<s> ^script-triggers <tr>)
}

sp {top-state*propose*get-next-script-message
   (state <s> ^superstate nil
              ^script-triggers <tr>)
   (<tr> ^trigger <h>
        -^handled <h>)
-->
   (<s> ^operator <o> + > = !)
   (<o> ^name get-next-script-message
        ^handle <h>)
}

sp {top-state*apply*get-next-script-message
   (state <s> ^superstate nil
              ^operator <o>
              ^script-triggers <tr>
              ^interaction.changes <chgs>)
   (<o> ^name get-next-script-message
        ^handle <h>)
-->
   (<tr> ^handled <h>)
   (<chgs> ^outgoing-message <msg>)
   (<msg> ^type get-next-script-message
          ^complete-message true
          ^fields.trigger <h>)
}

## Trigger 1: First time we turn-on the lights in the messhall, interrupt
#sp {top-state*elaborate*script-triggers*messhall_1
#   (state <s> ^superstate nil
#              ^script-triggers <tr>
#              ^task-stack.bottom.task-operator.name op_turn-on1
#              ^world.robot.current-location.predicates.name messhall1)
#-->
#   (<tr> ^trigger messhall_1)
#}
#
## Trigger 2: First time we turn on the lights in the motorpool, interrupt
#sp {top-state*elaborate*script-triggers*motorpool_1
#   (state <s> ^superstate nil
#              ^script-triggers <tr>
#              ^task-stack.bottom.task-operator.name op_turn-on1
#              ^world.robot.current-location.predicates.name motorpool1)
#-->
#   (<tr> ^trigger motorpool_1)
#}

sp {top-state*elaborate*script-triggers*inspect-mh1
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.segments.segment.task-operator <task-op>
              ^world.objects.object <off>)
   (<task-op> ^task-handle inspect1
              ^arg1.id.predicates.name messhall1)
   (<off> ^root-category officer1
          ^predicates <preds>)
   (<preds> ^name williams1
            ^modifier1 relieving1)
-->
   (<tr> ^trigger inspect-mh1)
}

sp {top-state*elaborate*script-triggers*inspect-esp1
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.segments.segment.task-operator <task-op>)
   (<tr> ^handled inspect-mh1)
   (<task-op> ^task-handle inspect1
              ^arg1.id.root-category post1)
-->
   (<tr> ^trigger inspect-esp1)
}

sp {top-state*elaborate*script-triggers*inspect-mp1
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.segments.segment.task-operator <task-op>)
   (<tr> ^handled inspect-esp1)
   (<task-op> ^task-handle inspect1
              ^arg1.id.predicates.name motorpool1)
-->
   (<tr> ^trigger inspect-mp1)
}

sp {top-state*elaborate*script-triggers*raise-alarm1
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.segments.segment.task-operator <task-op>)
   (<tr> ^handled inspect-mp1)
   (<task-op> ^task-handle raise1)
-->
   (<tr> ^trigger raise-alarm1)
}

sp {top-state*elaborate*script-triggers*inspect-mh2
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.segments.segment.task-operator <task-op>)
   (<tr> ^handled inspect-mp1)
   (<task-op> ^task-handle inspect1
              ^arg1.id.predicates.name messhall1)
-->
   (<tr> ^trigger inspect-mh2)
}

sp {top-state*elaborate*script-triggers*inspect-esp2
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.segments.segment.task-operator <task-op>)
   (<tr> ^handled inspect-mh2)
   (<task-op> ^task-handle inspect1
              ^arg1.id.root-category post1)
-->
   (<tr> ^trigger inspect-esp2)
}

sp {top-state*elaborate*script-triggers*inspect-mp2
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.segments.segment.task-operator <task-op>)
   (<tr> ^handled inspect-esp2)
   (<task-op> ^task-handle inspect1
              ^arg1.id.predicates.name motorpool1)
-->
   (<tr> ^trigger inspect-mp2)
}

sp {top-state*elaborate*script-triggers*go-to-co2
   (state <s> ^superstate nil
              ^script-triggers <tr>
              ^task-stack.segments.segment.task-operator <task-op>)
   (<tr> ^handled inspect-mp2)
   (<task-op> ^task-handle go-to-location1
              ^arg1.id.predicates.possessive cos1)
-->
   (<tr> ^trigger go-to-co2)
}

###### Rules for printing events
sp {complete-push-task-segment*report*time*info
   (state <s> ^name push-task-segment
              ^operator.name complete-push-task-segment
              ^segment-to-push.task-operator.task-handle <task-h>
              ^io.input-link.time <t>)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write (crlf) |$START-TASK$ | <task-h> | | <steps> | | <ms> (crlf))
}

sp {complete-pop-task-segment*report*time*info
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop.task-operator.task-handle <task-h>
              ^io.input-link.time <t>)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write (crlf) |$END-TASK$ | <task-h> | | <steps> | | <ms> (crlf))
}

sp {search-for-next-subtask*start*report*time*info
   (state <s> ^operator.name search-for-next-subtask
              ^superstate.task-operator.task-handle <task-h>
              ^io.input-link.time <t>
             -^reported-time)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write (crlf) |$BEGIN-SEARCH$ | <task-h> | | <steps> | | <ms> (crlf))
   (<s> ^reported-time true)
}

sp {search-for-next-subtask*finish*report*time*info
   (state <s> ^name search-for-next-subtask
              ^superstate.superstate.task-operator.task-handle <task-h>
              ^operator.name << return-successful-operator initiate-interaction >>
              ^io.input-link.time <t>)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write (crlf) |$END-SEARCH$ | <task-h> | | <steps> | | <ms> (crlf))
}

sp {apply*select-next-goal*report*goal*handle
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^apply-select-next-goal true
              ^task-operator.task-handle <task-h>
              ^io.input-link.time <t>)
   (<o> ^name select-next-goal
        ^next-goal-handle <goal-h>)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write (crlf) |$SELECTED-GOAL$ | <goal-h> | | <steps> | | <ms> (crlf))
}

#sp {interrupt*mltiple*objs
#   (state <s> ^superstate nil
#              ^world.objects <objs>)
#   (<objs> ^object <obj1>
#           ^object { <obj2> <> <obj1> })
#   (<obj1> ^handle <h>)
#   (<obj2> ^handle <h>)
#-->
#   (interrupt)
#   (write |DUPLICATE HANDLE: | <h>)
#}
