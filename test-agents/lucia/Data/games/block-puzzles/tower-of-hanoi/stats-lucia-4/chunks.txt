sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t1804-2
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-41 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle action-default4)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t1804-1
    :chunk
    (state <s1> ^retrieve-game tower-of-hanoi-41 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle goal-default13)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t1717-1
    :chunk
    (state <s1> ^retrieve-handle goal-default13 ^gtype goal)
    -->
    (<s1> ^goal I943)
    (I943 ^potential-args <p1> ^parameter-set <p2> ^formated predicate
           ^primary-rtype single ^nlp-set <n1> ^aname goal-default13
           ^handle goal-default13)
    (<p2> ^argnum 2)
    (<n1> ^conditions <c1> ^conditions <c2> ^aname goal-default13)
    (<c1> ^rtype single ^type concept ^attribute predicate ^negative false
           ^return-type number ^name number ^args <a1> ^parameter <p3>
           ^result <r1>)
    (<p3> ^num 1 ^1 <i1>)
    (<i1> ^type single ^param-id 2)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 2)
    (<c2> ^rtype single ^function soar-count ^name count ^type function
           ^negative false ^return-type number ^args <a2> ^parameter <p8>
           ^result <r6>)
    (<a2> ^num 1 ^2 <i3>)
    (<i3> ^rtype single ^name clear5 ^type concept ^attribute predicate
           ^negative false ^args <a3> ^parameter <p7> ^result <r5>)
    (<a3> ^num 1 ^1 <i4>)
    (<i4> ^type attribute ^rtype set ^name green1 ^attribute color
           ^negative false ^args <a4> ^parameter <p6> ^result <r4>)
    (<a4> ^num 1 ^1 <i5>)
    (<i5> ^type attribute ^rtype single ^attribute category ^name location
           ^negative false ^parameter <p4> ^args <a5> ^result <r3>)
    (<p4> ^num 0)
    (<a5> ^num 1 ^1 <i6>)
    (<i6> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p5> ^args <a6> ^result <r2>)
    (<p5> ^num 0)
    (<r2> ^set <s3>)
    (<r3> ^set <s4>)
    (<p6> ^num 1 ^1 <i7>)
    (<i7> ^type set ^param-id 1)
    (<r4> ^set <s5>)
    (<p7> ^num 0)
    (<r5> ^set <s6>)
    (<p8> ^num 2 ^2 <i8> ^1 <i9>)
    (<i8> ^type single ^param-id 1)
    (<i9> ^type single ^param-id 2)
    (<r6> ^set <s7>)
}

sp {chunkx4*soar-count*apply*complete*OpNoChange*t1702-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-count ^type function ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype single ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
   -{ (<s3> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
    -->
    (<s2> ^instance <i2>)
    (<i2> ^1 (size <s3>) ^2 <s3>)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t1312-1
    :chunk
    (state <s1> ^retrieve-handle action-default4 ^gtype action)
    -->
    (<s1> ^action <a1>)
    (<a1> ^potential-args <p1> ^parameter-set <p2> ^formated predicate
           ^primary-rtype single ^nlp-set <n1> ^verb-structure <v1>
           ^aname action-default4 ^handle action-default4)
    (<p2> ^argnum 2)
    (<n1> ^conditions <c1> ^aname action-default4)
    (<c1> ^name larger-than18 ^rtype single ^type concept ^attribute predicate
           ^negative false ^args <a2> ^parameter <p8> ^result <r6>)
    (<a2> ^num 2 ^2 <i1> ^1 <i5>)
    (<i1> ^rtype single ^name clear5 ^type concept ^attribute predicate
           ^negative false ^args <a3> ^parameter <p5> ^result <r3>)
    (<a3> ^num 1 ^1 <i2>)
    (<i2> ^type attribute ^rtype single ^attribute category ^name block
           ^negative false ^parameter <p3> ^args <a4> ^result <r2>)
    (<p3> ^num 0)
    (<a4> ^num 1 ^1 <i3>)
    (<i3> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p4> ^args <a5> ^result <r1>)
    (<p4> ^num 0)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<p5> ^num 1 ^1 <i4>)
    (<i4> ^type single ^param-id 1)
    (<r3> ^set <s4>)
    (<i5> ^rtype single ^name clear5 ^type concept ^attribute predicate
           ^negative false ^args <a6> ^parameter <p7> ^result <r5>)
    (<a6> ^num 1 ^1 <i6>)
    (<i6> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p6> ^result <r4> ^args <a7>)
    (<p6> ^num 0)
    (<r4> ^set <s5>)
    (<p7> ^num 0)
    (<r5> ^set <s6>)
    (<p8> ^num 2 ^2 <i7> ^1 <i8>)
    (<i7> ^type single ^param-id 1)
    (<i8> ^type single ^param-id 2)
    (<r6> ^set <s7>)
    (<v1> ^1 <i9>)
    (<i9> ^verb-name move1 ^verb-prep on1 ^2 2 ^1 1)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1200-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name larger-than18 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> ^gtype predicate)
    (<p1> ^link <c1> ^potential-args <p2> ^parameter-set <p3>
           ^formated predicate ^secondary-rtype single ^primary-rtype single
           ^nlp-set <n1> ^aname larger-than18 ^handle larger-than18)
    (<p3> ^argnum 4)
    (<n1> ^conditions <c2> ^conditions <i2> ^conditions <i1>
           ^aname larger-than18)
    (<c2> ^rtype single ^function soar-greater ^name greater ^type function
           ^negative false ^return-type number ^args <a1> ^parameter <p4>
           ^result <r1>)
    (<a1> ^num 2 ^2 <i1> ^1 <i2>)
    (<p4> ^num 2 ^2 <i3> ^1 <i4>)
    (<i3> ^type single ^param-id 3)
    (<i4> ^type single ^param-id 4)
    (<r1> ^set <s2>)
    (<i2> ^type attribute-of ^rtype single ^name volume ^negative false
           ^return-type number ^args <a2> ^parameter <p6> ^result <r3>)
    (<a2> ^num 1 ^2 <i5>)
    (<i5> ^attribute input-arg ^rtype single ^input 1 ^name object
           ^negative false ^parameter <p5> ^args <a3> ^result <r2>)
    (<p5> ^num 0)
    (<r2> ^set <s3>)
    (<p6> ^num 2 ^2 <i6> ^1 <i7>)
    (<i6> ^type single ^param-id 1)
    (<i7> ^type single ^param-id 4)
    (<r3> ^set <s4>)
    (<i1> ^type attribute-of ^rtype single ^name volume ^negative false
           ^return-type number ^args <a4> ^parameter <p8> ^result <r5>)
    (<a4> ^num 1 ^2 <i8>)
    (<i8> ^attribute input-arg ^rtype single ^input 2 ^name object
           ^negative false ^parameter <p7> ^args <a5> ^result <r4>)
    (<p7> ^num 1 ^1 <i9>)
    (<i9> ^type single ^param-id 2)
    (<r4> ^set <s5>)
    (<p8> ^num 2 ^2 <i10> ^1 <i11>)
    (<i10> ^type single ^param-id 2)
    (<i11> ^type single ^param-id 3)
    (<r5> ^set <s6>)
}

sp {chunkx4*soar-compare*greater*param-2*OpNoChange*t1182-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-greater ^type function ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<r1> ^set <s2>)
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<s3> ^instance { <i5> < <i3> })
      (<i5> ^1 <i4>)}
    (<i1> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i6>)
    (<i6> ^1 { <i7> < <i4> })
   -{ (<s4> ^instance { <i8> < <i6> })
      (<i8> ^1 <i7>)}
    -->
    (<s2> ^instance <i9>)
    (<i9> ^1 <i4> ^2 <i7>)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t1177-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute-of ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<s2> ^instance <i5>)
    (<i5> ^2 <i3> ^1 <n3>)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t784-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name clear5 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> ^gtype predicate)
    (<p1> ^link <c1> ^potential-args <p2> ^parameter-set <p3>
           ^formated predicate ^primary-rtype single ^nlp-set <n1>
           ^aname clear5 ^handle clear5)
    (<p3> ^argnum 1)
    (<n1> ^conditions <c2> ^aname clear5)
    (<c2> ^type state-pair ^attribute prepositions ^rtype single ^name below1
           ^negative true ^args <a1> ^parameter <p6> ^result <r3>)
    (<a1> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> ^attribute primitive ^type attribute ^rtype single ^name object
           ^negative false ^parameter <p4> ^result <r1> ^args <a2>)
    (<p4> ^num 0)
    (<r1> ^set <s2>)
    (<i2> ^attribute input-arg ^rtype single ^input 1 ^name object
           ^negative false ^parameter <p5> ^args <a3> ^result <r2>)
    (<p5> ^num 0)
    (<r2> ^set <s3>)
    (<p6> ^num 1 ^1 <i3>)
    (<i3> ^type single ^param-id 1)
    (<r3> ^set <s4>)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t766-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^handle <h1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative true ^rtype single ^name <h1> ^type state-pair ^args <a3>
          ^parameter <p3> ^result <r1> ^attribute <a4>)
    (<a3> ^num 2 ^1 <i1> ^2 <i2>)
    (<i1> -^rtype set ^result <r2>)
    (<p3> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<p2> ^instance <i5>)
      (<i5> ^1 <i4> ^2 <i6>)
      (<i2> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i7>)
      (<i7> ^1 <i6>)}
   -{ (<s3> ^instance { <i8> < <i3> })
      (<i8> ^1 <i4>)}
    -->
    (<s2> ^instance <i9>)
    (<i9> ^1 <i4>)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t554-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n2> ^attribute <a4>)
    (<p1> ^num { <n1> < 2 })
    (<a3> ^1 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> ^<a4> <n2>)
    -->
    (<s2> ^instance <i5>)
    (<i5> ^1 <i3>)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t548-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> -^handle self)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <i1>)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2>)
    (<i2> ^1 <o2>)
}

sp {chunkx4*same-attribute*apply*complete*instance*OpNoChange*t2714-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<p2> ^<n2> <n3>)
   -{ (<i1> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i5>)
      (<i5> ^1 { <i6> > <i3> })
      (<i6> ^predicates <p3>)
      (<p3> ^<n2> <n3>)}
    -->
    (<s3> ^instance <i7>)
    (<i7> ^2 <n3> ^1 <i8>)
}

sp {chunkx4*same-attribute*elaborate*results*instance*sets*object*OpNoChange*t2714-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i5> ^1 <i6>)
    (<p2> ^<n2> <i5>)
    -->
    (<i6> ^object <i3>)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t5077-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i5>)
    (<i5> ^2 <i3> ^1 <i6>)
}

sp {chunkx4*attribute-of*apply*complete*sets*OpNoChange*t5077-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i3> ^1 <i5>)
    (<i3> ^object <o1>)
    (<o1> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<i5> ^<a4> <n3>)
}

sp {chunkx4*board-between*elaborate*instances*straight*single*OpNoChange*t3343-2
    :chunk
    (state <s1> ^diff-table <d1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<d1> ^diff <d2> ^diff <d3>)
    (<d2> ^result 2 ^pair <p1>)
    (<d3> ^result 1 ^pair <p2> ^pair <p3>)
    (<p1> ^num <n1> ^num { <n2> <> <n1> })
    (<p2> ^num <n1> ^num { <n3> <> <n2> <> <n1> })
    (<p3> ^num <n2> ^num <n3>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype single ^name between-exclusive
          ^type function ^args <a3> ^negative <n4> ^parameter <p4>
          ^result <r4>)
    (<a3> ^num 3 ^1 <i1> ^3 <i2> ^2 <i3>)
    (<i1> ^rtype single ^result <r3>)
    (<i2> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> > <i4> })
      (<i6> ^1 <i5>)}
    (<i5> ^predicates <p5>)
    (<i3> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 <i8>)
   -{ (<s3> ^instance { <i9> > <i7> })
      (<i9> ^1 <i8>)}
    (<i8> ^predicates <p6>)
    (<p5> ^{ <a4> << x y >> } <n1> ^{ <a5> << x y >> <> <a4> } <a6>)
    (<p6> ^<a4> <n2> ^<a5> <a6>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i10>)
    (<i10> ^1 <i11>)
   -{ (<s4> ^instance { <i12> > <i10> })
      (<i12> ^1 <i11>)}
    (<i11> ^predicates <p7>)
    (<p7> ^<a4> <n3> ^<a5> <a6>)
    (<r4> ^set <s5>)
    -->
    (<s5> ^instance <i13>)
    (<i13> ^2 <i8> ^3 <i5> ^1 <i11>)
}

sp {chunkx4*board-between*elaborate*object*instance*OpNoChange*t3035-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-exclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10>)
    (<i10> ^1 <i11> ^3 <i5> ^2 <i8>)
}

sp {chunkx4*board-between*elaborate*object*instance*inclusive*OpNoChange*t3015-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-inclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10>)
    (<i10> ^1 <i11> ^3 <i5> ^2 <i8>)
}

sp {chunkx4*soar-count*apply*complete*OpNoChange*t3021-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-count ^type function ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r2> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<i3> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i4>)
    (<i4> ^1 (size <i3>) ^2 <i3>)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t57252-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type state-pair ^parameter <p1>
          ^args <a3> ^result <r2> ^name <n1> ^attribute <a4>)
    (<p1> ^num 2)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> -^rtype set ^result <r1>)
    (<i2> -^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<s2> ^instance { <i5> > <i3> })
      (<i5> ^1 <i4>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i6>)
    (<i6> ^2 <i4> ^1 <i7>)
}

sp {chunkx4*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t57252-2
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r4> ^attribute <a4>)
    (<p3> ^num 2)
    (<a3> ^num 2 ^2 <i4> ^1 <i5> ^2 <i6> ^1 <i7>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<i6> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i8>)
    (<i8> ^1 <i9>)
   -{ (<s2> ^instance { <i10> > <i8> })
      (<i10> ^1 <i9>)}
    (<r2> ^set <s3>)
    (<s3> ^instance <i11>)
    (<i11> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i12>)
    (<i12> ^1 <i2>)
    (<r4> ^set <s5>)
    (<s5> ^instance <i13>)
    (<i13> ^2 <i2> ^1 <i14>)
    -->
    (<i14> ^object <i3>)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t10663-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n1> ^attribute <a4>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2>)
    (<i2> ^2 <n1> ^3 <a4> ^1 <i3>)
}

sp {chunkx4*with-attribute*apply*complete*instance*objects*OpNoChange*t10663-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r2> ^attribute <i5> ^name <i6>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^3 <i5> ^2 <i6> ^1 <i7>)
    (<p2> ^<i5> <i6>)
    -->
    (<i7> ^object <i3>)
}



