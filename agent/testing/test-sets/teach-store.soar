
sp {TESTING*teach-store*top-state*elaborate*to-get*handles
   (state <s> ^superstate nil
              ^lti-store.to-get <get>)
-->
   (<get> ^handle store1 pick-up1 put-down1 open1 close1 not-open1 on1 goal) 
}

sp {TESTING*teach-store*top-state*elaborate*message-list
   (state <s> ^superstate nil)
-->
   (<s> ^message-list <msgs>)
   (<msgs> ^message <m1> <m2> <m3> <m4> <m5> <m6>
           ^next <m1>)
   (<m1> ^message-num 1
         ^next <m2>)
   (<m2> ^message-num 2
         ^next <m3>)
   (<m3> ^message-num 3
         ^next <m4>)
   (<m4> ^message-num 4
         ^next <m5>)
   (<m5> ^message-num 5
         ^next <m6>)
   (<m6> ^message-num 6
         ^next none)
}
   
# Store
sp {TESTING*teach-store*top-state*elaborate*test-message*1
   (state <s> ^superstate nil
              ^message-list.message <msg>
              ^lti-store.store1 <store>
              ^world.objects.object <block>)
   (<msg> ^message-num 1)
   (<block> ^handle 11)
-->
   (<msg> ^structure <st>)
   (<st> ^action <store> ^arg1 <block> ^message-type command)
}

# Goal
sp {TESTING*teach-store*top-state*testing*elaborate*test-message*2
   (state <s> ^superstate nil
              ^message-list.message <msg>
              ^lti-store.goal <goal>
              ^lti-store.not-open1 <closed>
              ^world.objects.object <pantry>
              ^world.objects.object <block>)
   (<msg> ^message-num 2)
   (<pantry> ^handle 1)
   (<block> ^handle 11)
-->
   (<msg> ^structure <st>)
   (<st> ^arg1 <goal> ^subclause <sub1> <sub2> ^message-type object-description)
   (<sub1> ^arg1 <block> ^predicate <pred>)
   (<pred> ^item-type predicate ^handle on1 ^2 <pantry>)
   (<sub2> ^arg1 <pantry> ^predicate <closed>)
}

# Open
sp {TESTING*teach-store*top-state*elaborate*test-message*3
   (state <s> ^superstate nil
              ^message-list.message <msg>
              ^lti-store.open1 <open>
              ^world.objects.object <pantry>)
   (<msg> ^message-num 3)
   (<pantry> ^handle 1)
-->
   (<msg> ^structure <st>)
   (<st> ^action <open> ^arg1 <pantry> ^message-type command)
}

# Pick-up
sp {TESTING*teach-store*top-state*elaborate*test-message*4
   (state <s> ^superstate nil
              ^message-list.message <msg>
              ^lti-store.pick-up1 <pick-up>
              ^world.objects.object <block>)
   (<msg> ^message-num 4)
   (<block> ^handle 11)
-->
   (<msg> ^structure <st>)
   (<st> ^action <pick-up> ^arg1 <block> ^message-type command)
}

# Put-down
sp {TESTING*teach-store*top-state*elaborate*test-message*5
   (state <s> ^superstate nil
              ^message-list.message <msg>
              ^lti-store.put-down1 <put-down>
              ^world.objects.object <pantry>
              ^world.objects.object <block>)
   (<msg> ^message-num 5)
   (<pantry> ^handle 1)
   (<block> ^handle 11)
-->
   (<msg> ^structure <st>)
   (<st> ^action <put-down> ^arg1 <block> ^arg2 <arg2> ^message-type command)
   (<arg2> ^item-type predicate ^handle on1 ^2 <pantry>)
}

# Close
sp {TESTING*teach-store*top-state*elaborate*test-message*6
   (state <s> ^superstate nil
              ^message-list.message <msg>
              ^lti-store.close1 <close>
              ^world.objects.object <pantry>)
   (<msg> ^message-num 6)
   (<pantry> ^handle 1)
-->
   (<msg> ^structure <st>)
   (<st> ^action <close> ^arg1 <pantry> ^message-type command)
}
