##!
# @file
#
# @created plindes 20180917
# File: test-parser.soar
# Author: Peter Lindes
# Created: 17 September 2018
#
# Desc: Logic for running a regression test on whatever parser is selected
#

##############  SET UP THE TEST MODE    #########################

#   Set the agent-params value if this was sourced
sp {top-state*elaborate*setup-parser-test
   (state <s> ^superstate nil
              ^agent-params <params>)
   (<params> ^parser-test true)
-->
   (<s> ^parser-test <test>)
}

##############  SET UP THE FIRST TEST SENTENCE    #########################

#   Propose an operator to test the first sentence
sp {top-state*propose*test-first-sentence
   (state <s> ^superstate nil
              ^parser-test <test>)
  -(<test> ^sentence <sentence>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name test-first-sentence
        ^name create-scripted-sentences)    #   Fake this to get auto-written code
}

sp {top-state*apply*test-first-sentence
   (state <s> ^superstate nil
              ^agent-params.sentence-source scripts
              ^parser-test <test>
              ^operator <o>
              ^current-sentence <sentence>
              ^current-sentence-number <csn>
              ^interaction.changes <c>)
   (<o> ^name test-first-sentence)
   (<sentence> ^original-sentence <os>)
-->
   #    Set up the test data
   (<test> ^sentence <os>
           ^number <csn>)
   #    Set up the interaction state
   (<sentence> ^segment-proposed true)
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type process-sentence 
        ^parameters.sentence (deep-copy <os>)
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type process-sentence
          ^originator agent)
}


##############  PROPOSE AN OPERATOR TO COMPREHEND    #########################

#   Propose Lucia's comprehend at the appropriate time.
sp {top-state*propose*comprehend
   (state <s> ^name rosie
              ^interaction.changes.new-segment-info.purpose <p>
              ^agent-params.parser lucia
              ^agent-params.parser-test true
              ^parser-test <test>
             -^comprehension ) # Quit when a comprehension posted
   (<test> ^sentence <sentence>
          -^message <message>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name comprehend
        ^sentence <sentence>
        ^comprehension <c>
        ^input <i>
        ^debug-info (concat |Comprehend a segment of language input.|))
   #    Create an comprehension data structure on the comprehend state
   (<c> ^cxn-stack nil
        ^cxn-set <c-set>
        ^lex-stack nil
        ^word-stack nil)
   #    Create an input data structure on the comprehend state
   (<i> ^word nil
        ^count -1
        ^comprehended true
        ^content nil
        ^next nil)
}

#   Propose laird's comprehend at the appropriate time.
sp {top-state*propose*comprehension
   (state <s> ^name rosie
              ^interaction.changes.new-segment-info.purpose <p>
              ^agent-params.parser laird
              ^agent-params.parser-test true
              ^parser-test <test>
             -^interaction.status.new-message <msg> ) # Quit when a comprehension posted
   (<test> ^sentence <sentence>
          -^message <message>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name comprehension
        ^sentence <sentence>
        ^debug-info (concat |Comprehend a segment of language input.|))
}

########################## PREFERENCE RULES ############################

sp {top-state*prefer*attend-to-scene-change*over*comprehend
   (state <s> ^superstate nil
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name attend-to-scene-change)
   (<o2> ^name << comprehend comprehension >>)
-->
   (<s> ^operator <o1> > <o2>)
}


##############  INTERRUPT AT END OF SENTENCE    #########################

sp {top-state*interrupt*end-of-sentence
   (state <s> ^name rosie
              ^agent-params.parser-test true
              ^agent-params.interrupt-end-of-sentence true
              ^interaction.status.new-message <msg>)
-->
   (interrupt)
}


##############  MOVE ON TO THE NEXT SENTENCE    #########################

#   In test mode, move on to next sentence
#   by allowing the next script sentence to be elaborated
sp {top-state*propose*test-next-sentence
   (state <s> ^name rosie
              ^agent-params.parser-test true
              ^interaction.status.new-message <msg>)
-->
   (<s> ^operator <o> + >)  #   Do this before comprehend
   (<o> ^name test-next-sentence
        ^debug-info (concat |Move on to test the next sentence.|))
}

sp {top-state*apply*test-next-sentence*next-sentence-number*laird
   (state <s> ^name rosie
              ^agent-params.parser laird
              ^agent-params.parser-test true
              ^parser-test <test>
              ^current-sentence-number <csn>
              ^interaction.status <status>
              ^operator <o>)
   (<o> ^name test-next-sentence)
   (<status> ^new-message <s-msg>)
-->
   #    Change to the next sentence number
   #    This makes the next script sentence elaboration fire
   (<s> ^current-sentence-number <csn> -
        ^current-sentence-number (+ <csn> 1))
   #    Remove the message too
   (<status> ^new-message <s-msg> -)
}

sp {top-state*apply*test-next-sentence*next-sentence-number*lucia
   (state <s> ^name rosie
              ^agent-params.parser lucia
               ^agent-params.parser-test true
              ^parser-test <test>
              ^current-sentence-number <csn>
              ^interaction.status <status>
              ^operator <o>)
   (<o> ^name test-next-sentence)
   (<test> ^message <t-msg>)
   (<status> ^new-message <s-msg>)
-->
   #    Change to the next sentence number
   #    This makes the next script sentence elaboration fire
   (<s> ^current-sentence-number <csn> -
        ^current-sentence-number (+ <csn> 1))
   #    Remove the message too
   (<test> ^message <t-msg> -)
   (<status> ^new-message <s-msg> -)
}


##############  UPDATE TEST FOR THE NEXT SENTENCE    #########################

#   Update the test data when it is obsolete
sp {top-state*propose*update-test
   (state <s> ^name rosie
              ^agent-params.parser-test true
              ^current-sentence-number <csn>
              ^current-sentence <sentence> #  None left after last
              ^parser-test <test>)
   #    Update the test data to fit the new sentence
   (<test> ^number { <test-csn> <> <csn> })
-->
   (<s> ^operator <o> + >)  #   Do this before comprehend
   (<o> ^name update-test
        ^debug-info (concat |Update the test data.|))
}

sp {top-state*apply*update-test*lucia
   (state <s> ^superstate nil
              ^agent-params.parser lucia
              ^agent-params.sentence-source scripts
              ^parser-test <test>
              ^operator <o>
              ^current-sentence <sentence>
              ^current-sentence-number <csn>
              ^interaction.status <status>
              ^count <count>)
   (<o> ^name update-test)
   (<sentence> ^original-sentence <os>)
   (<test> ^sentence <s-old>
           ^number <n-old>)
-->
   #    Set up the test data
   (<test> ^sentence <s-old> -
           ^number <n-old> -
           ^sentence <os>
           ^number <csn>)
    #    Set up for the next round
    (<s> ^count <count> -
         ^count (+ <count> 1))
}

sp {top-state*apply*update-test*laird
   (state <s> ^superstate nil
              ^agent-params.parser laird
              ^agent-params.sentence-source scripts
              ^parser-test <test>
              ^operator <o>
              ^current-sentence <sentence>
              ^current-sentence-number <csn>
              ^interaction.status <status>)
   (<o> ^name update-test)
   (<sentence> ^original-sentence <os>)
   (<test> ^sentence <s-old>
           ^number <n-old>)
-->
   #    Set up the test data
   (<test> ^sentence <s-old> -
           ^number <n-old> -
           ^sentence <os>
           ^number <csn>)
}


##############  REPORT MESSAGE AND INTERRUPT    #########################

# AM: Moved to debugging-rules.soar



##############  QUIT AT THE END OF THE SCRIPT    #########################

sp {top-state*propose*script-done
   (state <s> ^name rosie
              ^agent-params.parser-test true
              ^current-sentence-number <csn>
              ^max-sentence-number { <max> < <csn> })   #   When we're at max
-->
   (<s> ^operator <o> + >)  #   Do this before comprehend
   (<o> ^name script-done)
}

sp {top-state*apply*script-done
   (state <s> ^name rosie
              ^operator.name script-done)
-->
   (halt)
}
