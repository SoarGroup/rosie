###################################################################
#
# interpret-command
#   A command given by the instructor to the agent to do something
#   Construction: *-VP-T
#     E.g. 'Store the red sphere', 'Put the green large block in the pantry'
#
###################################################################

#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-action-command
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              -^top-state.dialog-context
              -^new-segment-info
             -^task-operator <op>
             -^interpreted true)
   (<msg> ^message-type command -^action.word-structure.spelling |what's| -^action.word-structure.spelling |whats| -^action.handle load1 -^action.handle load)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-action-command
        ^command-message <msg>)
}

sp {interpret-message*reject*interpret-action-command*stop-following
  (state <s> ^name interpret-message
             ^operator <o> +
             ^instructor-message.action.handle stop1
             ^top-state.task-stack.bottom.task-operator.name op_follow-person1)
  (<o> ^name interpret-action-command)
-->
  (<s> ^operator <o> -)
}

sp {interpret-message*propose*interpret-stop-following-command
  (state <s> ^name interpret-message
             ^instructor-message.action.handle stop1
             ^top-state.task-stack.bottom.task-operator.name op_follow-person1
             -^interpreted)
-->
  (<s> ^operator <o> +)
  (<o> ^name interpret-stop-following-command)
}

sp {interpret-message*apply*interpret-stop-following-command
  (state <s> ^name interpret-message
             ^operator.name interpret-stop-following-command
             ^instructor-message <msg>
             ^top-state.task-stack.bottom <bot>)
-->
  (<bot> ^told-stop true)
  (<s> ^interpreted <msg>)
}

#JK
sp {interpret-message*propose*interpret-conditional-predicate*command
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^top-state.dialog-context.type game-learning)
   (<msg> ^message-type command
          -^action.handle load
          -^action.handle attend
           -^action.handle load1
	  -^action.handle describe1
          -^action.handle attend1
          -^interaction-status.failure
          -^action.handle ignore
          -^interpreted true)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interpret-conditional-predicate
        ^message <msg>)
}

sp {interpret-message*propose*interpret-attend-list
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^top-state.dialog-context <dc>)
   (<msg> ^message-type command
          ^action.handle attend
          -^interpreted true)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interpret-attend-list
        ^message <msg>)
}

sp {interpret-message*propose*interpret-ignore-list
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^top-state.dialog-context <dc>)
   (<msg> ^message-type command
          ^action.handle ignore
          -^interpreted true)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interpret-ignore-list
        ^message <msg>)
}

sp {interpret-message*apply*interpret-action-command
   (state <s> ^name interpret-message
              ^operator <o>
              ^instructor-message <msg>)
   (<o> ^name interpret-action-command
       -^custom-handling true)
   (<msg> ^action <action>)
   (<action> ^handle <task-handle>		
             -^agent-explanation)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type execute-task
        ^parameters.command-message <msg>
        ^satisfaction.task-event <e>)
   (<e> ^type completed-task
        ^task-handle <task-handle>)
   (<msg> ^interpreted true)
}

sp {interpret-message*apply*interpert-action-command*mark*message*learning-action
   (state <s> ^name interpret-message
              ^operator.name interpret-action-command
              ^instructor-message <msg>
              ^top-state.interaction.stack.segment.purpose.type << get-next-subaction get-next-goal >>)
-->
   (<msg> ^task-source instruction)
}

sp {interpret-message*apply*interpret-action-command*pop-segment*existing-task
   (state <s> ^name interpret-message
              ^operator.name interpret-action-command
              ^top-state.interaction.stack.segment.purpose.type execute-task)
-->
   (<s> ^terminate-segment true
        ^pop-current-task true)
}

#####################################################
# Special Command: Complete the following tasks
#####################################################

sp {interpret-message*elaborate*interpret-action-command*custom-handling*complete-following-tasks
   (state <s> ^name interpret-message
              ^operator <o> +
              ^instructor-message <msg>)
   (<o> ^name interpret-action-command)
   (<msg> ^action.handle complete1
          ^arg1.predicates <preds1>)
   (<preds1> ^category task2
             ^modifier1 following1)
-->
   (<o> ^command-type complete-following-tasks
        ^custom-handling true)
}

sp {interpret-message*apply*interpret-action-command*complete-following-tasks
   (state <s> ^name interpret-message
              ^operator <o>
              ^instructor-message <msg>
              ^top-state.task-stack.bottom <bot>)
   (<o> ^name interpret-action-command
        ^command-type complete-following-tasks)
-->
   (<bot> ^begin-composite-goal true)
   (<msg> ^interpreted true)
   (<s> ^interpreted true)
}
