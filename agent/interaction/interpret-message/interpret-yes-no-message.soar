###################################################################
#
# interpret-yes-no-message
#   Occurs when the intructor wishes to give additional information about an object
#   Construction: *-What-is-DP-QT 
#   	E.g. 'What is this?'
#
###################################################################

#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-yes-no-message
   (state <s> ^name interpret-message
              ^instructor-message <msg>)
   (<msg> ^message-type { << yes no >> <type> }
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type <type>)
}

#####
# OPERATOR APPLICATION
#####

sp {interpret-message*apply*interpret-yes-no-message*mark*answer
   (state <s> ^name interpret-message
              ^operator <o>
              ^current-purpose <p>)
   (<o> ^name interpret-yes-no-message
        ^message-type <type>)
   (<p> ^type wait-for-answer
        ^parameters.current-task-segment <seg>)
-->
   (<s> ^mark-interpreted <msg>)

   (<seg> ^answer <msg-obj>)
   (<msg-obj> ^predicates <preds>)
   (<preds> ^category <type>)
}

# Don't even need to do any special processing, just create a response
sp {interpret-message*apply*interpret-yes-no-message*mark
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>)
-->
   (<msg> ^interpreted true)
}

sp {interpret-message*apply*interpret-yes-no-message*mark*received-yes*pick-up*put-down
   (state <s> ^name interpret-message
              ^operator <o>
              ^top-state.task-stack.top <top>)
   (<o> ^name interpret-yes-no-message
        ^message-type yes)
   (<top> ^task-operator.task-handle << pick-up1 put-down1 give1 >>)
-->
   (<top> ^received-yes true)
}

sp {interpret-message*apply*interpret-yes-no-message*mark*received-yes*start-leading
   (state <s> ^name interpret-message
              ^operator <o>
              ^top-state.task-stack.top <top>)
   (<o> ^name interpret-yes-no-message
        ^message-type yes)
  (<top> ^task-operator.task-handle << start-leading1 stop-leading1 >>)
-->
   (<top> ^received-yes true)
}

sp {interpret-message*apply*interpret-yes-no-message*yes*mark*object*visible
   (state <s> ^name interpret-message
              ^operator <o>
              ^current-purpose.type ask-about-object
              ^current-purpose.parameters.object <obj>)
   (<o> ^name interpret-yes-no-message
        ^message-type yes)
   (<obj> ^predicates <preds>)
-->
   (<preds> ^is-visible1 visible1
            ^is-visible1 not-visible1 -)
}
    
sp {interpret-message*apply*interpret-yes-no-message*reset-state
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^operator <o>)
   (<ts> ^dialog-context <dc> ^interaction.status <status>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type yes)
   (<dc> ^needs-reset <t> ^learning true)
-->
   (<msg> ^interpreted true)
   (<dc> ^needs-reset <t> -)
   (<status> ^performed.dialog-event <de>)
   (<de> ^type single-word-response
         ^originator instructor)
}

sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-goal-initiate-state
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc>
              ^operator <o>)
   (<o> ^name interpret-yes-no-message
        ^message-type yes)
   (<dc> ^needs-setup true ^learning true)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-goal-initial-state
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}
#started by naming, not describing
sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-goal
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^operator <o>)
   (<ts> ^dialog-context <dc> ^interaction.changes <changes>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type yes)
   (<dc> ^needs-goal-setup <t> ^learning true -^parsed-goal)
-->
   (<msg> ^interpreted true)
   (<dc> ^needs-goal-setup <t> -)
   (<changes> ^outgoing-message <msg2>)
   (<msg2> ^type describe-goal
              ^complete-message true)
}

#needs-new-state
sp {interpret-message*apply*interpret-yes-no-message*yes*create*segment*needs-new-state
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^operator <o>)
   (<ts> ^dialog-context <dc> ^interaction.status <status>)#^interaction.changes <changes>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type yes)
   (<dc> ^needs-new-state <t> ^learning true)# -^parsed-goal)
-->
   (<msg> ^interpreted true)
 #  (<dc> ^needs-new-state <t> -)
   (<status> ^performed.dialog-event <de>)
   (<de> ^type single-word-response
         ^originator instructor)
  # (<changes> ^outgoing-message <msg2>)
  # (<msg2> ^type describe-goal
  #         ^complete-message true)
}


sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-failure
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^operator <o>)
   (<ts> ^dialog-context <dc> ^interaction.changes <changes>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type yes)
   (<dc> ^needs-failure-setup <t> ^learning true -^parsed-failure)
-->
   (<msg> ^interpreted true)
   (<dc> ^needs-failure-setup <t> -)
   (<changes> ^outgoing-message <msg2>)
   (<msg2> ^type describe-failure
              ^complete-message true)
}

#started by describing
sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-goal*predescribed
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^operator <o>)
   (<ts> ^dialog-context <dc>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type yes)
   (<dc> ^needs-goal-setup <t> ^learning true ^parsed-goal <msg2>)
-->
   (<msg> ^interpreted true)
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-goal-predicate
        ^parameters.message <msg2>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}

sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-failure*predescribed
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^operator <o>)
   (<ts> ^dialog-context <dc>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type yes)
   (<dc> ^needs-failure-setup <t> ^learning true ^parsed-failure <msg2>)
-->
   (<msg> ^interpreted true)
 #  (<dc> ^needs-failure-setup <t> -)
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-failure-predicate
        ^parameters.message <msg2>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}


sp {interpret-message*apply*interpret-yes-no-message*yes*concept-transfer
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^smem.command <sc>
              ^operator <o>)
   (<ts> ^dialog-context <dc>)
   (<dc> ^learning-predicate <lp> ^transfering <tf>)
   (<lp> ^name <name>)
   (<tf> ^name <name> ^lti <pred> ^to <game>)
   (<o> ^name interpret-yes-no-message
        ^message-type yes)
-->
   (<pred> ^from <game>)
   (<sc> ^store <pred>)
}



sp {interpret-message*apply*interpret-yes-no-message*yes*concept-transfer2
   (state <s> ^name interpret-message
              ^top-state <ts>
              #^smem.command <sc>
              ^operator <o>)
   (<ts> ^dialog-context <dc>)
   (<dc> ^learning-predicate <lp> ^transfering <tf>)
   (<lp> ^name <name>)
   (<tf> ^name <name> ^lti <pred> ^to <game>)
   (<pred> ^from <game>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type yes)
-->
   (<msg> ^interpreted true)
   (<dc> ^learning-predicate <lp> -)
   (<dc> ^transfering <tf> -)
}

#CHUNK vs non chunk stat collection
#sp {interpret-message*apply*interpret-yes-no-message*create*segment*finished-game-learning*datacollect
#   (state <s> ^name interpret-message
#              ^top-state.dialog-context.finished-game-teaching true
#              ^operator <o>)
#   (<o> ^name interpret-yes-no-message
#        ^message-type yes)
#-->
#(write (cmd |ctf -a chunked-stats.txt stats|))
#(halt)
#}

sp {interpret-message*apply*interpret-yes-no-message*create*segment*finished-game-learning
   (state <s> ^name interpret-message
              ^top-state.dialog-context.finished-game-teaching true
              ^operator <o>)
   (<o> ^name interpret-yes-no-message
        ^message-type <yesno>
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type finished-game-learning
        ^parameters.message <yesno>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}

#how make sure different handle??
sp {interpret-message*apply*interpret-yes-no-message*no*concept-transfer
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^operator <o>)
   (<ts> ^dialog-context <dc> ^interaction.changes <changes>)
   (<dc> ^learning-predicate <lp> ^transfering <tf>)
   (<lp> ^name <name>)
   (<tf> ^name <name> ^lti <pred> ^to <game>)
   (<o> ^name interpret-yes-no-message
        ^message <msg>
        ^message-type no)
-->
   (<msg> ^interpreted true)
   (<dc> ^transfering <tf> -)
   (<changes> ^outgoing-message <msg2>)
   (<msg2> ^type unknown-word
           ^complete-message true
              ^fields.word <name>)
}    

# If the agent asks for help finding and object the instructor can respond with 'no' (don't know)
sp {interpret-message*apply*interpret-yes-no-message*no*get-find-help*stop-asking
   (state <s> ^name interpret-message
              ^current-purpose.type get-find-help
              ^top-state.task-stack.bottom <bot-seg>
              ^operator <o>)
   (<o> ^name interpret-yes-no-message
        ^message-type no)
-->
   (<bot-seg> ^stop-asking true)
}    
