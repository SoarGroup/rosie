### state.deep-copy-world 

# Support structure used when deep copying the world
#   Elaborated automatically [see copy-type.soar]

sp {anystate*deep-copy-world*elaborate*copy
   (state <s> ^deep-copy-world <dcw>)
   (<dcw> ^source <src>)
-->
   (<dcw> ^copy <new-world>
          ^copy-objects-map <objs-map>
          ^copy-predicates-map <preds-map>
          ^copy-set-map <set-map>)
   (<new-world> ^objects <objs>
                ^predicates <preds>
                ^robot <robot>)
   (<robot> ^arm <arm>)
}

###### COPY ROBOT ######

sp {anystate*deep-copy-world*copy*robot*current-location
   (state <s> ^deep-copy-world <dcw>)
   (<dcw> ^source.robot.current-location <src-loc>
          ^copy.robot <robot>
          ^copy-objects-map.<src-loc> <loc>)
-->
   (<robot> ^current-location <loc>)
}

sp {anystate*deep-copy-world*copy*robot*arm
   (state <s> ^deep-copy-world <dcw>)
   (<dcw> ^source.robot.arm.<att-name> <att-val>
          ^copy.robot.arm <arm>)
-->
   (<arm> ^<att-name> <att-val>)
}

##### COPY OBJECTS #####

sp {anystate*deep-copy-world*copy*object
   (state <s> ^deep-copy-world <dcw>)
   (<dcw> ^source.objects.object <src-obj>
          ^copy.objects <objs>
          ^copy-objects-map <omap>)
-->
   (<objs> ^object <new-obj>)
   (<new-obj> ^predicates <preds>)
   (<omap> ^object <src-obj>
           ^<src-obj> <new-obj>)
}

sp {anystate*deep-copy-world*copy*object*handle
   (state <s> ^deep-copy-world.copy-objects-map <omap>)
   (<omap> ^object <src-obj>
           ^<src-obj> <obj>)
   (<src-obj> ^handle <handle>)
-->
   (<obj> ^handle <handle>)
}

sp {anystate*deep-copy-world*copy*object*waypoint
   (state <s> ^deep-copy-world.copy-objects-map <omap>)
   (<omap> ^object <src-obj>
           ^<src-obj> <obj>)
   (<src-obj> ^waypoint <waypoint>)
-->
   (<obj> ^waypoint <waypoint>)
}

sp {anystate*deep-copy-world*copy*object*root-category
   (state <s> ^deep-copy-world.copy-objects-map <omap>)
   (<omap> ^object <src-obj>
           ^<src-obj> <obj>)
   (<src-obj> ^root-category <cat>)
-->
   (<obj> ^root-category <cat>)
}

sp {anystate*deep-copy-world*copy*object*predicates
   (state <s> ^deep-copy-world.copy-objects-map <omap>)
   (<omap> ^object <src-obj>
           ^<src-obj> <obj>)
   (<src-obj> ^predicates <src-preds>)
   (<obj> ^predicates <preds>)
   (<src-preds> ^<pred-name> <pred-val> -^dont-copy <pred-name>)
   #(<src-preds> ^<pred-name> <pred-val>) #JK need dont copy flag check
-->
   (<preds> ^<pred-name> <pred-val>)
}

##### COPY PREDICATES #####

sp {anystate*deep-copy-world*copy*predicate
   (state <s> ^deep-copy-world <dcw>)
   (<dcw> ^source.predicates.predicate <src-pred>
          ^copy.predicates <preds>
          ^copy-predicates-map <pmap>)
-->
   (<preds> ^predicate <new-pred>)
   (<pmap> ^predicate <src-pred>
           ^<src-pred> <new-pred>)
}

sp {anystate*deep-copy-world*copy*predicate*handle
   (state <s> ^deep-copy-world.copy-predicates-map <pmap>)
   (<pmap> ^predicate <src-pred>
           ^<src-pred> <pred>)
   (<src-pred> ^handle <pred-handle>)
-->
   (<pred> ^handle <pred-handle>)
}

sp {anystate*deep-copy-world*copy*predicate*instance*size*1*set
   (state <s> ^deep-copy-world <dcw>)
   (<dcw> ^copy-predicates-map <pmap>
          ^copy-set-map <set-map>)
   (<pmap> ^predicate <src-pred>
           ^<src-pred> <pred>)
   (<src-pred> ^instance <src-instance> -^dont-copy <src-instance>)
   (<src-instance> ^1 <src-set> -^2)
   (<src-set> -^item-type)
-->
   (<pred> ^instance <new-instance>)
   (<new-instance> ^1 <new-set>)
   (<set-map> ^set <src-set>
              ^<src-set> <new-set>)
}

# #ENUMERATE: PREDICATE INSTANCE ARGUMENTS

sp {anystate*deep-copy-world*copy*predicate*instance*size*1*set*object
   (state <s> ^deep-copy-world <dcw>)
   (<dcw> ^copy-set-map <set-map>
          ^copy-objects-map <omap>)
   (<set-map> ^set <src-set>
              ^<src-set> <set>)
   (<src-set> ^<elem> <src-obj>)
   (<omap> ^<src-obj> <obj1>)
-->
   (<set> ^<elem> <obj1>)
}

sp {anystate*deep-copy-world*copy*predicate*instance*size*2
   (state <s> ^deep-copy-world <dcw> 
              ^problem-space.world.copy-type deep)
   (<dcw> ^copy-predicates-map <pmap>
          ^copy-objects-map <omap>)
   (<pmap> ^predicate <src-pred>
           ^<src-pred> <pred>)
   (<src-pred> ^instance <src-i> -^dont-copy <src-i>)
   (<src-i> ^1 <src-obj1> ^2 <src-obj2> -^3)
   (<omap> ^object <src-obj1> <src-obj2> ^<src-obj1> <obj1> ^<src-obj2> <obj2>)
-->
   (<pred> ^instance <new-i>)
   (<new-i> ^1 <obj1> ^2 <obj2>)
}

sp {anystate*deep-copy-world*copy*predicate*instance*size*3
   (state <s> ^deep-copy-world <dcw> 
              ^problem-space.world.copy-type deep)
   (<dcw> ^copy-predicates-map <pmap>
          ^copy-objects-map <com>)
   (<pmap> ^predicate <spred>
           ^<spred> <pred>)
   (<spred> ^instance <srci> -^dont-copy <srci>)
   (<srci> ^1 <src-obj1> ^2 <src-obj2> ^3 <src-obj3> -^4)
   (<com> ^object <src-obj1> <src-obj2> <src-obj3> ^<src-obj1> <obj1> ^<src-obj2> <obj2> ^<src-obj3> <obj3>)
-->
   (<pred> ^instance <new-i>)
   (<new-i> ^1 <obj1> ^2 <obj2> ^3 <obj3>)
}
