### Propose op_pour1 during task planning ###

### Propose pouring a dispenser into a fillable object
sp {problem-space*action*propose-subtasks*propose*op_pour1*dispenser*fillable
   (state <s> ^problem-space <ps>
              ^world.objects <objs>)
   (<ps> ^name action
         ^propose-subtasks true)
   (<objs> ^object <obj1> <obj2>)
   (<obj1> ^predicates <p1>)
   (<p1> ^is-confirmed1 confirmed1
         ^is-grabbed1 grabbed1
         ^affordance1 dispenser1)
   (<obj2> ^predicates <p2>)
   (<p2> ^is-confirmed1 confirmed1
         ^affordance1 fillable1
         ^contents1 empty1)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pour1 
         ^item-type task-operator
         ^task-handle pour1
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj1>)
   (<arg2> ^arg-type partial-predicate
           ^handle in1
           ^2 <obj2>)
}

### Propose emptying something into the drain
sp {problem-space*action*propose-subtasks*propose*op_pour1*fillable*drain
   (state <s> ^problem-space <ps>
              ^world.objects <objs>)
   (<ps> ^name action
         ^propose-subtasks true)
   (<objs> ^object <obj1> <obj2>)
   (<obj1> ^predicates <p1>)
   (<p1> ^is-confirmed1 confirmed1
         ^is-grabbed1 grabbed1
         ^affordance1 fillable1
         ^contents1 { <con> <> empty1 })
   (<obj2> ^predicates <p2>)
   (<p2> ^is-confirmed1 confirmed1
         ^affordance1 drain1)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pour1 
         ^item-type task-operator
         ^task-handle pour1
         ^arg1 <arg1>
         ^arg2 <arg2>)
   (<arg1> ^arg-type object
           ^id <obj1>)
   (<arg2> ^arg-type partial-predicate
           ^handle in1
           ^2 <obj2>)
}

