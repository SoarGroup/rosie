#####################################################
# General purpose action models 

sp {action*apply*subtask*mark*performed
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^task-operator <task-op>)
   (<o> ^subtask-handle { <sub-handle> <> none })
-->
   (<task-op> ^performed <sub-handle>)
}

sp {action*apply*subtask*mark*performed*duplicate-of
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^task-operator <task-op>)
   (<o> ^duplicate-of.subtask-handle { <sub-handle> <> none })
-->
   (<task-op> ^performed <sub-handle>)
}

#######################################################
## custom action models
#
#sp {action*internal*apply*subcation*add*object*1
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^task-concept-network.procedural.subtask <sub>
#              ^world.objects <objs>)
#   (<sub> ^handle <handle>
#          ^model.add-object <obj>)
#   (<o> ^subtask-handle <handle>)
#  (<obj> ^{ <prop1>             } <pred1>
#         -^{ <prop2> <> <prop1> } <pred2>)
#-->
#   (<objs> ^object <new>)
#   (<new> ^handle (make-constant-symbol |obj-hand|)
#          ^item-type object
#          ^predicates <preds>)
#   (<preds> ^<prop1> <pred1>
#            ^is-visible1 visible1
#            ^is-grabbed1 not-grabbed1)
#}
#
#sp {action*internal-execution*apply*subcation*add*object*2
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^task-concept-network.procedural.subtask <sub>
#              ^world.objects <objs>)
#   (<sub> ^handle <handle>
#          ^model.add-object <obj>)
#   (<o> ^subtask-handle <handle>)
#  (<obj> ^{ <prop1>           } <pred1>
#         ^{ <prop2> > <prop1> } <pred2>
#         -^{ <prop3> <> <prop2> <> <prop1> } <pred3>)
#-->
#   (<objs> ^object <new>)
#   (<new> ^handle (make-constant-symbol |obj-hand|)
#          ^item-type object
#          ^predicates <preds>)
#   (<preds> ^<prop1> <pred1>
#            ^<prop2> <pred2>
#            ^is-visible1 visible1
#            ^is-grabbed1 not-grabbed1)
#}
#
#sp {action*internal-execution*apply*subcation*add*object*3
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^task-concept-network.procedural.subtask <sub>
#              ^world.objects <objs>)
#   (<sub> ^handle <handle>
#          ^model.add-object <obj>)
#   (<o> ^subtask-handle <handle>)
#  (<obj> ^{ <prop1>           } <pred1>
#         ^{ <prop2> > <prop1> } <pred2>
#         ^{ <prop3> > <prop2> } <pred3>
#         -^{ <prop4> <> <prop3> <> <prop2> <> <prop1> } <pred4>)
#-->
#   (<objs> ^object <new>)
#   (<new> ^handle (make-constant-symbol |obj-hand|)
#          ^item-type object
#          ^predicates <preds>)
#   (<preds> ^<prop1> <pred1>
#            ^<prop2> <pred2>
#            ^<prop3> <pred3>
#            ^is-visible1 visible1
#            ^is-grabbed1 not-grabbed1)
#}
#
########################################################
### op_go-to1
#
#
#
#
###############################################
## give
#
#sp {action*apply*give*do*action-model*add*holding*relation
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^world.predicates.predicate <pred>)
#   (<o> ^name op_give1
#        ^arg1.id <obj>
#        ^arg2.{2} <person>)
#   (<pred> ^handle holding1)
#-->
#   (<pred> ^instance <i>)
#   (<i> ^1 <person> ^2 <obj>)
#}
#
################################################
## find
#sp {action*apply*find*do*action-model*mark*visible
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>)
#   (<o> ^name op_find1
#        ^arg1.id <obj>)
#   (<obj> ^predicates <preds>)
#-->
#   (<preds> ^is-visible1 visible1
#           ^is-visible1 not-visible1 -)
#}
#
#sp {action*apply*find*do*action-model*mark*invisible
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^world.objects.object { <other> <> <obj> })
#   (<o> ^name op_find1
#        ^arg1.id <obj>)
#   (<other> ^predicates <preds>)
#-->
#   (<preds> ^is-visible1 not-visible1
#           ^is-visible1 visible1 -)
#}
#
#
#sp {action*apply*op_find*do*action-model*remove*old*location
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator.name op_find1
#              ^world.robot <robot>)
#   (<robot> ^current-location <loc>)
#-->
#   (<robot> ^current-location <loc> -)
#}
#
#sp {action*apply*op_find*do*action-model*remove*in*preds
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator.name op_find1
#              ^world.robot <robot>
#              ^world.predicates.predicate <in-pred>)
#   (<robot> ^current-location <loc>)
#   (<in-pred> ^handle in1
#              ^instance <i>)
#   (<i> ^2 <loc>)
#-->
#   (<in-pred> ^instance <i> -)
#}
#
###################################################
## remember
#
### Adds source on the 2nd argument
#sp {action*apply*remember*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>)
#   (<op> ^name op_remember1
#         ^arg1.id <arg1>
#         ^arg2.id <arg2>)
#   (<arg1> ^predicates <preds>)
#   (<arg2> ^predicates.<att> <val>)
#-->
#   (<preds> ^<att> <val>)
#}
#
###################################################
#
#sp {action*internal-execution*apply*start-leading*do*action-model
#  (state <s> ^problem-space.name action
#             ^problem-space.execution-type internal
#             ^operator <o>)
#  (<o> ^name op_start-leading1
#       ^arg1.id.predicates <preds>)
#-->
#  (<preds> ^robot-status leading)
#}
#
## Remove any relations the person has
#sp {action*internal-execution*apply*start-leading*do*action-model*remove*relations
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^world.predicates.predicate <pred>)
#   (<o> ^name op_start-leading1
#        ^arg1.id <person>)
#   (<pred> ^handle <any>
#           ^instance <i>)
#   (<i> ^<num> <person>)
#-->
#   (<pred> ^instance <i> -)
#}
#
#sp {action*internal-execution*apply*stop-leading*do*action-model
#  (state <s> ^problem-space.name action
#             ^problem-space.execution-type internal
#             ^operator <o>)
#  (<o> ^name op_stop-leading1
#       ^arg1.id.predicates <preds>)
#  (<preds> ^robot-status leading)
#-->
#  (<preds> ^robot-status leading -)
#}
#
#sp {action*internal-execution*apply*stop-leading*do*action-model*add*in*predicate
#  (state <s> ^problem-space.name action
#             ^problem-space.execution-type internal
#             ^operator <o>
#             ^world.robot.current-location <loc>
#             ^world.predicates.predicate <pred>)
#  (<o> ^name op_stop-leading1
#       ^arg1.id <person>)
#  (<pred> ^handle in1)
#-->
#  (<pred> ^instance <i>)
#  (<i> ^1 <person> ^2 <loc>)
#}
#
#
#####################################################
## ask
#
#sp {action*apply*ask*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>
#              ^world.objects <objs>)
#   (<o> ^name op_ask1
#        ^arg1.id.predicates.sentence <sent>)
#-->
#   (<objs> ^object <answer>)
#   (<answer> ^item-type object ^predicates <preds>)
#   (<preds> ^category message ^modifier1 answer1 ^sentence |answer placeholder|)
#}
#
#
#
#
#

##############################################
## task has until clause
#

#sp {action*apply*wait*do*action-model*until-clause*unary*predicate
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world <world>)
#   (<op> ^name <any>
#         ^until-clause.<pnum> <pred>)
#   (<pred> ^type unary
#           ^handle <pred-handle>
#           ^property-handle <prop-handle>
#           ^{1}.predicates <preds>)
#-->
#   (<preds> ^<prop-handle> <pred-handle>)
#}
#
#sp {action*apply*wait*do*action-model*until-clause*unary*predicate*remove*others
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world <world>)
#   (<op> ^name <any>
#         ^until-clause.<pnum> <pred>)
#   (<pred> ^type unary
#           ^handle <pred-handle>
#           ^property-handle <prop-handle>
#           ^{1}.predicates <preds>)
#   (<preds> ^<prop-handle> { <val> <> <pred-handle> })
#-->
#   (<preds> ^<prop-handle> <val> -)
#}

#sp {action*apply*wait*do*action-model*until-clause*relation*predicate
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world.predicates.predicate <ts-pred>)
#   (<op> ^name <any>
#         ^until-clause.predicate <pred>)
#   (<pred> ^type relation
#           ^handle <pred-handle>
#           ^1 <obj1>
#           ^2 <obj2>)
#   (<ts-pred> ^handle <pred-handle>)
#-->
#   (<ts-pred> ^instance <i>)
#   (<i> ^1 <obj1> ^2 <obj2>)
#}

###############################################
## remember
#
## Adds source on the 2nd argument
#sp {action*apply*remember*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              -^world.objects.object <arg1>)
#   (<op> ^name op_remember1
#         ^arg1.id <arg1>
#         ^arg2.id <arg2>)
#   (<arg1> ^predicates <preds>)
#   (<arg2> ^predicates.<att> <val>)
#-->
#   (<preds> ^<att> <val>)
#}
#
#sp {action*apply*remember*do*action-model*link
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world.objects.object <arg1>)
#   (<op> ^name op_remember1
#         ^arg1.id <arg1>
#         ^arg2.id <arg2>)
#-->
#   (<arg1> ^linked-to <arg2>)
#}
#
#
###############################################
## wait
#
#sp {action*apply*wait*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <op>
#              ^world <world>)
#   (<op> ^name op_wait1
#         ^until-clause.predicate <pred>)
#   (<world> ^predicates.predicate <on-pred>
#            ^objects.object <steak>
#            ^objects.object <stove>)
#   (<on-pred> ^handle on1
#              ^instance <i>)
#   (<i> ^1 <steak> ^2 <stove>)
#   (<steak> ^predicates <steak-preds>)
#   (<steak-preds> ^shape steak1)
#   (<stove> ^predicates <stove-preds>)
#   (<stove-preds> ^name stove
#                  ^door1 closed2
#                  ^activation1 on2)
#   (<pred> ^type unary
#           ^handle cooked1
#           ^property-handle meat1
#           ^1 <steak>)
#-->
#   (<steak-preds> ^meat1 raw1 -
#                  ^meat1 cooked1)
#}
#
#
##########################################3
## recall 
#
#sp {action*apply*recall*do*action-model
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#          ^operator <op>
#          ^world.predicates.predicate <pred>)
#   (<op> ^name op_recall1
#         ^arg1.id.linked-to <obj1>
#         ^arg2 <arg2>)
#   (<arg2> ^arg-type partial-predicate
#           ^handle <pred-handle>
#           ^{2}.linked-to <obj2>)
#   (<pred> ^handle <pred-handle>)
#-->
#   (<pred> ^instance <i>)
#   (<i> ^1 <obj1> ^2 <obj2>)
#}
#
#sp {action*apply*recall*do*action-model*add*object*arg
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#          ^operator <op>
#          ^world.objects <objs>
#          ^world.predicates.predicate <pred>)
#   (<op> ^name op_recall1
#         ^<arg-name> <arg>)
#   (<arg> ^arg-type object
#          ^id <obj>)
#-->
#   (<objs> ^object <obj>)
#}
#
#sp {action*apply*ask*do*action-model*mark*asked
#   (state <s> ^problem-space.name action
#              ^problem-space.execution-type internal
#              ^operator <o>)
#   (<o> ^name op_ask1
#        ^arg1.id.predicates.sentence <sent>)
#-->
#   (<s> ^asked <sent>)
#}
#
