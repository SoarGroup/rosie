### Rules to add about using a microwave

# Action Model
sp {action*apply*turn-on*do*action-model*microwave*heat
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <op>
              ^world <w>)
   (<op> ^name op_turn-on1
         ^arg1.id <mic>)
   (<mic> ^predicates.name microwave1)
   (<w> ^objects.object <obj>
        ^predicates.predicate <in-pred>)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <mic>)
   (<obj> ^predicates <preds>)
   (<preds> ^temperature <temp>)
-->
   (<preds> ^temperature <temp> -
            ^temperature hot1)
}

# Commands

# turn on microwave - default 30 secs
sp {op_turn-on1*external*apply*send-turn-on-command*ai2thor*internal*microwave*default*secs
   (state <s> ^name op_turn-on1
              ^problem-space.execution-type external
              ^agent-params.domain << ai2thor internal >>
              ^operator <o>
              ^io.output-link <ol>
              ^task-operator <task-op>
              ^current-task-segment <seg>)
   (<o> ^name send-turn-on-command
        ^command-name <cmd-name>
        ^arg1.id <obj>)
   (<obj> ^handle <h>
          ^predicates.name microwave1)
   (<task-op> -^end-clause.<pnum>.type duration)
-->
   (<ol> ^perform-action <pa>)
   (<pa> ^item-type output-command
         ^name set-timer
         ^object <h>
         ^time 30)
   (<seg> ^<cmd-name> <pa>)
}

# turn on microwave - time from duration in seconds
sp {op_turn-on1*external*apply*send-turn-on-command*ai2thor*internal*microwave*duration*secs
   (state <s> ^name op_turn-on1
              ^problem-space.execution-type external
              ^agent-params.domain << ai2thor internal >>
              ^operator <o>
              ^io.output-link <ol>
              ^task-operator.end-clause.<pnum> <dur>
              ^current-task-segment <seg>)
   (<o> ^name send-turn-on-command
        ^command-name <cmd-name>
        ^arg1.id <obj>)
   (<obj> ^handle <h>
          ^predicates.name microwave1)
   (<dur> ^type duration
          ^number <num>
          ^unit seconds)
-->
   (<ol> ^perform-action <pa>)
   (<pa> ^item-type output-command
         ^name set-timer
         ^object <h>
         ^time <num>)
   (<seg> ^<cmd-name> <pa>)
}

# turn on microwave - time from duration in minutes
sp {op_turn-on1*external*apply*send-turn-on-command*ai2thor*internal*microwave*duration*min
   (state <s> ^name op_turn-on1
              ^problem-space.execution-type external
              ^agent-params.domain << ai2thor internal >>
              ^operator <o>
              ^io.output-link <ol>
              ^task-operator.end-clause.<pnum> <dur>
              ^current-task-segment <seg>)
   (<o> ^name send-turn-on-command
        ^command-name <cmd-name>
        ^arg1.id <obj>)
   (<obj> ^handle <h>
          ^predicates.name microwave1)
   (<dur> ^type duration
          ^number <num>
          ^unit minutes)
-->
   (<ol> ^perform-action <pa>)
   (<pa> ^item-type output-command
         ^name set-timer
         ^object <h>
         ^time (* <num> 60))
   (<seg> ^<cmd-name> <pa>)
}

# Simulate

sp {op_turn-on1*apply*simulate-turn-on-command*simulate-perception*set-timer
   (state <s> ^name op_turn-on1
              ^operator <o>
              ^agent-params.simulate-perception true
              ^target-object <obj>
              ^io.input-link.time.clock.elapsed-seconds <secs>
              ^top-state.perception-monitor.object-monitor.object-info <obj-info>)
   (<o> ^name simulate-turn-on-command
        ^command <cmd>)
   (<cmd> ^name set-timer
          ^time <t>)
   (<obj-info> ^input-link-obj.property <il-prop>
               ^world-obj <obj>)
   (<il-prop> ^property-handle is-activated1)
-->
   (<il-prop> ^turn-off-time (+ <secs> (* <t> 10)))
}

# If an object is in a microwave, make it hot
sp {op_turn-on1*apply*simulate-turn-on-command*simulate-perception*microwave*make*hot
   (state <s> ^name op_turn-on1
              ^operator.name simulate-turn-on
              ^agent-params.simulate-perception true
              ^target-object <mic>
              ^top-state.perception-monitor.object-monitor.object-info <obj-info>
              ^world <w>)
   (<mic> ^predicates.name microwave1)
   (<w> ^objects.object <obj>
        ^predicates.predicate <pred>)
   (<pred> ^handle in1
           ^instance <i>)
   (<i> ^1 <obj> ^2 <mic>)
   (<obj-info> ^world-obj <obj>
               ^input-link-obj.property <il-prop>)
   (<il-prop> ^property-handle temperature
              ^predicate-handle { <temp> <> hot1 })
-->
   (<il-prop> ^predicate-handle <temp> -
              ^predicate-handle hot1)
}


# If an object is in a microwave, make it hot
sp {op_turn-on1*apply*simulate-turn-on-command*microwave*make*contents*hot
   (state <s> ^name op_turn-on1
              ^operator.name simulate-turn-on
             -^agent-params.simulate-perception true
              ^target-object <mic>
              ^world <w>)
   (<mic> ^predicates.name microwave1)
   (<w> ^objects.object <obj>
        ^predicates.predicate <pred>)
   (<pred> ^handle in1
           ^instance <i>)
   (<i> ^1 <obj> ^2 <mic>)
   (<obj> ^predicates <obj-preds>)
   (<obj-preds> ^temperature { <old-temp> <> hot1 })
-->
   (<obj-preds> ^temperature <old-temp> -
                ^temperature hot1)
}

