### Internally modeling the remember task ###

sp {problem-space*action*internal*elaborate*op_remember1*dont-learn-action-model
   (state <s> ^problem-space.execution-type internal
              ^operator <o> +)
   (<o> ^name op_remember1)
-->
   (<o> ^dont-learn-action-model true)
}

# Copy predicates from arg2 to arg1
sp {problem-space*action*internal*apply*op_remember1*copy*predicate
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>)
   (<o> ^name op_remember1
        ^task-handle remember1
        ^memory-type wm
        ^arg1.id.predicates <p1>
        ^arg2.id.predicates <p2>)
   (<p2> ^{ <prop> << modifier1 category1 sentence >> } <pred>)
   (<p1> -^<prop> <pred>)
-->
   (<p1> ^<prop> <pred>)
}

# Mark arg2 object as merged-into arg1 object
sp {problem-space*action*internal*apply*op_remember1*mark*arg2*object*marged-into
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>)
   (<o> ^name op_remember1
        ^task-handle remember1
        ^memory-type wm
        ^arg1.id <arg1-obj>
        ^arg2.id <arg2-obj>)
-->
   (<arg2-obj> ^merged-into <arg1-obj>)
}

# Delete arg2 from the world
sp {problem-space*action*internal*apply*op_remember1*remove*arg2*object
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.objects <objs>)
   (<o> ^name op_remember1
        ^task-handle remember1
        ^memory-type wm
        ^arg2.id <obj>)
   (<objs> ^object <obj>)
-->
   (<objs> ^object <obj> -)
}

# Change any predicates from arg2 object to arg1 object
sp {problem-space*action*internal*apply*op_remember1*change*predicate*instances
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^world.predicates.predicate.instance <i>)
   (<o> ^name op_remember1
        ^task-handle remember1
        ^memory-type wm
        ^arg1.id <arg1-obj>
        ^arg2.id <arg2-obj>)
   (<i> ^<num> <arg2-obj>)
-->
   (<i> ^<num> <arg2-obj> -
        ^<num> <arg1-obj>)
}

# Change arg2 in the goal
sp {problem-space*action*internal*apply*op_remember1*change*goal*object
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^desired.<pnum> <gp>)
   (<o> ^name op_remember1
        ^task-handle remember1
        ^memory-type wm
        ^arg1.id <obj1>
        ^arg2.id <obj2>)
   (<gp> ^<onum> <obj2>)
-->
   (<gp> ^<onum> <obj2> -
         ^<onum> <obj1>)
}

# Change object in the task-operator
sp {problem-space*action*internal*apply*op_remember1*change*task-operator*object
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^task-operator.<arg-name> <arg>)
   (<o> ^name op_remember1
        ^task-handle remember1
        ^memory-type wm
        ^arg1.id <obj1>
        ^arg2.id <obj2>)
   (<arg> ^id <obj2>)
-->
   (<arg> ^id <obj2> -
          ^id <obj1>)
}

sp {problem-space*action*internal*apply*op_remember1*change*task-operator*partial-predicate
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <o>
              ^task-operator.<arg-name> <arg>)
   (<o> ^name op_remember1
        ^task-handle remember1
        ^memory-type wm
        ^arg1.id <obj1>
        ^arg2.id <obj2>)
   (<arg> ^2 <obj2>)
-->
   (<arg> ^2 <obj2> -
          ^2 <obj1>)
}
