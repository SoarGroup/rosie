#### GOAL SATISFACTION ####

sp {op_scan1*elaborate*desired
   (state <s> ^name op_scan1
             -^copy-task-goal
              ^task-operator.current-goal scan1goal1)
-->
   (<s> ^desired <des>)
   (<des> ^handle scan1goal1 ^pred-count 0)
}

# No end-clause, wait until the scan-command is successful
sp {op_scan1*elaborate*desired*satisfied*no*end-clause
   (state <s> ^name op_scan1
              ^problem-space.execution-type external
              ^desired <des>
              ^current-task-segment.scan-command.status << success succeeded >>
             -^task-operator.end-clause <cl>)
   (<des> ^handle scan1goal1)
-->
   (<des> ^satisfied true)
}

# The end-clause is satisfied and the agent has stopped
sp {op_scan1*elaborate*desired*satisfied*end-clause
   (state <s> ^name op_scan1
              ^problem-space.execution-type external
              ^desired <des>
              ^current-task-segment.stop-command.status << success succeeded >>
              ^task-operator.end-clause <cl>
              ^satisfied <cl>)
   (<des> ^handle scan1goal1)
-->
   (<des> ^satisfied true)
}

# The end-clause is satisfied even before the agent starts driving
sp {op_scan1*elaborate*desired*satisfied*end-clause*no*command*sent
   (state <s> ^name op_scan1
              ^problem-space.execution-type external
              ^desired <des>
             -^current-task-segment.scan-command
              ^task-operator.end-clause <cl>
              ^satisfied <cl>)
   (<des> ^handle scan1goal1)
-->
   (<des> ^satisfied true)
}

