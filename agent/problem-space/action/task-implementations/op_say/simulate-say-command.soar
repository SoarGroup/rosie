### Perform the say command by sending a message ###

sp {op_say1*propose*simulate-say-command
   (state <s> ^name op_say1
              ^problem-space.execution-type external
              ^current-task-segment <seg>)
   (<seg> ^say-command <cmd>)
   (<cmd> -^status success)
-->
   (<s> ^operator <o> +)
   (<o> ^name simulate-say-command
        ^item-type command-operator
        ^command <cmd>)
}

sp {op_say1*apply*simulate-say-command*mark*command*success
   (state <s> ^name op_say1
              ^operator <o>)
   (<o> ^name simulate-say-command
        ^command <cmd>)
-->
   (<cmd> ^status success)
}


### model simulate-say-command ###

# Send the outgoing message for a sentence object
sp {op_say*external*apply*say-message*send*message
   (state <s> ^name op_say1
              ^operator <o>
              ^top-state.interaction.changes <changes>
              ^current-task-segment <seg>)
   (<o> ^name simulate-say-command
        ^command.object.predicates.sentence <msg>)
-->
   (<changes> ^outgoing-message <send>)
   (<send> ^type say-sentence
           ^complete-message true
           ^fields.sentence <msg>)
}

# Add the heard predicate if saying to a person
sp {op_say1*internal*apply*simulate-say-command*add*heard*predicate
   (state <s> ^name op_say1
              ^operator <o>
              ^world.predicates.predicate <heard>)
   (<o> ^name simulate-say-command
        ^command <cmd>)
   (<cmd> ^object <obj>
          ^person <person>)
   (<person> ^predicates.category person)
   (<heard> ^handle heard2)
  -{(<heard> ^instance <i>)
    (<i> ^1 <person> ^2 <obj>)}
-->
   (<heard> ^instance <i>)
   (<i> ^1 <person> ^2 <obj>)
}

# Add the heard predicate for any visible person if no arg2
sp {op_say1*internal*apply*simulate-say-command*add*heard*predicate*anyone
   (state <s> ^name op_say1
              ^operator <o>
              ^world <w>)
   (<o> ^name simulate-say-command
        ^command <cmd>)
   (<cmd> ^object <obj>
         -^person)
   (<w> ^objects.object <person>
        ^predicates.predicate <heard>)
   (<person> ^predicates <ppreds>)
   (<ppreds> ^category person
             ^is-visible1 visible1)
   (<heard> ^handle heard2)
  -{(<heard> ^instance <i>)
    (<i> ^1 <person> ^2 <obj>)}
-->
   (<heard> ^instance <i>)
   (<i> ^1 <person> ^2 <obj>)
}

