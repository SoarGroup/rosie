### Send the low-level turn-on command when the target is visible and reachable ###
#     If it has a door, make sure the door is closed before turning it on (e.g. microwave)

sp {op_flip-on1*propose*send-turn-on-command
   (state <s> ^name op_flip-on1
              ^target-object <obj>)
   (<obj> ^predicates <preds>)
   (<preds> ^is-visible1 visible1
            ^is-reachable1 reachable1
            ^affordance1 activatable1
            ^category lightswitch1
            ^<prop> not-activated1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name send-turn-on-command
        ^item-type command-operator
        ^command-name turn-on-command
        ^arg1.id <obj>
        ^property <prop>)
}

# Microwave?
#sp {op_turn-on1*propose*send-turn-on-command*door*closed
#   (state <s> ^name op_turn-on1
#              ^target-object <obj>)
#   (<obj> ^predicates <preds>)
#   (<preds> ^is-visible1 visible1
#            ^is-reachable1 reachable1
#            ^is-activated1 not-activated1
#            ^is-open1 not-open1)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name send-turn-on-command
#        ^item-type command-operator
#        ^command-name turn-on-command
#        ^arg1.id <obj>
#        ^property <prop>)
#}

### internal ###

sp {op_flip-on1*external*apply*send-turn-on-command*internal
   (state <s> ^name op_flip-on1
              ^problem-space.execution-type external
              ^agent-params.domain internal
              ^operator <o>
              ^io.output-link <ol>
              ^current-task-segment <seg>)
   (<o> ^name send-turn-on-command
        ^command-name <cmd-name>
        ^arg1.id <obj>)
-->
   (<ol> ^perform-action <pa>)
   (<pa> ^item-type output-command
         ^name turn-on
         ^object <obj>)
   (<seg> ^<cmd-name> <pa>)
}


### ai2thor ###

# sp {op_turn-on1*external*apply*send-turn-on-command*ai2thor
#    (state <s> ^name op_turn-on1
#               ^problem-space.execution-type external
#               ^agent-params.domain ai2thor
#               ^operator <o>
#               ^io.output-link <ol>
#               ^current-task-segment <seg>)
#    (<o> ^name send-turn-on-command
#         ^command-name <cmd-name>
#         ^arg1.id <obj>)
#    (<obj> ^handle <h>)
# -->
#    (<ol> ^perform-action <pa>)
#    (<pa> ^item-type output-command
#          ^name turn-on
#          ^object <h>)
#    (<seg> ^<cmd-name> <pa>)
# }


# ### tabletop ###

# sp {op_turn-on1*external*apply*send-turn-on-command*tabletop
#    (state <s> ^name op_turn-on1
#               ^problem-space.execution-type external
#               ^agent-params.domain tabletop
#               ^operator <o>
#               ^io.output-link <ol>
#               ^current-task-segment <seg>)
#    (<o> ^name send-turn-on-command
#         ^command-name <cmd-name>
#         ^arg1.id.handle <h>
#         ^property <prop>)
# -->
#    (<ol> ^set-state <set>)
#    (<set> ^object-handle <h>
#           ^name <prop>
#           ^value activated1)
#    (<seg> ^<cmd-name> <set>)
# }

# ### magicbot ###

# sp {op_turn-on1*external*apply*send-turn-on-command*magicbot
#    (state <s> ^name op_turn-on1
#               ^problem-space.execution-type external
#               ^agent-params.domain magicbot
#               ^operator <o>
#               ^io.output-link <ol>
#               ^current-task-segment <seg>)
#    (<o> ^name send-turn-on-command
#         ^command-name <cmd-name>
#         ^arg1.id <obj>)
#    (<obj> ^perception-id <perc-id>
#           ^predicates.<prop> not-activated1)
# -->
#    (<ol> ^do-control-law <cmd>)
#    (<cmd> ^name change-state
#           ^item-type output-command
#           ^parameters <params>
#           ^termination-condition <term>)
#    (<term> ^name object-state
#            ^parameters <params>)
#    (<params> ^object-id (int <perc-id>)
#              ^property <prop>
#              ^value activated1)

#    (<seg> ^<cmd-name> <cmd>)
# }
