### Internally modeling the open task ###

sp {problem-space*action*internal*elaborate*op_open1*dont-learn-action-model
   (state <s> ^problem-space.execution-type internal
              ^operator <o> +)
   (<o> ^name op_open1)
-->
   (<o> ^dont-learn-action-model true)
}

# Change the predicate from not-open1 to open2
sp {problem-space*action*internal*apply*op_open1*add*open*predicate
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <op>)
   (<op> ^name op_open1 
         ^arg1.id.predicates <preds>)
   (<preds> ^is-open1 not-open1)
-->
   (<preds> ^is-open1 not-open1 -
            ^is-open1 open2)
}

# If we are opening a receptacle which has an item inside, make that item visible
sp {problem-space*action*internal*apply*op_open1*receptacle*make*contents*visible
   (state <s> ^problem-space.name action
              ^problem-space.execution-type internal
              ^operator <op>
              ^world <w>)
   (<op> ^name op_open1
         ^arg1.id <receptacle>)
   (<receptacle> ^predicates.affordance1 receptacle1)
   (<w> ^objects.object <contained>
        ^predicates.predicate <in-pred>)
   (<contained> ^predicates <cont-preds>)
   (<cont-preds> ^is-visible1 not-visible1)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <containted> ^2 <receptacle>)
-->
   (<cont-preds> ^is-visible1 not-visible1 -
                 ^is-visible1 visible1)
}

