# Propose op_go-to-xy1 for each let in the position-set
sp {op_go-to-next-waypoint1*propose*op_go-to-xy1
   (state <s> ^name op_go-to-next-waypoint1
              ^problem-space.execution-type external
              ^agent-params.domain << magicbot cozmo >>
              ^current-task-segment <seg>)
   (<seg> ^position-set.next <next>
         -^go-to-xy-command.status success)
   (<next> ^x <x> ^y <y>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name op_go-to-xy1
        ^item-type task-operator
        ^task-handle go-to-xy1
        ^arg1 <arg1>)
   (<arg1> ^arg-type coordinate
           ^coord <next>)
}

# If at a terminal location, go to the center of the room 
sp {op_go-to-next-waypoint1*reject*select-next-goal*positions*left
   (state <s> ^name op_go-to-next-waypoint1
              ^problem-space.execution-type external
              ^agent-params.domain magicbot
              ^operator <o> +
              ^terminal true
              ^desired.handle go-to-next-waypoint1goal1
              ^current-task-segment.position-set.next <> none)
   (<o> ^name select-next-goal)
-->
   (<s> ^operator <o> -
        ^require-subtask op_go-to-xy1)
}

sp {op_go-to-next-waypoint1*apply*pop-task-segment*op_go-to-xy1*mark*go-to-xy-command*success
   (state <s> ^name op_go-to-next-waypoint1
              ^operator <o>
              ^current-task-segment <seg>)
   (<o> ^name pop-task-segment
        ^segment <child-seg>)
   (<child-seg> ^status success
                ^task-operator.name op_go-to-xy1)
-->
   (<seg> ^go-to-xy-command.status success)
}

