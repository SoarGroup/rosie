#### If the instructor gives the command 'Complete the following tasks'
# The agent will add the flag ^begin-composite-goal true to the current-task-segment
# This operator will see the flag and create a new goal in the goal-graph 
#   which will represent one or more subtasks

sp {subproblem*execute*propose*create-composite-goal
   (state <s> ^problem-space.subproblem execute
              ^current-task-segment.begin-composite-goal true)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-composite-goal)
}

### Elaborations

sp {create-composite-goal*elaborate*task-operator
   (state <s> ^name create-composite-goal
              ^superstate.task-operator <task-op>)
-->
   (<s> ^task-operator <task-op>)
}

## dont want a problem-space
sp {create-composite-goal*elaborate*default-problem-space*no
   (state <s> ^name create-composite-goal)
-->
   (<s> ^default-problem-space no)
}


### smem-query - retrieve the current goal node

sp {create-composite-goal*retrieve*current-goal-id
   (state <s> ^name create-composite-goal
              ^task-operator.current-goal <goal-h>)
-->
  (<s> ^smem-query <query>)
  (<query> ^cue.handle <goal-h>
           ^depth 5
           ^destination <s>
           ^result-name current-goal-id)
}

### make-composite-goal
# Create the goal structure and add a next pointer from the previous goal to it

sp {create-composite-goal*propose*make-composite-goal
   (state <s> ^name create-composite-goal
              ^current-goal-id <goal-id>
             -^composite-goal)
-->
   (<s> ^operator <o> +)
   (<o> ^name make-composite-goal
        ^goal-id <goal-id>)
}

sp {create-composite-goal*apply*make-composite-goal
   (state <s> ^name create-composite-goal
              ^operator <o>
              ^task-operator.task-handle <task-h>)
   (<o> ^name make-composite-goal
        ^goal-id <goal-id>)
-->
   (<goal-id> ^next <next>)
   (<next> ^goal <comp>)
   (<comp> ^handle (make-constant-symbol (concat <task-h> |goal|))
           ^pred-count 0)
   
   (<s> ^composite-goal <comp>)
   (<s> ^to-store <goal-id> <next> <comp>)
}

### store-goal: store the new goal in semantic memory
sp {create-composite-goal*propose*store-goal
   (state <s> ^name create-composite-goal
              ^composite-goal <goal>
             -^stored <goal>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-goal)
}

sp {create-composite-goal*apply*store-goal*create*store*smem*command
   (state <s> ^name create-composite-goal
              ^operator.name store-goal
              ^to-store <id>
              ^smem.command <cmd>)
-->
   (<cmd> ^store <id>)
}

sp {create-composite-goal*apply*store-goal*success*mark*stored
   (state <s> ^name create-composite-goal
              ^operator.name store-goal
              ^to-store <id>
              ^smem.result.success <id>)
-->
   (<s> ^stored <id>)
}

### complete-create-composite-goal: change the flag from the task segment

sp {create-composite-goal*propose*complete-create-composite-goal
   (state <s> ^name create-composite-goal
              ^composite-goal <goal>
              ^stored <goal>)
-->
   (<s> ^operator <o> +)
   (<o> ^name complete-create-composite-goal)
}

sp {create-composite-goal*apply*complete-create-composite-goal
   (state <s> ^name create-composite-goal
              ^operator.name complete-create-composite-goal
              ^superstate.current-task-segment <seg>)
   (<seg> ^begin-composite-goal true)
-->
   (<seg> ^begin-composite-goal true -
          ^learning-composite-goal true)
}

