
# If the task-operator does not have a ^current-goal, 
# retrieve the TCN for the task and elaborate the start goal handle as ^current-goal

sp {subproblem*execute*propose*retrieve-start-goal
   (state <s> ^name <name>
              ^problem-space.subproblem execute
              ^task-operator <task-op>)
   (<task-op> ^task-handle <task-h>
              ^name <name>
             -^current-goal)
-->
   (<s> ^operator <o> + =)
   (<o> ^name retrieve-start-goal
        ^task-handle <task-h>)
}

# Query the TCN
sp {subproblem*execute*apply*retrieve-start-goal*smem*query
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name retrieve-start-goal
        ^task-handle <task-h>)
-->
   (<cmd> ^query <q>
          ^depth 2)
   (<q> ^item-type action
        ^handle <task-h>)
}

# Copy TCN.goal-graph.handle as the current-goal and cleanup query
sp {subproblem*execute*apply*retrieve-start-goal*copy*result*current-goal
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^task-operator <task-op>
              ^smem <smem>)
   (<o> ^name retrieve-start-goal
        ^task-handle <task-h>)
   (<smem> ^command <cmd>
           ^result <res>)
   (<cmd> ^query <q>)
   (<res> ^success <q>
          ^retrieved.goal-graph.handle <goal-h>)
   (<q> ^handle <task-h>)
-->
   (<task-op> ^current-goal <goal-h>)
}

sp {subproblem*execute*apply*retrieve-start-goal*clear*command
   (state <s> ^problem-space.subproblem execute
              ^operator.name retrieve-start-goal
              ^smem <smem>)
   (<smem> ^command <cmd>
           ^result.success <q>)
   (<cmd> ^query <q>
          ^<param> <val>)
-->
   (<cmd> ^<param> <val> -)
}
