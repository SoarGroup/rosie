
# By default, elaborated from the task-operator
sp {subproblem*execute*elaborate*predicate-test*from*start-clause
   (state <s> ^problem-space.subproblem execute
              ^task-operator.start-clause <cl>
              ^desired.item-type start-goal)
-->
   (<s> ^predicate-test <cl>)
}

# If the start clause is not satisfied, elaborate waiting-to-start
sp {subproblem*execute*elaborate*waiting-to-start*true
   (state <s> ^problem-space.subproblem execute
              ^desired.item-type start-goal
              ^task-operator.start-clause <cl>
             -^satisfied <cl>)
-->
   (<s> ^waiting-to-start true)
}

sp {subproblem*execute*propose*op_view1*start-clause*not-visible*object
   (state <s> ^problem-space.subproblem execute
              ^waiting-to-start true
              ^task-operator.start-clause <cl>)
   (<cl> ^<pnum> <pred>)
   (<pred> ^type unary
           ^1 <obj1>)
   (<obj1> ^predicates.is-visible1 not-visible1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name op_view1
        ^item-type task-operator
        ^task-handle view1
        ^modifiers <mods>
        ^arg1 <arg1>)
   (<mods> ^arg-type modifiers
           ^handle skip-learning1)
   (<arg1> ^arg-type object
           ^id <obj1>)
}

sp {subproblem*execute*propose*find*start-clause*not-confirmed*object
   (state <s> ^problem-space.subproblem execute
              ^task-operator.start-clause <cl>)
   (<cl> -^satisfied true
          ^<pnum> <pred>)
   (<pred> ^type unary
           ^1 <obj1>)
   (<obj1> ^predicates.is-confirmed1 not-confirmed1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name op_find1
        ^item-type task-operator
        ^task-handle find1
        ^modifiers <mods>
        ^arg1 <arg1>)
   (<mods> ^arg-type modifiers
           ^handle skip-learning1)
   (<arg1> ^arg-type object
           ^id <obj1>)
}
