## subtask-operator - the operator to add to the TCN
sp {learn-new-subtask*elaborate*subtask-operator*from*superstate*operator
   (state <s> ^name learn-new-subtask
              ^superstate.operator.subtask-operator <sub-op>)
-->
   (<s> ^subtask-operator <sub-op>)
}

## task-operator - the parent task operator
sp {learn-new-subtask*elaborate*task-operator*from*superstate
   (state <s> ^name learn-new-subtask
              ^superstate.task-operator <task-op>)
-->
   (<s> ^task-operator <task-op>)
}

## current-goal-handle - from current-task-segment
sp {learn-new-subtask*elaborate*current-goal-handle*from*current-task-segment
   (state <s> ^name learn-new-subtask
              ^superstate.current-task-segment.current-goal.handle <goal-h>)
-->
   (<s> ^current-goal-handle <goal-h>)
}

## task-goal - the current task goal 
sp {learn-new-subtask*elaborate*task-goal
   (state <s> ^name learn-new-subtask
              ^superstate.desired <des>)
-->
   (<s> ^task-goal <des>)
}

#### create-goal-node - will create a new node in the goal graph

## create-goal-node terminal - if the task is finish1
sp {learn-new-subtask*elaborate*create-goal-node*terminal
   (state <s> ^name learn-new-subtask
              ^subtask-operator.task-handle finish1)
-->
   (<s> ^create-goal-node terminal)
}

## create-goal-node composite - if the task is complete1
sp {learn-new-subtask*elaborate*create-goal-node*composite
   (state <s> ^name learn-new-subtask
              ^subtask-operator.task-handle complete1)
-->
   (<s> ^create-goal-node composite)
}

## create-goal-node subtask - true if the current goal is satisfied and we get a new task
sp {learn-new-subtask*elaborate*create-goal-node*subtask
   (state <s> ^name learn-new-subtask
              ^subtask-operator.task-handle { <sub-h> <> finish1 <> complete1 }
              ^current-goal-id.handle <goal-h>
              ^superstate.desired <des>
             -^learning-composite-goal)
   (<des> ^handle <goal-h>
          ^satisfied true)
-->
   (<s> ^create-goal-node subtask)
}

#### OTHERS

## learning-composite-goal true
sp {learn-new-subtask*elaborate*learning-composite-goal
   (state <s> ^name learn-new-subtask
              ^superstate.current-task-segment.learning-composite-goal <node-h>)
-->
   (<s> ^learning-composite-goal <node-h>)
}

## learning-repeat-block <goal-h>
sp {learn-new-subtask*elaborate*learning-repeat-block
   (state <s> ^name learn-new-subtask
              ^superstate.current-task-segment.learning-repeat-block <goal-h>)
-->
   (<s> ^learning-repeat-block <goal-h>)
}

## interrupting-current-task true
sp {learn-new-subtask*elaborate*interrupting-current-task
   (state <s> ^name learn-new-subtask
              ^superstate.current-task-segment.interrupt-task true)
-->
   (<s> ^interrupting-current-task true)
}

## branch-task - If we were told to do this subtask first, and it has conditions, 
#                then it is a branch task (full divergence in goal graph)
sp {learn-new-subtask*elaborate*branch-task*true
   (state <s> ^name learn-new-subtask
              ^subtask-operator <sub>)
   (<sub> ^modifiers.handle first1
          ^conditions <conds>)
-->
   (<s> ^branch-task true)
}

## dont want a problem-space
sp {learn-new-subtask*elaborate*default-problem-space*no
   (state <s> ^name learn-new-subtask)
-->
   (<s> ^default-problem-space no)
}


## subtask-handle - the handle that identifies this specific subtask under the parent task

# elaborate it from a matching task operator
sp {learn-new-subtask*elaborate*subtask-handle*from*matching-task
   (state <s> ^name learn-new-subtask
              ^match-task-operator <mto>)
   (<mto> ^successful-match.subtask-handle <sub-h>)
-->
   (<s> ^subtask-handle <sub-h>)
}

sp {learn-new-subtask*elaborate*subtask-handle*from*created*subtask
   (state <s> ^name learn-new-subtask
              ^generalized-subtask.handle <sub-h>)
-->
   (<s> ^subtask-handle <sub-h>)
}

