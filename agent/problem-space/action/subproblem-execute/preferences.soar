### Use a priority system to give a preference ordering to things

sp {subproblem*execute*prefer*higher*operator*priority
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^priority <p1>)
   (<o2> ^priority < <p1>)
-->
   (<s> ^operator <o1> > <o2>)
}

# Priority=10: copy-task-operator
sp {subproblem*execute*elaborate*copy-task-operator*priority*10
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^name copy-task-operator)
-->
   (<o> ^priority 10)
}

# Priority=9: remove-start-of-execution-flag, mark-start-time
# The first time an execute-task substate is reached, remove the ^start-of-execution flag
sp {subproblem*execute*elaborate*remove-start-of-execution-flag*priority*9
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^name << remove-start-of-execution-flag mark-start-time >>)
-->
   (<o> ^priority 9)
}

# Priority=8: smem-query, init-current-goal
sp {subproblem*execute*elaborate*smem-query*priority*8
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^name << smem-query init-current-goal >>)
-->
   (<o> ^priority 8)
}

# Priority=7, add-subtask-to-tcn, learn-subtask-proposal, push-task-segment
sp {subproblem*execute*elaborate*learning*subtask*operators*priority*7
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^name << add-subtask-to-tcn push-task-segment >>)
-->
   (<o> ^priority 5)
}

# Priority=6, attend-to-perception, add-object-to-world
sp {subproblem*execute*elaborate*attend-to-perception*priority*6
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^name << attend-to-perception add-object-to-world >>)
-->
   (<o> ^priority 7)
}

# Priority=5, select-next-goal, complete-task 
sp {subproblem*execute*elaborate*goal*operators*priority*5
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^name << select-next-goal complete-task >>)
-->
   (<o> ^priority 6)
}

# Priority=4, pop-task-segment, handle-execution-failure
sp {subproblem*execute*elaborate*task-stack*operators*priority*4
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^name << pop-task-segment handle-execution-failure >>)
-->
   (<o> ^priority 4)
}

# Priority=3: DEFAULT
sp {subproblem*execute*elaborate*operator*default*priority*3
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> -^priority <> 3
        -^item-type task-operator)
-->
   (<o> ^priority 3)
}

# Priority=2: subtask proposal rules, command-operator
sp {subproblem*execute*elaborate*task-stack*operators*priority*2
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^item-type << task-operator command-operator >>)
-->
   (<o> ^priority 2)
}

# Priority=1: wait 
sp {subproblem*execute*elaborate*task-stack*operators*priority*1
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +)
   (<o> ^name << wait >>)
-->
   (<o> ^priority 1)
}

################# child-task-segment ####################
# Once a child task is pushed onto the stack
#   we force it to be selected until it is finished

# Finish the child-task-segment before any other operators
sp {subproblem*execute*if*child-task-segment*reject*all*others
   (state <s> ^problem-space.subproblem execute
              ^child-task-segment.task-operator <task-op>
              ^operator <task-op> +
              ^operator { <o2> <> <task-op> } +)
   (<o2> ^name <> pop-task-segment)
-->
   (<s> ^operator <o2> -)
}

# Only operator to prefer over child-task is pop-task-segment
sp {subproblem*execute*prefer*operators*over*subtask
   (state <s> ^problem-space.subproblem execute
              ^child-task-segment.task-operator <task-op>
              ^operator <task-op> +
              ^operator <o2> +)
   (<o2> ^name pop-task-segment )
-->
   (<s> ^operator <o2> > <task-op>)
}

#################### force-state-no-change #########################

## If we want to learn an action model, force a SNC
sp {subproblem*execute*learn-task-action-model*force-state-no-change
   (state <s> ^problem-space.subproblem execute
              ^learn-task-action-model true)
-->
   (<s> ^force-state-no-change true)
}

# If there is an unproposed subtask, force a SNC to learn it
sp {subproblem*execute*unlearned-subtask-proposal*force-state-no-change
   (state <s> ^problem-space.subproblem execute
              ^current-task-segment.learn-subtask-proposal <sub-h>
              ^task-stack.push-task-operator <task-op>)
   -{(<s> ^operator { <sub-op> <> <task-op> } +)
     (<sub-op> ^subtask-handle <sub-h>)}
-->
   (<s> ^force-state-no-change true)
}

# If the agent has not yet learned an elaboration rule for a goal, force a SNC
sp {problem-space*action*elaborate*force-state-no-change*if*unlearned*desired
  (state <s> ^problem-space.subproblem execute
             ^task-operator <task-op>
             ^superstate.operator <task-op>
            -^desired
            -^implicit-object)
   (<task-op> ^current-goal <goal-h>)
-->
   (<s> ^force-state-no-change true)
}

#### MISC PREFERENCES ####

# If the current goal is satisfied, reject subtask operators
sp {subproblem*execute*reject*subtask*proposals*if*desired*satisfied
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
             -^child-task-segment
             -^require-subtask <op-name>
              ^desired.satisfied true)
   (<o> ^item-type << task-operator command-operator >>
        ^name <op-name>)
-->
   (<s> ^operator <o> -)
}

# If the current goal is to perform a certain subtask, give it a best preference
sp {subproblem*execute*elaborate*pest-prev-eval*subtask*operator*matches*desired
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
              ^desired.<pnum> <gp>)
   (<gp> ^type subtask
         ^subtask-handle <sh>)
   (<o> ^item-type task-operator
        ^subtask-handle <sh>)
-->
   (<s> ^operator <o> >
        ^best-pref-eval <o>)
}

# If we have not learned a policy for a subtask, reject it
sp {subproblem*execute*reject*subtask*operator*if*no*policy
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
             -^child-task-segment
             -^best-pref-eval <o1>)
   (<o1> ^item-type task-operator
         ^subtask-handle <sh>)
-->
   (<s> ^operator <o1> -)
}

# If the agent sent a command to the output link, reject the command operator
sp {subproblem*execute*reject*send*command*if*already*sent
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
              ^current-task-segment.<cmd-name> <cmd>)
   (<o> ^item-type command-operator
        ^command-name <cmd-name>)
-->
   (<s> ^operator <o> -)
}

# Don't exit the substate via complete-task while the output command is executing
#   (Can lead to crashes otherwise)
sp {subproblem*execute*reject*complete-task*if*unfinished*command
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
              ^current-task-segment.<cmd-name> <cmd>)
   (<o> ^name << select-next-goal complete-task >>)
   (<cmd> ^item-type output-command
          ^status << sent received executing running >>)
-->
   (<s> ^operator <o> -)
}

