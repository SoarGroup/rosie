###################### select-next-goal ########################
# When the current goal is satisfied, select the next one in the graph


######################## PREFERENCES ##########################

# Prefer select-next-goal if it is a loop-exit
sp {subproblem*execute*prefer*select-next-goal*loop-exit
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name select-next-goal
         ^has-conditions true
         ^next-goal-type loop-exit)
   (<o2> ^name select-next-goal
         ^has-conditions true
         ^next-goal-type <> loop-exit)
-->
   (<s> ^operator <o1> > <o2>)
}

# Prefer select-next-goal if it has conditions over default
sp {subproblem*execute*prefer*select-next-goal*with*conditions
   (state <s> ^problem-space.subproblem execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name select-next-goal
         ^has-conditions true)
   (<o2> ^name select-next-goal
         ^has-conditions false)
-->
   (<s> ^operator <o1> > <o2>)
}

# Reject select-next-goal if the agent is waiting after a command
sp {subproblem*execute*reject*select-next-goal*waiting-after-command
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
              ^waiting-after-command true)
   (<o> ^name select-next-goal)
-->
   (<s> ^operator <o> -)
}

# Reject select-next-goal if the agent is doing a maintenance goal
sp {subproblem*execute*reject*select-next-goal*active-ongoing-goal
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
              ^active-ongoing-goal true)
   (<o> ^name select-next-goal)
-->
   (<s> ^operator <o> -)
}

# Reject if interrupt-task
sp {subproblem*execute*reject*select-next-goal*interrupt-task
   (state <s> ^problem-space.subproblem execute
              ^operator <o> +
              ^current-task-segment <seg>)
   (<o> ^name select-next-goal
        ^next-goal-handle <goal-h>)
   (<seg> ^interrupt-task true
         -^new-goal-handle <goal-h>)
-->
   (<s> ^operator <o> -)
   (<s> ^interrupted-next-goal <goal-h>)
}

######################## APPLY ##########################

### Only fire these application once a chunk has been learned
# (Will create ^apply-select-next-goal true flag on the state)

# Change the goal handle on the current-task-segment
sp {subproblem*execute*apply*select-next-goal*change*current-goal*on*current-task-segment
   (state <s> ^operator <o>
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<o> ^name select-next-goal
        ^next-goal-handle <goal-h>)
   (<seg> ^current-goal <goal>)
   (<goal> ^handle <> <goal-h>)
-->
   (<seg> ^current-goal <goal> -
          ^current-goal.handle <goal-h>)
}

# Remove the apply-select-next-goal flag (means we learned the application rule)
sp {subproblem*execute*apply*select-next-goal*remove*apply-select-next-goal
   (state <s> ^operator.name select-next-goal
              ^apply-select-next-goal true)
-->
   (<s> ^apply-select-next-goal true -)
}

# Remove any goal objects from the task-objects set
sp {subproblem*execute*apply*select-next-goal*remove*goal-objects*from*current-task-segment
   (state <s> ^operator.name select-next-goal
              ^apply-select-next-goal true
              ^current-task-segment.task-objects <objs>)
   (<objs> ^goal-object <obj>)
-->
   (<objs> ^goal-object <obj> -)
}

# Remove any ^performed-subtask flags from the current-task-segment
sp {subproblem*execute*apply*select-next-goal*remove*performed-subtasks*from*current-task-segment
   (state <s> ^operator.name select-next-goal
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<seg> ^performed-subtask <sub-h>)
-->
   (<seg> ^performed-subtask <sub-h> -)
}

# Remove any ^output-commands from the current-task-segment
sp {subproblem*execute*apply*select-next-goal*remove*output-commands*from*current-task-segment
   (state <s> ^operator.name select-next-goal
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<seg> ^<cmd-name> <cmd>)
   (<cmd> ^item-type output-command)
-->
   (<seg> ^<cmd-name> <cmd> -)
}

# Remove any output-commands from the output link
sp {subproblem*execute*apply*select-next-goal*remove*output-commands*from*output-link
   (state <s> ^operator.name select-next-goal
              ^apply-select-next-goal true
              ^io.output-link <out>
              ^current-task-segment.<cmd-name> <cmd>)
   (<out> ^<io-cmd> <cmd>)
   (<cmd> ^item-type output-command)
-->
   (<out> ^<io-cmd> <cmd> -)
}

# Remove a finish-task flag on the current-task-segment
sp {subproblem*execute*apply*select-next-goal*remove*finish-task*from*current-task-segment
   (state <s> ^problem-space.subproblem execute
              ^operator.name select-next-goal
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<seg> ^finish-task true)
-->
   (<seg> ^finish-task true -)
}

# Remove a matching new-goal-handle from the current-task-segment
sp {subproblem*execute*apply*select-next-goal*remove*new-goal-handle*from*current-task-segment
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<o> ^name select-next-goal
        ^next-goal-handle <goal-h>)
   (<seg> ^new-goal-handle <goal-h>)
-->
   (<seg> ^new-goal-handle <goal-h> -)
}

# If we are selecting a repeat node, increment a loop counter
sp {subproblem*execute*apply*select-next-goal*repeat-node*set*loop-count*0
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<o> ^name select-next-goal
        ^next-goal-type repeat-goal)
   (<seg> -^loop-counter)
-->
   (<seg> ^loop-counter 0)
}
sp {subproblem*execute*apply*select-next-goal*repeat-node*set*loop-count*increment
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<o> ^name select-next-goal
        ^next-goal-type repeat-goal)
   (<seg> ^loop-counter <n>)
-->
   (<seg> ^loop-counter <n> -
          ^loop-counter (+ <n> 1))
}

# If we are finishing a task with a single repeat end-clause, increment a loop counter
sp {subproblem*execute*apply*select-next-goal*terminal*repeat*task*set*loop-count*0
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^task-operator.end-clause.<pnum> <gp>
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<o> ^name select-next-goal
        ^next-goal-type terminal-goal)
   (<gp> ^type duration ^unit times)
   (<seg> -^loop-counter)
-->
   (<seg> ^loop-counter 1)
}
sp {subproblem*execute*apply*select-next-goal*terminal*repeat*task*set*loop-count*increment
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^task-operator.end-clause.<pnum> <gp>
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<o> ^name select-next-goal
        ^next-goal-type terminal-goal)
   (<gp> ^type duration ^unit times)
   (<seg> ^loop-counter <n>)
-->
   (<seg> ^loop-counter <n> -
          ^loop-counter (+ <n> 1))
}

# If we are exiting a loop, clear the counter
sp {subproblem*execute*apply*select-next-goal*repeat-node*clear*loop-counter
   (state <s> ^problem-space.subproblem execute
              ^operator <o>
              ^apply-select-next-goal true
              ^current-task-segment <seg>)
   (<o> ^name select-next-goal
        ^next-goal-type loop-exit)
   (<seg> ^loop-counter <n>)
-->
   (<seg> ^loop-counter <n> -)
}

######################    LEARN APPLY   ########################
# This will learn an application rule which will change the goal is one step

# Elaborate problem-space, turn learning on
sp {subproblem*execute*select-next-goal*force-learn
   (state <s> ^name select-next-goal)
-->
   (<s> ^default-problem-space no)
   (force-learn <s>)
}

# Elaborate superstate info

sp {subproblem*execute*select-next-goal*elaborate*next-goal-handle
   (state <s> ^name select-next-goal
              ^superstate.operator.next-goal-handle <goal-h>)
-->
   (<s> ^next-goal-handle <goal-h>)
}

# Elaborate the current-goal-handle from the current-task-segment
sp {subproblem*execute*select-next-goal*elaborate*current-goal-handle
   (state <s> ^name select-next-goal
              ^superstate.current-task-segment.current-goal.handle <goal-h>)
-->
   (<s> ^current-goal-handle <goal-h>)
}

# Elaborate task-operator
sp {subproblem*execute*select-next-goal*elaborate*task-operator
   (state <s> ^name select-next-goal
              ^superstate.task-operator <task-op>)
-->
   (<s> ^task-operator <task-op>)
}

# Elaborate task-handle from task-operator
sp {subproblem*execute*select-next-goal*elaborate*task-handle
   (state <s> ^name select-next-goal
              ^task-operator.task-handle <task-h>)
-->
   (<s> ^task-handle <task-h>)
}

#### SMEM RETRIEVALS

# Retrieve the goal node from smem
sp {subproblem*execute*select-next-goal*retrieve*next-goal-id
   (state <s> ^name select-next-goal
              ^next-goal-handle <goal-h>)
-->
  (<s> ^smem-query <query>)
  (<query> ^cue.handle <goal-h>
           ^depth 5
           ^destination <s>
           ^result-name next-goal-id)
}

# Retrieve the current goal node from smem
sp {subproblem*execute*select-next-goal*retrieve*cur-goal-id
   (state <s> ^name select-next-goal
              ^current-goal-handle <goal-h>)
-->
  (<s> ^smem-query <query>)
  (<query> ^cue.handle <goal-h>
           ^depth 3
           ^destination <s>
           ^result-name cur-goal-id)
}

# Retrieve the task-concept-network from smem
sp {subproblem*execute*select-next-goal*retrieve*TCN
   (state <s> ^name select-next-goal
              ^task-handle <task-h>)
-->
   (<s> ^smem-query <query>)
   (<query> ^cue <cue>
            ^depth 8
            ^destination <s>
            ^result-name task-concept-network)
   (<cue> ^handle <task-h>)
}

# If the goal is a subtask goal, retrieve its TCN too
sp {subproblem*execute*select-next-goal*retrieve*subtask-tcn
   (state <s> ^name select-next-goal
              ^next-goal-id.<num> <goal-pred>)
   (<goal-pred> ^type subtask
                ^subtask-handle <sub-h>)
-->
   (<s> ^smem-query <query>)
   (<query> ^cue <cue>
            ^depth 8
            ^destination <s>
            ^result-name subtask-tcn)
   (<cue> ^handle <sub-h>)
}


#### ELABORATE OBJECT SLOTS

# Find all objects that are involved with the goal
sp {subproblem*execute*select-next-goal*elaborate*object-slot
   (state <s> ^name select-next-goal
              ^next-goal-id.{ << 1 2 3 4 5 >> } <gp>
              ^task-concept-network.procedural <proc>)
   (<gp> ^type << unary relation >>
         ^{ << 1 2 >> } <obj-slot>)
-->
   (<s> ^object-slot <obj-slot>)
}

# Find all objects that are involved with a subtask goal
sp {subproblem*execute*select-next-goal*elaborate*object-slot*subtask*object*perm*remember
   (state <s> ^name select-next-goal
              ^subtask-tcn <sub-tcn>)
   (<sub-tcn> ^op_name op_remember1
              ^arg1.id <obj1>
              ^arg3.id <obj3>)
-->
   (<s> ^object-slot <obj1> <obj3>)
}

sp {subproblem*execute*select-next-goal*elaborate*object-slot*subtask*object*remember
   (state <s> ^name select-next-goal
              ^subtask-tcn <sub-tcn>)
   (<sub-tcn> ^op_name op_remember1
              ^arg1.id <obj1>
              ^arg2.id <obj2>
             -^arg3)
-->
   (<s> ^object-slot <obj1> <obj2>)
}

sp {subproblem*execute*select-next-goal*elaborate*object-slot*subtask*object
   (state <s> ^name select-next-goal
              ^subtask-tcn <sub-tcn>)
   (<sub-tcn> -^op_name op_remember1
               ^<arg-name> <arg>)
   (<arg> ^arg-type object
         -^abstract true
          ^id <obj-slot>)
-->
   (<s> ^object-slot <obj-slot>)
}

sp {subproblem*execute*select-next-goal*elaborate*object-slot*subtask*partial-predicate
   (state <s> ^name select-next-goal
              ^subtask-tcn <sub-tcn>)
   (<sub-tcn> ^<arg-name> <arg>)
   (<arg> ^arg-type partial-predicate
         -^abstract true
          ^{2} <obj-slot>)
-->
   (<s> ^object-slot <obj-slot>)
}

sp {subproblem*execute*select-next-goal*elaborate*object-slot*subtask*temporal-clause*argument
   (state <s> ^name select-next-goal
              ^subtask-tcn <sub-tcn>)
   (<sub-tcn> ^<arg-name> <arg>)
   (<arg> ^arg-type temporal-clause
          ^<pnum> <pred>)
   (<pred> ^type << unary relation >>
           ^{ << 1 2 >> } <obj-slot>)
-->
   (<s> ^object-slot <obj-slot>)
}

# Object slots that also appear on the task-operator are explicit
sp {subproblem*execute*select-next-goal*elaborate*explicit-object-slot
   (state <s> ^name select-next-goal
              ^object-slot <obj-slot>
              ^task-concept-network.procedural <proc>
              ^task-operator.<arg-name>)
   (<proc> ^<arg-name> <parg>)
   (<parg> ^<slot-name> { @ <obj-slot> })
-->
   (<s> ^explicit-object-slot <obj-slot>)
}

# Object slots that do not appear on the task-operator are implicit
# Note: We are doing a -^explicit-object-slot test intead 
#       directly testing that the slot doesn't appear on the task-operator
#       because soar crashes if we do that :(
# ENUMERATE default object predicates 1-5

sp {subproblem*execute*select-next-goal*elaborate*implicit-object*1*pred
   (state <s> ^name select-next-goal
              ^object-slot <obj-slot>
             -^explicit-object-slot <obj-slot>)
   (<obj-slot> ^default <def>)
   (<def> ^<prop1> <pred1>
         -^{ <prop2> <> <prop1> })
-->
   (<s> ^implicit-object <obj>)
   (<obj> ^default <def-copy>)
   (<def-copy> ^<prop1> <pred1>)
}

sp {subproblem*execute*select-next-goal*elaborate*implicit-object*2*pred
   (state <s> ^name select-next-goal
              ^object-slot <obj-slot>
             -^explicit-object-slot <obj-slot>)
   (<obj-slot> ^default <def>)
   (<def> ^{ <prop1>           } <pred1>
          ^{ <prop2> > <prop1> } <pred2>
         -^{ <prop3> <> <prop2> <> <prop1> })
-->
   (<s> ^implicit-object <obj>)
   (<obj> ^default <def-copy>)
   (<def-copy> ^<prop1> <pred1>
               ^<prop2> <pred2>)
}

sp {subproblem*execute*select-next-goal*elaborate*implicit-object*3*pred
   (state <s> ^name select-next-goal
              ^object-slot <obj-slot>
             -^explicit-object-slot <obj-slot>)
   (<obj-slot> ^default <def>)
   (<def> ^{ <prop1>           } <pred1>
          ^{ <prop2> > <prop1> } <pred2>
          ^{ <prop3> > <prop2> } <pred3>
         -^{ <prop4> <> <prop3> <> <prop2> <> <prop1> })
-->
   (<s> ^implicit-object <obj>)
   (<obj> ^default <def-copy>)
   (<def-copy> ^<prop1> <pred1>
               ^<prop2> <pred2>
               ^<prop3> <pred3>)
}

sp {subproblem*execute*select-next-goal*elaborate*implicit-object*4*pred
   (state <s> ^name select-next-goal
              ^object-slot <obj-slot>
             -^explicit-object-slot <obj-slot>)
   (<obj-slot> ^default <def>)
   (<def> ^{ <prop1>           } <pred1>
          ^{ <prop2> > <prop1> } <pred2>
          ^{ <prop3> > <prop2> } <pred3>
          ^{ <prop4> > <prop3> } <pred4>
         -^{ <prop5> <> <prop4> <> <prop3> <> <prop2> <> <prop1> })
-->
   (<s> ^implicit-object <obj>)
   (<obj> ^default <def-copy>)
   (<def-copy> ^<prop1> <pred1>
               ^<prop2> <pred2>
               ^<prop3> <pred3>
               ^<prop4> <pred4>)
}

sp {subproblem*execute*select-next-goal*elaborate*implicit-object*5*pred
   (state <s> ^name select-next-goal
              ^object-slot <obj-slot>
             -^explicit-object-slot <obj-slot>)
   (<obj-slot> ^default <def>)
   (<def> ^{ <prop1>           } <pred1>
          ^{ <prop2> > <prop1> } <pred2>
          ^{ <prop3> > <prop2> } <pred3>
          ^{ <prop4> > <prop3> } <pred4>
          ^{ <prop5> > <prop4> } <pred5>
         -^{ <prop6> <> <prop5> <> <prop4> <> <prop3> <> <prop2> <> <prop1> })
-->
   (<s> ^implicit-object <obj>)
   (<obj> ^default <def-copy>)
   (<def-copy> ^<prop1> <pred1>
               ^<prop2> <pred2>
               ^<prop3> <pred3>
               ^<prop4> <pred4>
               ^<prop5> <pred5>)
}

#### Learn the select-next-goal apply rule

### Operator learn-apply-rule
sp {subproblem*execute*select-next-goal*propose*learn-apply-rule
   (state <s> ^name select-next-goal
              ^task-handle <task-h>
              ^task-concept-network.handle <task-h>
              ^next-goal-handle <goal-h>
              ^next-goal-id.handle <goal-h>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-apply-rule)
}


# ENUMERATE: 0-3 implicit objects on a goal

sp {subproblem*execute*apply*select-next-goal*change*current-goal*0*implicit
   (state <s> ^name select-next-goal
              ^operator.name learn-apply-rule
              ^superstate <ss>
              ^next-goal-handle <goal-h>
             -^implicit-object)
-->
   (<ss> ^apply-select-next-goal true)
}

sp {subproblem*execute*apply*select-next-goal*change*current-goal*1*implicit
   (state <s> ^name select-next-goal
              ^operator.name learn-apply-rule
              ^superstate <ss>
              ^next-goal-handle <goal-h>
              ^task-operator <task-op>
              ^implicit-object   <obj1>
             -^implicit-object { <obj2> <> <obj1> })
   (<ss> ^current-task-segment <seg>)
   (<seg> ^current-goal.handle { <cur-goal-h> <> <goal-h> })
-->
   (<ss> ^apply-select-next-goal true)
   (<seg> ^implicit-object <obj1>)
}

sp {subproblem*execute*apply*select-next-goal*change*current-goal*2*implicit
   (state <s> ^name select-next-goal
              ^operator.name learn-apply-rule
              ^superstate <ss>
              ^next-goal-handle <goal-h>
              ^task-operator <task-op>
              ^implicit-object <obj1>
              ^implicit-object { <obj2> > <obj1> }
             -^implicit-object { <obj3> <> <obj2> <> <obj1> })
   (<ss> ^current-task-segment <seg>)
   (<seg> ^current-goal.handle { <cur-goal-h> <> <goal-h> })
-->
   (<ss> ^apply-select-next-goal true)
   (<seg> ^implicit-object <obj1> <obj2>)
}

sp {subproblem*execute*apply*select-next-goal*change*current-goal*3*implicit
   (state <s> ^name select-next-goal
              ^operator.name learn-apply-rule
              ^superstate <ss>
              ^next-goal-handle <goal-h>
              ^task-operator <task-op>
              ^implicit-object <obj1>
              ^implicit-object { <obj2> > <obj1> }
              ^implicit-object { <obj3> > <obj2> }
             -^implicit-object { <obj4> <> <obj3> <> <obj2> <> <obj1> })
   (<ss> ^current-task-segment <seg>)
   (<seg> ^current-goal.handle { <cur-goal-h> <> <goal-h> })
-->
   (<ss> ^apply-select-next-goal true)
   (<seg> ^implicit-object <obj1> <obj2> <obj3>)
}

