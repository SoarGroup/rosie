sp {add-subtask-to-tcn*propose*store-task-subtask
  (state <s> ^name add-subtask-to-tcn
             ^task-concept-network.procedural <proc>
             ^subtask-structure <sub>)
-->
  (<s> ^operator <o> + >)
  (<o> ^name store-task-subtask
       ^procedural <proc>
       ^subtask <sub>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*create*subtasks*on*procedural
   (state <s> ^name add-subtask-to-tcn
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-task-subtask
        ^procedural <proc>)
   (<proc> -^subtasks <subs>)
-->
   (<proc> ^subtasks <subs>)
   (<cmd> ^store <proc>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*store*to-store
   (state <s> ^name add-subtask-to-tcn
              ^operator.name store-task-subtask
              ^smem.command <cmd>
              ^to-store <lti>)
-->
   (<cmd> ^store <lti>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*store*root
   (state <s> ^name add-subtask-to-tcn
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-task-subtask
        ^subtask <sub>
        ^procedural.subtasks <subs>)
-->
   (<subs> ^subtask <sub>)
   (<cmd> ^store <subs> <sub>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*argument
   (state <s> ^name add-subtask-to-tcn
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-task-subtask
        ^subtask.<arg-name> <arg>)
   (<arg> ^arg-type <any>)
-->
   (<cmd> ^store <arg>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*arg*slots
   (state <s> ^name add-subtask-to-tcn
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-task-subtask
        ^subtask.<arg-name>.{ << id 1 2 3 4 5 predicate >> } <slot>)
-->
   (<cmd> ^store <slot>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*predicate*arg*default
   (state <s> ^name add-subtask-to-tcn
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-task-subtask
        ^subtask.<arg-name>.{ << id 1 2 3 4 5 >> }.{ << default imagined >> } <def>)
-->
   (<cmd> ^store <def>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*arg*predicate*slot
   (state <s> ^name add-subtask-to-tcn
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-task-subtask
        ^subtask.<arg-name>.{ << 1 2 3 4 5 >> }.{ << id 1 2 3 4 5 >> } <slot>)
-->
   (<cmd> ^store <slot>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*predicate*arg*predicate*default
   (state <s> ^name add-subtask-to-tcn
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-task-subtask
        ^subtask.<arg-name>.{ << 1 2 3 4 5 >> }.{ << id 1 2 3 4 5 >> }.{ << default imagined >> } <def>)
-->
   (<cmd> ^store <def>)
}

sp {add-subtask-to-tcn*apply*store-task-subtask*success*return*created-subtask
   (state <s> ^name add-subtask-to-tcn
             ^operator <o>
             ^subtask-structure <sub>
             ^smem.result.success <sub>
             ^superstate <ss>)
   (<o> ^name store-task-subtask
        ^subtask <sub>)
   (<sub> ^handle <h>)
-->
   (<ss> ^created-subtask <h>)
}
