source elaborations.soar
source problem-space.soar
source preferences.soar

# Rules for evaluating a predicate-test against the current world state
# (For example, whether the goal is satisfied)
source predicate-test.soar


######### Impasse Handling #########
# Much of the task learning happens when an impasse occurs

pushd Impasse__Operator-No-Change
source Impasse__Operator-No-Change_source.soar
popd

pushd Impasse__Operator-Tie
source Impasse__Operator-Tie_source.soar
popd

pushd Impasse__State-No-Change
source Impasse__State-No-Change_source.soar
popd



### utility operators for dealing with tasks, TCNs, and the task-stack
pushd task-utils
source task-utils_source.soar
popd


### Implementations of the tasks the agent starts knowing how to perform
pushd task-implementations
source task-implementations_source.soar
popd


### Implementation of the retrospective-learning operator
pushd retrospective-learning
source retrospective-learning_source.soar
popd


######### Subproblems (different modes in the action problem-space) #########

# execute - try to actually execute the task in the world
pushd subproblem-execute
source subproblem-execute_source.soar
popd

# retrospective - try to learn a task policy after it is complete
pushd subproblem-retrospective
source subproblem-retrospective_source.soar
popd

# search - use planning to try and find the next subtask to do 
pushd subproblem-search
source subproblem-search_source.soar
popd

# waypoint-search - do an A* search to find a shortest path through a waypoint graph
# (used when searching for how to get to another location in the map)
pushd subproblem-waypoint-search
source subproblem-waypoint-search_source.soar
popd

