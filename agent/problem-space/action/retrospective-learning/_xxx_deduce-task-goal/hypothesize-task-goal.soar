sp {hypothesize-task-goal*propose*complete
   (state <s> ^name hypothesize-task-goal)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete)
}

sp {hypothesize-task-goal*apply*complete*dialog-context
   (state <s> ^name hypothesize-task-goal
              ^top-state <ts>
              ^goal-state <gs>
              ^final-state <fs>
              ^operator.name complete
              #^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
-->
   (<ts> ^dialog-context <dc>)
   (<dc> ^goal-relationships <gs> ^ignore <ig> ^attend <at> ^initial <is> ^final <fs> ^goal-state <g22>)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type describe-goal-state
          ^complete-message true
          ^fields <f>)
   (<f> ^relationships <gs> ^definitive yes)
   (<changes> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type wait-for-goal-response
        ^originator agent
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event <de>)
   (<de> ^type finished #parse complete after attend/ignreo/done
          ^originator instructor)
}

sp {hypothesize-task-goal*elaborate*goal-state
   (state <s> ^name hypothesize-task-goal)
-->
   (<s> ^goal-state <gs>
        ^final-state <fs>
        ^object-predicates <op>)
   (<fs> ^objects <objs> ^predicate-set <ps> ^relationships <rel>)
   
}


sp {hypothesize-task-goal*elaborate*objects
   (state <s> ^name hypothesize-task-goal
              ^superstate.goal-predicates.goal-predicate <p>
              #^operator.name hypothesize-task-goal
              ^object-predicates <preds>
              ^final-state.objects <objs>
              ^top-state.world.objects.object <obj1>)
   (<p> ^<< 1 2 >> <obj1-handle>)
   (<obj1> ^handle <obj1-handle>)
-->
   (<objs> ^object <obj1>)
}
sp {hypothesize-task-goal*elaborate*object-predicates
   (state <s> ^name hypothesize-task-goal
              ^object-predicates <preds>
              ^final-state.objects.object <obj>)
-->
   (<preds> ^<obj> <description>)
}


#need to describe all objects mentioned
#TODO better to use words person used, how to recover?
sp {deduce-task-goal*apply*hypothesize-task-goal*copy*goal-predicate*unary
   (state <s> ^name hypothesize-task-goal
           #   ^operator.name complete
            #  ^superstate.goal-predicates.goal-predicate <pred>
              ^object-predicates.<obj1> <desc>
              ^goal-state <gs>
              ^final-state.predicate-set <ps>
              ^top-state.world.objects.object <obj1>)
#   (<pred> ^type unary
#           ^handle <pred-handle>
#           ^1 <obj1-handle>)
   (<obj1> ^handle <obj1-handle> ^predicates.{<attr> <> door1 <> movable <> indicated <> object-handle <> category <> is-grabbed1 <> dialog-object <> value <> handle <> type <> is-visible1 <> multiple <> number} {<val> <> grid-green}) 
-->
   (<desc> ^<attr> <val>)
   (<ps> ^predicate <pred>)
   (<pred> ^name <attr> ^value <val> ^object <obj1>)
#   (<gs> ^predicate <new-pred>)
#   (<new-pred> ^type unary
#               ^handle <pred-handle>
#               ^1 <obj1>)
}

sp {hypothesize-task-goal*copy*goal-predicate*relations
   (state <s> ^name hypothesize-task-goal
             # ^operator.name hypothesize-task-goal
              ^superstate.goal-predicates.goal-predicate <pred>
              ^goal-state <gs>
              ^object-predicates <p>
              ^final-state.relationships <rels>
              ^top-state.world.objects.object <obj1>
              ^top-state.world.objects.object <obj2>)
   (<pred> ^type relation
           ^handle <pred-handle>
           ^1 <obj1-handle>
           ^2 <obj2-handle>)
   (<p> ^<obj1> <desc1> ^<obj2> <desc2>)
   (<obj1> ^handle <obj1-handle>)
   (<obj2> ^handle <obj2-handle>)
-->
   (<rels> ^relations <r>)
   (<r> ^name <pred-handle> ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
   (<gs> ^relation <new-pred>)
   (<new-pred> ^name <pred-handle>
               ^1 <desc1>
               ^2 <desc2>)
}

sp {hypothesize-task-goal*copy*goal-predicate*relation*unary
   (state <s> ^name hypothesize-task-goal
             # ^operator.name hypothesize-task-goal
              ^superstate.goal-predicates.goal-predicate <pred>
              ^goal-state <gs>
              ^object-predicates <p>
              ^final-state.relationships <rels>
              ^top-state.world.objects.object <obj1>)
   (<pred> ^type unary
           ^handle <pred-handle>
           ^1 <obj1-handle>)
   (<p> ^<obj1> <desc1>)
   (<obj1> ^handle <obj1-handle>)
-->
   (<rels> ^relations <r>)
   (<r> ^name <pred-handle> ^instance <i>)
   (<i> ^1 <obj1>)
   (<gs> ^relation <new-pred>)
   (<new-pred> ^name <pred-handle>
               ^1 <desc1>)
}
