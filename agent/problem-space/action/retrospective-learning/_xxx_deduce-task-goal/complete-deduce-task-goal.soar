sp {deduce-task-goal*propose*complete-deduce-task-goal
   (state <s> ^name deduce-task-goal
              ^subtasks.next none)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-deduce-task-goal)
}

sp {deduce-task-goal*propose*hypothesize-task-goal
   :interrupt
   (state <s> ^name deduce-task-goal
              ^subtasks.next none)
-->
   (<s> ^operator <o> + <)
   (<o> ^name hypothesize-task-goal)
}

sp {prefer*hypothesize-task-goal*over*complete-deduce-task-goal
   (state <s> ^name deduce-task-goal
              ^operator <o1> +
              ^operator <o2> +)
   (<o2> ^name complete-deduce-task-goal)
   (<o1> ^name hypothesize-task-goal)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {deduce-task-goal*apply*complete-deduce-task-goal
   :interrupt
   (state <s> ^name deduce-task-goal
              ^operator.name complete-deduce-task-goal)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-goal-definition
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type goal)
}

sp {deduce-task-goal*apply*complete-deduce-task-goal*copy*goal-predicate*unary
   (state <s> ^name deduce-task-goal
              ^operator.name complete-deduce-task-goal
              ^goal-predicates.goal-predicate <pred>
              ^new-segment-info.purpose.parameters <params>
              ^top-state.world.objects.object <obj1>)
   (<pred> ^type unary
           ^handle <pred-handle>
           ^property-handle <prop-handle>
           ^1 <obj1-handle>)
   (<obj1> ^handle <obj1-handle>)
-->
   (<params> ^goal-predicate <new-pred>)
   (<new-pred> ^type unary
               ^handle <pred-handle>
               ^property-handle <prop-handle>
               ^1 <obj1>)
}

sp {deduce-task-goal*apply*complete-deduce-task-goal*copy*goal-predicate*relation
   (state <s> ^name deduce-task-goal
              ^operator.name complete-deduce-task-goal
              ^goal-predicates.goal-predicate <pred>
              ^new-segment-info.purpose.parameters <params>
              ^top-state.world.objects.object <obj1>
              ^top-state.world.objects.object <obj2>)
   (<pred> ^type relation
           ^handle <pred-handle>
           ^1 <obj1-handle>
           ^2 <obj2-handle>)
   (<obj1> ^handle <obj1-handle>)
   (<obj2> ^handle <obj2-handle>)
-->
   (<params> ^goal-predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred-handle>
               ^1 <obj1>
               ^2 <obj2>)
}

sp {deduce-task-goal*apply*complete-deduce-task-goal*create*new-segment
   (state <s> ^name deduce-task-goal
              ^operator.name complete-deduce-task-goal
              ^top-state.interaction.changes <c>
              ^new-segment-info <info>)
   (<info> ^purpose.parameters.goal-predicate <pred>)
-->
   (<c> ^new-segment-info <info>)
}
