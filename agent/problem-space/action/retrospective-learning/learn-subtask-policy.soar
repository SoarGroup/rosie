sp {retrospective-learning*propose*learn-subtask-policy
   (state <s> ^name retrospective-learning
              ^subtask-episode <ep>
             -^policy-learning-result)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-subtask-policy
        ^subtask-episode <ep>)
}

#sp {retrospective-learning*apply*learn-subtask-policy*put-down
#   (state <s> ^name retrospective-learning
#              ^operator <o>)
#   (<o> ^name learn-subtask-policy
#        ^subtask-episode.task-stack.bottom.task-operator.task-handle put-down1)
#-->
#   (<s> ^policy-learning-result success)
#}
#
#sp {chunkx2*__PROP__SUBT__*problem-space*action*propose*subtask*3*OpNoChange*t1065-1*DUP
#    :chunk
#    (state <s1> ^task-operator <t1> ^name <n1> ^problem-space <p1> ^world <w1>)
#    (<t1> ^task-handle move1 ^arg1 <src-arg3> ^name <n1>)
#    (<src-arg3> ^arg-type object ^id <obj>)
#    (<p1> ^name action)
#    (<w1> ^objects <o1>)
#    (<o1> ^object <obj>)
#    (<obj> ^predicates <p2>)
#    (<p2> ^is-grabbed1 grabbed1)
#    -->
#    (<s1> ^operator <o2> +)
#    (<o2> ^task-handle put-down1 ^item-type task-operator ^name op_put-down1
#           ^arg1 <arg1> ^subtask-handle subtask5)
#    (<arg1> ^id <obj> ^arg-type object)
#}
