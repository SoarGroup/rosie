####################### predicate-test ###########################
#
# These rules will check if an predicate-test on the state is satisfed
#
# They fire if an predicate-test structure is on the state
#   (state <s> ^predicate-test <pt>)
#   (<pt> ^prediate <pred>)  # Can be more than 1 predicate
#   (<pred> ^type << state relation >>
#           ^handle <pred-handle>
#           ^1 <obj1>
#           ^2 <obj2>) # may have 2 or more arguments if a relation
# Will elaborate each predicate with ^satisfied true, 
#   and elaborates the predicate-test with ^satisfied true if all predicates are satisfied

#   Also expects the following on the state: 
#     world

# Elaborate the desired goal as a predicate-test
sp {problem-space*action*elaborate*predicate-test*from*desired
   (state <s> ^problem-space.name action
              ^desired <d>)
   (<d> ^pred-count <c>)
-->
   (<s> ^predicate-test <d>)
}

sp {problem-space*action*elaborate*desired*satisfied*from*predicate-test
   (state <s> ^problem-space.name action
              ^desired <d>
              ^satisfied <d>)
-->
   (<d> ^satisfied true)
}

# If we are doing a search and the ^interrupt-task-search flag is present,
#   then if the goal is satisfied trigger an interrupt
sp {DEBUG*interrupt-task-search
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^problem-space.subproblem search
              ^agent-params.interrupt-task-search true
              ^desired <d>)
   (<d> ^satisfied true)
-->
   (write (crlf) |!!! TASK GOAL ACHIEVED !!!| (crlf))
   (interrupt)
}


### Start, Intermediate, or Terminal goal nodes are always satisfied

sp {problem-space*action*elaborate*desired*start-goal*satisfied
   (state <s> ^problem-space.name action
              ^desired <des>
              ^task-operator <task-op>)
   (<des> ^item-type start-goal)
   (<task-op> -^start-clause)
-->
   (<des> ^satisfied true)
}

sp {problem-space*action*elaborate*desired*start-goal*satisfied*start-clause
   (state <s> ^problem-space.name action
              ^desired <des>
              ^task-operator.start-clause <cl>
              ^satisfied <cl>)
   (<des> ^item-type start-goal)
-->
   (<des> ^satisfied true)
}

sp {problem-space*action*elaborate*desired*terminal
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^item-type terminal-goal)
-->
   (<des> ^satisfied true)
}


############# Satisfying Different Predicate Types #################

# type = unary, a single predicate on an object
sp {problem-space*action*elaborate*predicate-test*state*predicate*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pred>
              ^world.objects.object <obj>)
   (<pred> ^type unary
           ^handle <pred-handle>
           ^property-handle <prop-handle>
           ^{1} <obj>)
   (<obj> ^predicates <obj-preds>)
   (<obj-preds> ^<prop-handle> <pred-handle>)
-->
   (<s> ^satisfied <pred>)
}
# with merged-into link
sp {problem-space*action*elaborate*predicate-test*state*predicate*satisfied*merged-into
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pred>
              ^world.objects.object <obj>)
   (<pred> ^type unary
           ^handle <pred-handle>
           ^property-handle <prop-handle>
           ^{1}.merged-into <obj>)
   (<obj> ^predicates <obj-preds>)
   (<obj-preds> ^<prop-handle> <pred-handle>)
-->
   (<s> ^satisfied <pred>)
}

# type = relation, a binary relation between two objects
sp {problem-space*action*elaborate*predicate-test*state*relation*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^world <world>)
   (<pt-pred> ^type relation
           ^handle <pred-handle>
           ^1 <obj1>
           ^2 <obj2>)
   (<world> ^predicates.predicate <pred>)
   #            ^objects.object <obj1>
   #            ^objects.object <obj2>)
   (<pred> ^handle <pred-handle>
           ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
-->
   (<s> ^satisfied <pt-pred>)
}

### relation special case - contains
# If we're looking for the goal contains1(obj, <liquid>)
#   then if the object has the predicate ^contents1 <liquid> it is satisfied
sp {problem-space*action*elaborate*predicate-test*state*contains*relation*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^world <world>)
   (<pt-pred> ^type relation
           ^handle contains1
           ^1 <obj1>
           ^{2}.root-category <liquid>)
   (<obj1> ^predicates <preds>)
   (<preds> ^contents1 <liquid>)
-->
   (<s> ^satisfied <pt-pred>)
}

## merged-into 1
#sp {problem-space*action*elaborate*predicate-test*state*relation*satisfied*marged-into*1
#   (state <s> ^problem-space.name action
#              ^predicate-test.<pred-num> <pt-pred>
#              ^world <world>)
#   (<pt-pred> ^type relation
#           ^handle <pred-handle>
#           ^{1}.merged-into <obj1>
#           ^2 <obj2>)
#   (<world> ^predicates.predicate <pred>
#            ^objects.object <obj1>
#            ^objects.object <obj2>)
#   (<pred> ^handle <pred-handle>
#           ^instance <i>)
#   (<i> ^1 <obj1> ^2 <obj2>)
#-->
#   (<s> ^satisfied <pt-pred>)
#}
## merged-into 2
#sp {problem-space*action*elaborate*predicate-test*state*relation*satisfied*marged-into*2
#   (state <s> ^problem-space.name action
#              ^predicate-test.<pred-num> <pt-pred>
#              ^world <world>)
#   (<pt-pred> ^type relation
#           ^handle <pred-handle>
#           ^{1} <obj1>
#           ^{2}.merged-into <obj2>)
#   (<world> ^predicates.predicate <pred>
#            ^objects.object <obj1>
#            ^objects.object <obj2>)
#   (<pred> ^handle <pred-handle>
#           ^instance <i>)
#   (<i> ^1 <obj1> ^2 <obj2>)
#-->
#   (<s> ^satisfied <pt-pred>)
#}
#
# type = status, some status of the robot
sp {problem-space*action*elaborate*predicate-test*status*predicate*satisfied*current-location
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pred>
              ^world.robot.current-location <loc>)
   (<pred> ^type status
           ^name current-location
           ^1 <loc>)
-->
   (<s> ^satisfied <pred>)
}

sp {problem-space*action*elaborate*predicate-test*status*predicate*satisfied*current-waypoint
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pred>
              ^world.robot.current-waypoint <wp>)
   (<pred> ^type status
           ^name current-waypoint
           ^1 <wp>)
-->
   (<s> ^satisfied <pred>)
}

# type = duration, if the specified time has elapsed since the start-time
sp {problem-space*action*elaborate*predicate-test*duration*end-time*seconds
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^current-task-segment.start-time <t>)
   (<pt-pred> ^type duration
              ^unit seconds
              ^number <num>)
-->
   (<pt-pred> ^end-time (+ <t> <num>))
}

sp {problem-space*action*elaborate*predicate-test*duration*end-time*minutes
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^current-task-segment.start-time <t>)
   (<pt-pred> ^type duration
              ^unit minutes
              ^number <num>)
-->
   (<pt-pred> ^end-time (+ <t> (* <num> 60)))
}

sp {problem-space*action*elaborate*predicate-test*duration*end-time*hours
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^current-task-segment.start-time <t>)
   (<pt-pred> ^type duration
              ^unit hours
              ^number <num>)
-->
   (<pt-pred> ^end-time (+ <t> (* <num> 3600)))
}

sp {problem-space*action*elaborate*predicate-test*duration*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^io.input-link.time.clock.epoch <secs>)
   (<pt-pred> ^type duration
              ^end-time <= <secs>)
-->
   (<s> ^satisfied <pt-pred>)
}

sp {problem-space*action*elaborate*predicate-test*duration*times*satisfied*loop-counter
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^current-task-segment.loop-counter >= <n>)
   (<pt-pred> ^type duration
              ^unit times
              ^number <n>)
-->
   (<s> ^satisfied <pt-pred>)
}

# type = clocktime, the current time is after the given time

# same hour, greater minute
sp {problem-space*action*elaborate*predicate-test*clocktime*satisfied*minute
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^io.input-link.time.clock <clock>)
   (<pt-pred> ^type clocktime
              ^hour <hour>
              ^minute <min>)
   (<clock> ^hour <hour>
            ^minute >= <min>)
-->
   (<s> ^satisfied <pt-pred>)
}
# greater hour
sp {problem-space*action*elaborate*predicate-test*clocktime*satisfied*hour
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^io.input-link.time.clock <clock>)
   (<pt-pred> ^type clocktime
              ^hour <hour>)
   (<clock> ^hour > <hour>)
-->
   (<s> ^satisfied <pt-pred>)
}


# type = subtask, a specific subtask was performed
sp {problem-space*action*elaborate*predicate-test*subtask*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^current-task-segment.performed-subtask <sub-h>)
   (<p> ^type subtask
        ^subtask-handle <sub-h>)
-->
   (<s> ^satisfied <p>)
}

sp {evaluate-operator*elaborate*desired*satisfied*if*performed*subtask
   (state <s> ^name evaluate-operator
              ^desired <des>
              ^tried-tied-operator.subtask-handle <sub-h>)
   (<des> ^<pnum> <p>)
   (<p> ^type subtask
        ^subtask-handle <sub-h>)
-->
   (<s> ^satisfied <des>)
}

# type = execute-command, the given command has status success
sp {problem-space*action*elaborate*predicate-test*execute-command*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^current-task-segment.<cmd-name>.status << complete success succeeded >>)
   (<p> ^type execute-command
        ^command-name <cmd-name>)
-->
   (<s> ^satisfied <p>)
}

# type = has-argument, the task-operator has the given argument
sp {problem-space*action*elaborate*predicate-test*has-argument*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^task-operator.<arg-name> <arg>)
   (<p> ^type has-argument
        ^argument-name <arg-name>)
-->
   (<s> ^satisfied <p>)
}

# type = missing-argument, the task-operator does not have the given argument
sp {problem-space*action*elaborate*predicate-test*missing-argument*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^task-operator <task-op>)
   (<p> ^type missing-argument
        ^argument-name <arg-name>)
   (<task-op> -^<arg-name> <arg>)
-->
   (<s> ^satisfied <p>)
}

# type = 
sp {problem-space*action*elaborate*predicate-test*clocktime*satisfied*minute
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <pt-pred>
              ^io.input-link.time.clock <clock>)
   (<pt-pred> ^type clocktime
              ^hour <hour>
              ^minute <min>)
   (<clock> ^hour <hour>
            ^minute >= <min>)
-->
   (<s> ^satisfied <pt-pred>)
}

# @ENUMERATE 1-3 OBJECT-EXISTS PREDICATES

sp {problem-space*action*elaborate*predicate-test*object-exists*1*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^world.objects.object <obj>)
   (<p> ^type object-exists
        ^pred-count 1
        ^1 <p1>)
   (<p1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<obj> ^predicates <obj-preds>)
   (<obj-preds> ^<prop1> <pred1>)
-->
   (<s> ^satisfied <p>)
}

sp {problem-space*action*elaborate*predicate-test*object-exists*2*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^world.objects.object <obj>)
   (<p> ^type object-exists
        ^pred-count 2
        ^1 <p1>
        ^2 <p2>)
   (<p1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<p2> ^property-handle <prop2> ^predicate-handle <pred2>)
   (<obj> ^predicates <obj-preds>)
   (<obj-preds> ^<prop1> <pred1>
                ^<prop2> <pred2>)
-->
   (<s> ^satisfied <p>)
}

sp {problem-space*action*elaborate*predicate-test*object-exists*3*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^world.objects.object <obj>)
   (<p> ^type object-exists
        ^pred-count 3
        ^1 <p1>
        ^2 <p2>
        ^3 <p3>)
   (<p1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<p2> ^property-handle <prop2> ^predicate-handle <pred2>)
   (<p3> ^property-handle <prop3> ^predicate-handle <pred3>)
   (<obj> ^predicates <obj-preds>)
   (<obj-preds> ^<prop1> <pred1>
                ^<prop2> <pred2>
                ^<prop3> <pred3>)
-->
   (<s> ^satisfied <p>)
}

# @ENUMERATE 1-3 OBJECT-MISSING PREDICATES

sp {problem-space*action*elaborate*predicate-test*object-missing*1*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^world.objects <objs>)
   (<p> ^type object-missing
        ^pred-count 1
        ^1 <p1>)
   (<p1> ^property-handle <prop1> ^predicate-handle <pred1>)
 -{(<objs> ^object.predicates <obj-preds>)
   (<obj-preds> ^is-confirmed1 confirmed1
                ^<prop1> <pred1>)}
-->
   (<s> ^satisfied <p>)
}

sp {problem-space*action*elaborate*predicate-test*object-missing*2*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^world.objects <objs>)
   (<p> ^type object-missing
        ^pred-count 2
        ^1 <p1>
        ^2 <p2>)
   (<p1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<p2> ^property-handle <prop2> ^predicate-handle <pred2>)
 -{(<objs> ^object.predicates <obj-preds>)
   (<obj-preds> ^is-confirmed1 confirmed1
                ^<prop1> <pred1>
                ^<prop2> <pred2>)}
-->
   (<s> ^satisfied <p>)
}

sp {problem-space*action*elaborate*predicate-test*object-missing*3*satisfied
   (state <s> ^problem-space.name action
              ^predicate-test.<pred-num> <p>
              ^world.objects <objs>)
   (<p> ^type object-missing
        ^pred-count 3
        ^1 <p1>
        ^2 <p2>
        ^3 <p3>)
   (<p1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<p2> ^property-handle <prop2> ^predicate-handle <pred2>)
   (<p3> ^property-handle <prop3> ^predicate-handle <pred3>)
 -{(<objs> ^object.predicates <obj-preds>)
   (<obj-preds> ^is-confirmed1 confirmed1
                ^<prop1> <pred1>
                ^<prop2> <pred2>
                ^<prop3> <pred3>)}
-->
   (<s> ^satisfied <p>)
}

# @ENUMERATE 1-8 PREDICATE SET PREDICATES

# Empty goal 
sp {problem-space*action*elaborate*desired*empty*goal
   (state <s> ^problem-space.name action
              ^desired <des>)
   (<des> ^pred-count 0)
-->
   (<des> ^satisfied true)
}

# predicate-test with 1 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*1*predicate
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^satisfied <p1>)
   (<pt> ^pred-count 1
         ^1 <p1>)
-->
   (<s> ^satisfied <pt>)
}

# predicate-test with 2 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*2*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^satisfied <p1> <p2>)
   (<pt> ^pred-count 2
         ^1 <p1> 
         ^2 <p2>)
-->
   (<s> ^satisfied <pt>)
}

# predicate-test with 3 predicate is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*3*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^satisfied <p1> <p2> <p3>)
   (<pt> ^pred-count 3
         ^1 <p1> 
         ^2 <p2> 
         ^3 <p3>)
-->
   (<s> ^satisfied <pt>)
}

# predicate-test with 4 predicates is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*4*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^satisfied <p1> <p2> <p3> <p4>)
   (<pt> ^pred-count 4
         ^1 <p1> 
         ^2 <p2> 
         ^3 <p3>
         ^4 <p4>)
-->
   (<s> ^satisfied <pt>)
}

# predicate-test with 5 predicates is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*5*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^satisfied <p1> <p2> <p3> <p4> <p5>)
   (<pt> ^pred-count 5
         ^1 <p1> 
         ^2 <p2> 
         ^3 <p3>
         ^4 <p4>
         ^5 <p5>)
-->
   (<s> ^satisfied <pt>)
}
 
# predicate-test with 6 predicates is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*6*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^satisfied <p1> <p2> <p3> <p4> <p5> <p6>)
   (<pt> ^pred-count 6
         ^1 <p1> 
         ^2 <p2> 
         ^3 <p3>
         ^4 <p4>
         ^5 <p5>
         ^6 <p6>)
-->
   (<s> ^satisfied <pt>)
}

# predicate-test with 7 predicates is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*7*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^satisfied <p1> <p2> <p3> <p4> <p5> <p6> <p7>)
   (<pt> ^pred-count 7
         ^1 <p1> 
         ^2 <p2> 
         ^3 <p3>
         ^4 <p4>
         ^5 <p5>
         ^6 <p6>
         ^7 <p7>)
-->
   (<s> ^satisfied <pt>)
}

# predicate-test with 8 predicates is satisfied
sp {problem-space*action*elaborate*predicate-test*satisfied*8*predicates
   (state <s> ^problem-space.name action
              ^predicate-test <pt>
              ^satisfied <p1> <p2> <p3> <p4> <p5> <p6> <p7> <p8>)
   (<pt> ^pred-count 8
         ^1 <p1> 
         ^2 <p2> 
         ^3 <p3>
         ^4 <p4>
         ^5 <p5>
         ^6 <p6>
         ^7 <p7>
         ^8 <p8>)
-->
   (<s> ^satisfied <pt>)
}
