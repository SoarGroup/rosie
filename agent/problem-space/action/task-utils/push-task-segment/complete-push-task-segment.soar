# once everything is done, push the task onto the stack

sp {task-utils*push-task-segment*propose*complete-push-task-segment
   (state <s> ^name push-task-segment)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-push-task-segment)
}

# push the task on to the stack
sp {task-utils*push-task-segment*apply*complete-push-task-segment*push
   (state <s> ^name push-task-segment
              ^operator.name complete-push-task-segment
              ^task-stack <stack>
              ^segment-to-push <seg>)
   (<stack> ^bottom <bot>)
   (<bot> ^next none)
-->
   (<stack> ^bottom <bot> -
            ^bottom <seg>)
   (<seg> ^next none
          ^prev <bot>)
   (<bot> ^next none -
          ^next <seg>)
}

# if the stack was empty, update the top and bottom 
sp {task-utils*push-task-segment*apply*complete-push-task-segment*push*empty
   (state <s> ^name push-task-segment
              ^operator.name complete-push-task-segment
              ^task-stack <stack>
              ^segment-to-push <seg>)
   (<stack> ^top none
            ^bottom none)
-->
   (<stack> ^top none -
            ^top <seg>
            ^bottom none -
            ^bottom <seg>)
   (<seg> ^next none
          ^prev none)
}

# remove push-task-operator from task-stack
sp {task-utils*push-task-segment*apply*complete-push-task-segment*remove*push-task-operator*task-stack
   (state <s> ^name push-task-segment
              ^operator.name complete-push-task-segment
              ^task-operator <task-op>
              ^task-stack <stack>)
   (<stack> ^push-task-operator <task-op>)
-->
   (<stack> ^push-task-operator <task-op> -)
}

# remove push-task-operator from current-task-segment
sp {task-utils*push-task-segment*apply*complete-push-task-segment*remove*push-task-operator*current-task-segment
   (state <s> ^name push-task-segment
              ^operator.name complete-push-task-segment
              ^task-stack.bottom <seg>
              ^task-operator <task-op>)
   (<seg> ^push-task-operator <task-op>)
-->
   (<seg> ^push-task-operator <task-op> -)
}

sp {task-utils*push-task-segment*apply*complete-push-task-segment*remove*new-subtask*current-task-segment
   (state <s> ^name push-task-segment
              ^operator.name complete-push-task-segment
              ^task-stack.bottom <seg>
              ^task-operator <task-op>)
   (<seg> ^new-subtask <task-op>)
-->
   (<seg> ^new-subtask <task-op> -)
}

# Report to the output link that the task was started
sp {task-utils*push-task-segment*apply*complete-push-task-segment*report-to-output-link
   (state <s> ^name push-task-segment
              ^operator.name complete-push-task-segment
              ^agent-params.report-tasks-to-output-link true
              ^segment-to-push <seg>
              ^top-state.io.output-link <ol>)
-->
   (<ol> ^started-task.segment <seg>)
}

sp {task-utils*push-task-segment*apply*complete-push-task-segment*print*task*segment
   (state <s> ^name push-task-segment
              ^agent-params.print-new-task true
              ^operator.name complete-push-task-segment
              ^segment-to-push <seg>)
   (<seg> ^task-operator <task-op>)
-->
   (write |Pushing a new task segment: | (crlf))
   (write (cmd print <seg> -d 1)  (crlf))
   (write |Action Operator: |  (crlf))
   (write (cmd print <task-op> -d 5)  (crlf))
}

sp {task-utils*push-task-segment*apply*complete-push-task-segment*print*task*1*obj
   (state <s> ^name push-task-segment
              ^agent-params.print-new-task-shorthand true
              ^operator.name complete-push-task-segment
              ^segment-to-push <seg>)
   (<seg> ^task-operator <task-op>)
   (<task-op> ^name <op-name>
           ^<arg1-name> <arg1>
          -^{ <arg2-name> <> <arg1-name> }.arg-type <t2>)
   (<arg1> ^arg-type object ^id.handle <obj>)
-->
   (write (crlf) |!EXECUTE-TASK! | <op-name> | | <obj> (crlf))
}

sp {task-utils*push-task-segment*apply*complete-push-task-segment*print*task*1*pred
   (state <s> ^name push-task-segment
              ^agent-params.print-new-task-shorthand true
              ^operator.name complete-push-task-segment
              ^segment-to-push <seg>)
   (<seg> ^task-operator <task-op>)
   (<task-op> ^name <op-name>
           ^<arg1-name> <arg1>
          -^{ <arg2-name> <> <arg1-name> }.arg-type <t2>)
   (<arg1> ^arg-type partial-predicate ^{2}.handle <obj>)
-->
   (write (crlf) |!EXECUTE-TASK! | <op-name> | | <obj> (crlf))
}

sp {task-utils*push-task-segment*apply*complete-push-task-segment*print*task*1*obj*1*pred
   (state <s> ^name push-task-segment
              ^agent-params.print-new-task-shorthand true
              ^operator.name complete-push-task-segment
              ^segment-to-push <seg>)
   (<seg> ^task-operator <task-op>)
   (<task-op> ^name <op-name>
           ^<arg1-name> <arg1>
           ^<arg2-name> <arg2>)
   (<arg1> ^arg-type object ^id.handle <obj1>)
   (<arg2> ^arg-type partial-predicate ^{2}.handle <obj2>)
-->
   (write (crlf) |!EXECUTE-TASK! | <op-name> | | <obj1> | | <obj2> (crlf))
}

        
