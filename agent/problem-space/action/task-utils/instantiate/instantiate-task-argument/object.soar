### INSTANTIATE OBJECT


## object procedural match depth 1
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*procedural*depth*1
   (state <s> ^instantiate-task-argument <arg>
              ^reference-tcn-proc.<arg-name> <parg>
              ^reference-task-op.<arg-name> <op-arg>)
  (<arg> ^arg-type object
         ^general-arg-rep.id <obj-slot>
        -^instantiation)
  (<parg> ^arg-type object
          ^id {@ <obj-slot>})
  (<op-arg> ^arg-type object
            ^id <obj>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj>)
}

## object procedural match depth 2
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*procedural*depth*2
   (state <s> ^instantiate-task-argument <arg>
              ^reference-tcn-proc.<arg-name> <parg>
              ^reference-task-op.<arg-name> <op-arg>)
  (<arg> ^arg-type object
         ^general-arg-rep.id <obj-slot>
          -^instantiation)
  (<parg> ^arg-type partial-predicate
          ^2 {@ <obj-slot>})
  (<op-arg> ^arg-type partial-predicate
            ^2 <obj>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type procedural
       ^id <obj>)
}

sp {task-utils*instantiate-task-operator*reject*instantiate-task-argument*object*if*always-implicit
   (state <s> ^instantiate-task-argument <arg>
              ^operator <o> +
              ^general-task-rep.<arg-name>.always-implicit true)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^match-type << procedural default >>)
   (<arg> ^arg-name <arg-name>)
-->
  (<s> ^operator <o> -)
}

# ENUMERATE: 1-8 OBJECT PREDICATES

## object default match with 1 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*1
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>)
   -{(<def> ^<prop2> { <pred2> <> <pred1> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 2 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*2
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> })
   -{(<def> ^<prop3> { <pred3> <> <pred1> <> <pred2> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 3 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*3
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> })
   -{(<def> ^<prop4> { <pred4> <> <pred1> <> <pred2> <> <pred3> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 4 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*4
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> })
   -{(<def> ^<prop5> { <pred5> <> <pred1> <> <pred2> <> <pred3> <> <pred4> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 5 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*5
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> }
          ^<prop5> { <pred5> > <pred4> })
   -{(<def> ^<prop6> { <pred6> <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 6 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*6
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> }
          ^<prop5> { <pred5> > <pred4> }
          ^<prop6> { <pred6> > <pred5> })
   -{(<def> ^<prop7> { <pred7> <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> <> <pred6> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>
            ^<prop6> <pred6>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 7 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*7
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> }
          ^<prop5> { <pred5> > <pred4> }
          ^<prop6> { <pred6> > <pred5> }
          ^<prop7> { <pred7> > <pred6> })
   -{(<def> ^<prop8> { <pred8> <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> <> <pred6> <> <pred7> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>
            ^<prop6> <pred6>
            ^<prop7> <pred7>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object default match with 8 predicate
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*default*8
   (state <s> ^instantiate-task-argument <arg>
              ^world.objects.object <obj>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
   (<def> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> }
          ^<prop5> { <pred5> > <pred4> }
          ^<prop6> { <pred6> > <pred5> }
          ^<prop7> { <pred7> > <pred6> }
          ^<prop8> { <pred8> > <pred7> })
   -{(<def> ^<prop9> { <pred9> <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> <> <pred6> <> <pred7> <> <pred8>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>
            ^<prop6> <pred6>
            ^<prop7> <pred7>
            ^<prop8> <pred8>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type default
       ^id <obj>)
}

## object abstract match
sp {task-utils*instantiate-task-operator*propose*instantiate-task-argument*object*matches*abstract
  (state <s> ^instantiate-task-argument <arg>)
   (<arg> ^arg-type object
          ^general-arg-rep.id.default <def>
          -^instantiation)
-->
  (<s> ^operator <o> + =)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <def>)
}

### APPLICATION ###

sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*procedural*default*create*instantiation
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type << procedural default >>
       ^id <obj>)
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj>)
}

## ENUMERATE: 1-8 OBJECT PREDICATES (in smem default rep)

# instantiate-task-argument abstract with 1 predicate
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*1*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>)
   -{(<rep> ^<prop2> { <pred2> <> <pred1> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj> ^abstract true)
  (<obj> ^predicates <preds>)
  (<preds> ^<prop1> <pred1>)
}

# instantiate-task-argument abstract with 2 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*2*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> })
   -{(<rep> ^<prop3> { <pred3> <> <pred1> <> <pred2> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj> ^abstract true)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>)
}

# instantiate-task-argument abstract with 3 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*3*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> })
   -{(<rep> ^<prop4> { <pred4> <> <pred1> <> <pred2> <> <pred3> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj> ^abstract true)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>)
}

# instantiate-task-argument abstract with 4 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*4*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> })
   -{(<rep> ^<prop5> { <pred5> <> <pred1> <> <pred2> <> <pred3> <> <pred4> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj> ^abstract true)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>)
}

# instantiate-task-argument abstract with 5 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*5*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> }
          ^<prop5> { <pred5> > <pred4> })
   -{(<rep> ^<prop6> { <pred6> <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj> ^abstract true)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>)
}

# instantiate-task-argument abstract with 6 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*6*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> }
          ^<prop5> { <pred5> > <pred4> }
          ^<prop6> { <pred6> > <pred5> })
   -{(<rep> ^<prop7> { <pred7> <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> <> <pred6> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj> ^abstract true)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>
            ^<prop6> <pred6>)
}

# instantiate-task-argument abstract with 7 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*7*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> }
          ^<prop5> { <pred5> > <pred4> }
          ^<prop6> { <pred6> > <pred5> }
          ^<prop7> { <pred7> > <pred6> })
   -{(<rep> ^<prop8> { <pred8> <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> <> <pred6> <> <pred7> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj> ^abstract true)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>
            ^<prop6> <pred6>
            ^<prop7> <pred7>)
}

# instantiate-task-argument abstract with 8 predicates
sp {task-utils*instantiate-task-operator*apply*instantiate-task-argument*object*abstract*8*predicate
  (state <s> ^operator <o>)
  (<o> ^name instantiate-task-argument
       ^argument <arg>
       ^arg-type object
       ^match-type abstract
       ^object-rep <rep>)
   (<rep> ^<prop1> <pred1>
          ^<prop2> { <pred2> > <pred1> }
          ^<prop3> { <pred3> > <pred2> }
          ^<prop4> { <pred4> > <pred3> }
          ^<prop5> { <pred5> > <pred4> }
          ^<prop6> { <pred6> > <pred5> }
          ^<prop7> { <pred7> > <pred5> }
          ^<prop8> { <pred8> > <pred5> })
   -{(<rep> ^<prop9> { <pred9> <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> <> <pred6> <> <pred7> <> <pred8> })}
-->
  (<arg> ^instantiation <i>)
  (<i> ^id <obj> ^abstract true)
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>
            ^<prop6> <pred6>
            ^<prop7> <pred7>
            ^<prop8> <pred8>)
}
