######################### OPERATOR PARAMETERS ########################

# (<o> ^type << start terminal predicate-set subtask composite >>) [REQUIRED]
# The type of the goal node to add
sp {add-node-to-goal-graph*elaborate*node-type*superoperator
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.type <type>)
-->
   (<s> ^node-type <type>)
}

# (<o> ^task-handle <task-h>) [REQUIRED]
# The handle of the task to edit
sp {add-node-to-goal-graph*elaborate*task-handle*superoperator
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.task-handle <task-h>)
-->
   (<s> ^task-handle <task-h>)
}

# (<o> ^after <goal-h>) [OPTIONAL]
# Will insert the new node into the goal graph after the given node
sp {add-node-to-goal-graph*elaborate*insert-after-node*superoperator
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.after <goal-h>)
-->
   (<s> ^insert-after-node <goal-h>)
}

# (<o> ^before <goal-h>) [OPTIONAL]
# Will insert the new node before the given goal node
sp {add-node-to-goal-graph*elaborate*insert-before-node*superoperator
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.before <goal-h>)
-->
   (<s> ^insert-before-node <goal-h>)
}

# (<o> ^insert-type << insert append >>)
sp {add-node-to-goal-graph*elaborate*insert-type*superoperator
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.insert-type <type>)
-->
   (<s> ^insert-type <type>)
}

# Default insert type is append
sp {add-node-to-goal-graph*elaborate*insert-type*default*append
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator <ssop>)
   (<ssop> -^insert-type <type>)
-->
   (<s> ^insert-type append)
}

# (<o> ^final-goal true) [OPTIONAL]
# If this flag is present, it will add a terminal node after the one being added
sp {add-node-to-goal-graph*elaborate*final-goal*true
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.final-goal true)
-->
   (<s> ^final-goal true)
}

## (<o> ^add-else-link true) [OPTIONAL[
# If present, and there are goal conditions, 
#   it will add an intermediate node following the goal
#   and create a default next link from the previous goal to the intermediate one
sp {add-node-to-goal-graph*elaborate*add-else-link*true
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.add-else-link true)
-->
   (<s> ^add-else-link true)
}

# (<o> ^goal-predicates <preds>) [REQUIRED for type=predicate-set]
# A goal predicate-set produced by task-utils/generalize-task-argument
#   This will become the predicates on the goal node
sp {add-node-to-goal-graph*elaborate*goal-predicates
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.goal-predicates <preds>)
-->
   (<s> ^goal-predicates <preds>)
}


# (<o> ^goal-conditions <conds>) [OPTIONAL for type=predicate-set]
# A predicate-set which determine conditions placed on the next pointer
#   between the previous node and the new node
sp {add-node-to-goal-graph*elaborate*goal-conditions
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.goal-conditions <conds>)
-->
   (<s> ^goal-conditions <conds>)
}

# (<o> ^repeat-conditions <conds>) [OPTIONAL for type=predicate-set]
# A predicate-set which determine conditions placed on the next pointer
#   between the previous node and the new node
sp {add-node-to-goal-graph*elaborate*repeat-conditions
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.repeat-conditions <conds>)
-->
   (<s> ^repeat-conditions <conds>)
}

# (<o> ^negated-conditions true)
# If the repeat conditions are negated, add the conditions to the loop edge and not the exit
sp {add-node-to-goal-graph*elaborate*negated-conditions*true
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.negated-conditions true)
-->
   (<s> ^negated-conditions true)
}

# (<o> ^learning-repeat-block <node-h>)
# Elaborate if this subtask is learned within the context of a repeat loop
# This is the handle of the top repeat node
sp {add-node-to-goal-graph*elaborate*learning-repeat-block
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.learning-repeat-block <node-h>)
-->
   (<s> ^learning-repeat-block <node-h>)
}

# (<o> ^subtask-handle <sub-h>) [REQUIRED for type=subtask]
# The handle of the subtask that corresponds to this subtask node
sp {add-node-to-goal-graph*elaborate*subtask-handle
   (state <s> ^name add-node-to-goal-graph
              ^superstate.operator.subtask-handle <sub-h>)
-->
   (<s> ^subtask-handle <sub-h>)
}


###### PROBLEM SPACE #######

sp {add-node-to-goal-graph*elabrate*default-problem-space*no
   (state <s> ^name add-node-to-goal-graph)
-->
   (<s> ^default-problem-space no)
}


######### OTHER ##########


#### retrieve-entire-goal-graph

# If inserting the node before an existing one, retrieve the entire goal graph
sp {add-node-to-goal-graph*elaborate*retrieve-entire-goal-graph*insert-before-node
   (state <s> ^name add-node-to-goal-graph
              ^insert-before-node <node-h>)
-->
   (<s> ^retrieve-entire-goal-graph true)
}

# If a node was modified, we have to retrieve the entire goal graph
sp {add-node-to-goal-graph*elaborate*retrieve-entire-goal-graph*has-modified-node
   (state <s> ^name add-node-to-goal-graph
              ^has-modified-node true)
-->
   (<s> ^retrieve-entire-goal-graph true)
}


#### following-node

sp {add-node-to-goal-graph*elaborate*following-node*from*goal-graph-nodes
   (state <s> ^name add-node-to-goal-graph
              ^insert-before-node <node-h>
              ^goal-graph-nodes.goal <node>)
   (<node> ^handle <node-h>)
-->
   (<s> ^following-node <node>)
}

#### previous-node

# If we are inserting after a node with exactly 1 next pointer 
#   pointing to an intermediate goal, then use that as the previous node
sp {add-node-to-goal-graph*elaborate*insert-after-int
   (state <s> ^name add-node-to-goal-graph
              ^insert-type insert
              ^retrieved-previous <node>
             -^new-node.handle <int-h>)
   (<node> ^next <next>
          -^next { <> <next> })
   (<next> ^goal <int>)
   (<int> ^item-type intermediate-goal
          ^handle <int-h>)
-->
   (<s> ^insert-after-int <int>
        ^previous-node <int>)
}

sp {add-node-to-goal-graph*elaborate*previous-node
   (state <s> ^name add-node-to-goal-graph
              ^retrieved-previous <node>
             -^insert-after-int)
-->
   (<s> ^previous-node <node>)
}


#### tail-node
# The newly created node that outgoing edges should leave from

sp {add-node-to-goal-graph*elaborate*tail-node*no*intermediate
   (state <s> ^name add-node-to-goal-graph
              ^created-node <node>
             -^created-intermediate-node)
-->
   (<s> ^tail-node <node>)
}

sp {add-node-to-goal-graph*elaborate*tail-node*intermediate
   (state <s> ^name add-node-to-goal-graph
              ^created-intermediate-node <node>)
-->
   (<s> ^tail-node <node>)
}

### repeat-loop-exit
sp {add-node-to-goal-graph*elaborate*repeat-loop-exit*from*repeat-node
   (state <s> ^name add-node-to-goal-graph
              ^repeat-node.next <exit-link>)
   (<exit-link> ^goal.item-type loop-exit)
-->
   (<s> ^repeat-loop-exit <exit-link>)
}

### closing-repeat-block
sp {add-node-to-goal-graph*elaborate*closing-repeat-block
   (state <s> ^name add-node-to-goal-graph
              ^node-type repeat
              ^learning-repeat-block)
-->
   (<s> ^closing-repeat-block true)
}
