### Operator create-predicate-set-node
# Proposed if node-type = predicate-set
# Creates a node with ^item-type task-goal

sp {add-node-to-goal-graph*propose*create-predicate-set-node
   (state <s> ^name add-node-to-goal-graph
              ^node-type predicate-set
              ^task-handle <task-h>
              ^goal-predicates <preds>
             -^created-node)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-predicate-set-node
        ^item-type create-node-operator
        ^task-handle <task-h>
        ^predicates <preds>
        ^node-root <node>)
}

### APPLICATION

# Create the base node structure
sp {add-node-to-goal-graph*apply*create-predicate-set-node*create*goal-node
   (state <s> ^name add-node-to-goal-graph
              ^operator <o>)
   (<o> ^name create-predicate-set-node
        ^node-root <node>
        ^task-handle <task-h>
        ^predicates.pred-count <pc>)
-->
   (<s> ^created-node <node>
        ^new-node <node>)
   (<node> ^item-type task-goal
           ^handle (make-constant-symbol (concat <task-h> |goal|))
           ^pred-count <pc>)

}

# Copy any modifiers onto the node
sp {add-node-to-goal-graph*apply*create-predicate-set-node*copy*goal*modifiers
   (state <s> ^name add-node-to-goal-graph
              ^operator <o>)
   (<o> ^name create-predicate-set-node
        ^node-root <node>
        ^predicates.modifiers <mods>)
-->
   (<node> ^modifiers <mods>)
}

# Copy the predicates onto the node
sp {add-node-to-goal-graph*apply*create-predicate-set-node*copy*goal*predicates
   (state <s> ^name add-node-to-goal-graph
              ^operator <o>)
   (<o> ^name create-predicate-set-node
        ^node-root <node>
        ^predicates.{ <n> << 1 2 3 4 5 >> } <p>)
-->
   (<node> ^<n> <p>)
}

