# complete-pop-task-segment - takes care of thing that needs to be done when popping the action

sp {problem-space*action*pop-task-segment*propose*complete-pop-task-segment
   (state <s> ^name pop-task-segment)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-pop-task-segment)
}

# Remove the task from the bottom of the stack
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*pop
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^task-stack <stack>
              ^segment-to-pop <segment>)
   (<stack> ^bottom <segment>)
   (<segment> ^prev <prev>)
   (<prev> ^next <segment>)
-->
   (<stack> ^bottom <segment> -
            ^bottom <prev>)
   (<prev> ^next <segment> -
           ^next none)
}

# If the task was the top, make it so the stack is empty
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*make*empty
  (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^task-stack <stack>
              ^segment-to-pop <segment>)
   (<stack> ^top <segment>
            ^bottom <segment>)
-->
   (<stack> ^top <segment> -
            ^top none
            ^bottom <segment> -
            ^bottom none)
}

# If the task was queued, remove it from the task-stack
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*from*from*queued-tasks
  (state <s> ^name pop-task-segment
             ^operator.name complete-pop-task-segment
             ^task-stack.queued-tasks <tasks>
             ^segment-to-pop.task-operator <task-op>)
   (<tasks> ^task <task>)
   (<task> ^task-operator <task-op>)
-->
   (<tasks> ^task <task> -)
}

sp {pop-task-segment*elaborate*world-vis
   (state <s> ^name pop-task-segment
               ^operator.name complete-pop-task-segment
              ^operator <o>
              ^top-state.dialog-context
              ^top-state.world.objects <objs>
             -^agent-params.prevent-output-link true
             -^top-state.world.predicates.predicate.handle on1
              ^top-state.io.output-link <ol>)
-->
   (<ol> ^world-vis <wv>)
   (<wv> ^objects <objs>)
}

sp {pop-task-segment*elaborate*world-vis*with*on1
   (state <s> ^name pop-task-segment
               ^operator.name complete-pop-task-segment
              ^operator <o>
              ^top-state.dialog-context
             -^agent-params.prevent-output-link true
              ^top-state.world <w>
              ^top-state.io.output-link <ol>)
   (<w> ^objects <objs> ^predicates.predicate <pp>)
   (<pp> ^handle on1)
-->
   (<ol> ^world-vis <wv>)
   (<wv> ^objects <objs> ^predicate <pp>)
}  

sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*pop*segment
   (state <s> ^name pop-task-segment
               ^operator.name complete-pop-task-segment
               ^top-state.interaction.stack.segment.purpose <p>
               ^segment-to-pop.task-operator <op>
               ^top-state.interaction.changes <chgs>)
  (<p> ^type execute-task
       ^parameters.task-operator <op>)
-->
  (<chgs> ^terminate-segment true)
}

# Remove any commands from the output-link
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*output*commands
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop.<cmd-name> <cmd>
              ^io.output-link <ol>)
   (<ol> ^<ol-cmd> <cmd>)
-->
   (<ol> ^<ol-cmd> <cmd> -)
}

# Report to the output link that the task was completed
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*report-to-output-link
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^agent-params.report-tasks-to-output-link true
              ^segment-to-pop <seg>
              ^top-state.io.output-link <ol>)
   (<seg> ^depth <d>)
-->
   (<ol> ^completed-task.segment <seg>)
   (<seg> ^depth <d>)
}


# Report an task-event as having been performed if the task was successful
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*report*performed*task-event
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <segment>
              ^top-state.interaction <interaction>)
   (<segment> ^status success
              ^task-operator.task-handle <task-handle>)
   (<interaction> ^stack.segment.purpose.satisfaction.task-event <e>
                  ^status <status>)
   (<e> ^type completed-task
        ^task-handle <task-handle>)
-->
   (<status> ^performed.task-event <e>)
}

# Report an task-event as having been failed if the task failed
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*report*failed*task-event
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <segment>
              ^top-state.interaction <interaction>)
   (<segment> ^status failure
              ^failure-info <info>
              ^task-operator.task-handle <task-handle>)
   (<interaction> ^stack.segment.purpose.satisfaction.task-event <e>
                  ^status <status>)
   (<e> ^type completed-task
        ^task-handle <task-handle>)
-->
   (<status> ^failure <f>)
   (<f> ^task-event <e>
        ^failure-info <info>)
}

# If the task failed, notify the parent task
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*failure*mark*subtask-failure
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <seg>
              ^superstate.current-task-segment <par-seg>)
   (<seg> ^status failure
          ^failure-info <info>
          ^task-operator <task-op>)
-->
   (<par-seg> ^subtask-failure <info>)
   (<info> ^subtask <task-op>)
}

# If there is a policy-learning-needed flag, 
#   push a retrospective learning segment onto the interaction stack
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*push*learning*segment
   (state <s> ^name pop-task-segment
              ### ABORT - check for status abort
              ^operator.name complete-pop-task-segment
			    -^agent-params.prevent-retrospective true
              ^segment-to-pop <segment>
              ^top-state.interaction.changes <changes>)
   (<segment> ^policy-learning-needed true
             -^subtask-failure.recoverable false
             ^status success
             ^task-operator.task-handle)
-->
   (<changes> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type retrospective-learning
        ^parameters <params>
        ^satisfaction.learning-event.type retrospective)
   (<params> ^task-segment <segment>)
}

# Remove any prefer-subtask flags
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*prefer-subtask*flags
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <seg>)
   (<seg> ^status success
          ^task-operator.subtask-handle <sub-h>
          ^prev <prev-seg>)
   (<prev-seg> ^prefer-subtask <sub-h>)
-->
   (<prev-seg> ^prefer-subtask <sub-h> -)
}

#   mark it performed in the current action
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*mark*performed-subtask*subtask
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <seg>)
   (<seg> ^status success
          ^task-operator <op>
          ^prev.task-operator <parent-op>)
   (<op> ^subtask-handle { <sub-handle> <> none })
-->
   (<parent-op> ^performed-subtask <sub-handle>)
}

# Remove any special modifiers from world objects if this is the top task
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*modifiers
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop <seg>
              ^task-stack.top <seg>
              ^top-state.world.objects.object.predicates <preds>)
   (<preds> ^modifier1 { <mod> << starting1 desired1 answered1 recalled1 storage1 preferred1 >> })
-->
   (<preds> ^modifier1 <mod> -)
}

# When the top task is finished, clear the dialog-object-list
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*delete*dialog*info
  (state <s> ^name pop-task-segment
             ^operator.name complete-pop-task-segment
             ^segment-to-pop <seg>
             ^task-stack.top <seg>
             ^top-state <top>)
  (<top> ^dialog-object-list <list>
         ^dialog-world <w>)
-->
  (<top> ^dialog-object-list <list> -
         ^dialog-world <w> -
         ^dialog-object-list nil
         ^dialog-object-list-saved nil
         ^dialog-world <new>)
  (<new> ^objects <objs> ^predicates <preds>)
}

# If there is a ^clear-task-stack flag, remove it when popping the top segment
sp {problem-space*action*pop-task-segment*apply*complete-pop-task-segment*remove*clear-task-stack
  (state <s> ^name pop-task-segment
             ^operator.name complete-pop-task-segment
             ^segment-to-pop <top>
             ^task-stack <stack>)
   (<stack> ^top <top>
            ^clear-task-stack true)
-->
   (<stack> ^clear-task-stack true -)
}
