sp {match-task-operator*elaborate*state*name*learn-matches-task-op-elaboration-rule
   (state <s> ^superstate.match-task-operator <mto>
              ^impasse no-change
              ^attribute state)
-->
   (<s> ^name learn-matches-task-op-elaboration-rule
        ^match-task-op-workspace <ws>)
   (<ws> ^ss-match-task-operator <mto>)
}

sp {match-task-operator*elaborate*task-op-to-match
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^ss-match-task-operator.task-operator <task-op>)
-->
   (<ws> ^task-op-to-match <task-op>
         ^task-info <info>)
}

sp {learn-matches-task-op-elaboration-rule*elaborate*candidate
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^ss-match-task-operator.candidate-tasks.candidate-task-operator <cand-tkop>)
-->
   (<ws> ^candidate <cand>)
   (<cand> ^task-operator <cand-tkop>)
}

sp {task-utils*match-task-operator*elaborate*no-matching-candidates
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> -^candidate.successful-match yes)
-->
   (<ws> ^no-matching-candidates true)
}

sp {task-utils*match-task-operator*elaborate*learning-task-utils-rule
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^ss-match-task-operator.learning-chunking-rule true)
-->
   (<s> ^learning-task-utils-rule true)
}

# elaborate argument information 
## ENUMERATE: 0-5 TASK ARGUMENTS
sp {learn-matches-task-op-elaboration-rule*elaborate*arg-names*0*args
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^task-op-to-match <task-op>
         ^task-info <info>)
 -{(<task-op> ^{ <a1> }.arg-type <type1>)}
-->
   (<info> ^num-args 0)
}

sp {learn-matches-task-op-elaboration-rule*elaborate*arg-names*1*args
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^task-op-to-match <task-op>
         ^task-info <info>)
   (<task-op> ^{ <a1>        } <arg1>)
   (<arg1> ^arg-type <type1>)
 -{(<task-op> ^{ <a2> <> <a1> }.arg-type <type2>)}
-->
   (<info> ^num-args 1
           ^1 <new-arg1>)
   (<new-arg1> ^name <a1> ^type <type1> ^arg <arg1>)
}

sp {learn-matches-task-op-elaboration-rule*elaborate*arg-names*2*args
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^task-op-to-match <task-op>
         ^task-info <info>)
   (<task-op> ^{ <a1>        } <arg1>
              ^{ <a2> > <a1> } <arg2>)
   (<arg1> ^arg-type <type1>)
   (<arg2> ^arg-type <type2>)
 -{(<task-op> ^{ <a3> <> <a2> <> <a1> }.arg-type <type3>)}
-->
   (<info> ^num-args 2
           ^1 <new-arg1>
           ^2 <new-arg2>)
   (<new-arg1> ^name <a1> ^type <type1> ^arg <arg1>)
   (<new-arg2> ^name <a2> ^type <type2> ^arg <arg2>)
}

sp {learn-matches-task-op-elaboration-rule*elaborate*arg-names*3*args
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^task-op-to-match <task-op>
         ^task-info <info>)
   (<task-op> ^{ <a1>        } <arg1>
              ^{ <a2> > <a1> } <arg2>
              ^{ <a3> > <a2> } <arg3>)
   (<arg1> ^arg-type <type1>)
   (<arg2> ^arg-type <type2>)
   (<arg3> ^arg-type <type3>)
 -{(<task-op> ^{ <a4> <> <a3> <> <a2> <> <a1> }.arg-type <type4>)}
-->
   (<info> ^num-args 3
           ^1 <new-arg1>
           ^2 <new-arg2>
           ^3 <new-arg3>)
   (<new-arg1> ^name <a1> ^type <type1> ^arg <arg1>)
   (<new-arg2> ^name <a2> ^type <type2> ^arg <arg2>)
   (<new-arg3> ^name <a3> ^type <type3> ^arg <arg3>)
}

sp {learn-matches-task-op-elaboration-rule*elaborate*arg-names*4*args
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^task-op-to-match <task-op>
         ^task-info <info>)
   (<task-op> ^{ <a1>        } <arg1>
              ^{ <a2> > <a1> } <arg2>
              ^{ <a3> > <a2> } <arg3>
              ^{ <a4> > <a3> } <arg4>)
   (<arg1> ^arg-type <type1>)
   (<arg2> ^arg-type <type2>)
   (<arg3> ^arg-type <type3>)
   (<arg4> ^arg-type <type4>)
 -{(<task-op> ^{ <a5> <> <a4> <> <a3> <> <a2> <> <a1> }.arg-type <type5>)}
-->
   (<info> ^num-args 4
           ^1 <new-arg1>
           ^2 <new-arg2>
           ^3 <new-arg3>
           ^4 <new-arg4>)
   (<new-arg1> ^name <a1> ^type <type1> ^arg <arg1>)
   (<new-arg2> ^name <a2> ^type <type2> ^arg <arg2>)
   (<new-arg3> ^name <a3> ^type <type3> ^arg <arg3>)
   (<new-arg4> ^name <a4> ^type <type4> ^arg <arg4>)
}

sp {learn-matches-task-op-elaboration-rule*elaborate*arg-names*5*args
   (state <s> ^name learn-matches-task-op-elaboration-rule
              ^match-task-op-workspace <ws>)
   (<ws> ^task-op-to-match <task-op>
         ^task-info <info>)
   (<task-op> ^{ <a1>        } <arg1>
              ^{ <a2> > <a1> } <arg2>
              ^{ <a3> > <a2> } <arg3>
              ^{ <a4> > <a3> } <arg4>
              ^{ <a5> > <a4> } <arg5>)
   (<arg1> ^arg-type <type1>)
   (<arg2> ^arg-type <type2>)
   (<arg3> ^arg-type <type3>)
   (<arg4> ^arg-type <type4>)
   (<arg5> ^arg-type <type5>)
 -{(<task-op> ^{ <a6> <> <a5> <> <a4> <> <a3> <> <a2> <> <a1> }.arg-type <type6>)}
-->
   (<info> ^num-args 5
           ^1 <new-arg1>
           ^2 <new-arg2>
           ^3 <new-arg3>
           ^4 <new-arg4>
           ^5 <new-arg5>)
   (<new-arg1> ^name <a1> ^type <type1> ^arg <arg1>)
   (<new-arg2> ^name <a2> ^type <type2> ^arg <arg2>)
   (<new-arg3> ^name <a3> ^type <type3> ^arg <arg3>)
   (<new-arg4> ^name <a4> ^type <type4> ^arg <arg4>)
   (<new-arg5> ^name <a5> ^type <type5> ^arg <arg5>)
}
