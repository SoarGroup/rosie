### GENERALIZE PARTIAL PREDICATE

sp {task-utils*generalize-task-argument*expand*partial-predicate
  (state <s> ^generalize-task-argument <arg>)
  (<arg> ^arg-type partial-predicate
         ^instantiation <i>)
  (<i> ^handle <handle>
       ^2 <obj>)
-->
  (<s> ^generalize-task-argument <gen-obj> <gen-pred>)

  (<gen-pred> ^arg-type predicate-handle
              ^instantiation <pred-i>)
  (<pred-i> ^handle <handle>
            ^no-property-handle true)

  (<gen-obj> ^arg-type object
             ^instantiation <obj-i>)
  (<obj-i> ^id <obj>)

  (<arg> ^generalize-handle <gen-pred>
         ^generalize-obj2 <gen-obj>)
}

sp {task-utils*generalize-task-argument*partial-predicate*elaborate*object2*reference-info
   (state <s> ^generalize-task-argument <arg>)
   (<arg> ^arg-type partial-predicate
          ^generalize-obj2 <gen-obj2>
          ^instantiation.reference-info.{2} <info>)
-->
   (<gen-obj2> ^reference-info <info>)
}

sp {task-utils*generalize-task-argument*propose*generalize-task-argument*partial-predicate
  (state <s> ^generalize-task-argument <arg>)
  (<arg> ^arg-type partial-predicate
         ^generalize-handle.general-arg-rep.id <pred-slot>
         ^generalize-obj2.general-arg-rep.id <obj-slot>
        -^general-arg-rep)
-->
  (<s> ^operator <o> + =)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type partial
       ^id <pred-slot>
       ^2 <obj-slot>)
}

sp {task-utils*generalize-task-argument*apply*generalize-task-argument*partial-predicate
  (state <s> ^operator <o>)
  (<o> ^name generalize-task-argument
       ^argument <arg>
       ^arg-type predicate
       ^pred-type partial
       ^id <pred-slot>
       ^2 <obj-slot>)
-->
  (<arg> ^general-arg-rep <gen>)
  (<gen> ^id <pred-slot>
         ^2 <obj-slot>)
}


