
# Construct a unary goal predicate
sp {task-utils*construct-task-goal*elaborate*construct-task-argument*unary*predicate
   (state <s> ^name construct-task-goal
              ^{ <type> << goal-clause goal-condition >> } <gcl>)
   (<gcl> ^predicate-handle <pred-h>
          ^object1 <obj1>
         -^object2)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^<type> <gcl>
          ^source <src>)
   (<src> ^type unary
          ^handle <pred-h>
          ^1 <obj1>)
}

# Construct a relation goal predicate
sp {task-utils*construct-task-goal*elaborate*construct-task-argument*relation*predicate
   (state <s> ^name construct-task-goal
              ^{ <type> << goal-clause goal-condition >> } <gcl>)
   (<gcl> ^predicate-handle <pred-h>
          ^object1 <obj1>
          ^object2 <obj2>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^<type> <gcl>
          ^source <src>)
   (<src> ^type relation
          ^handle <pred-h>
          ^1 <obj1>
          ^2 <obj2>)
}

# Special Case: Construct a relation goal predicate for heard (goal is that the person heard the message)
sp {task-utils*construct-task-goal*elaborate*construct-task-argument*relation*predicate*heard
   (state <s> ^name construct-task-goal
              ^goal-clause <gcl>)
   (<gcl> ^source <gcl-src>)
   (<gcl-src> ^action.handle heard1
              ^agent <obj1>
              ^arg1 <obj2>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^goal-clause <gcl>
          ^source <src>)
   (<src> ^type relation
          ^handle heard2
          ^1 <obj1>
          ^2 <obj2>)
}

