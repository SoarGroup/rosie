#### constructing object arguments

### Select an object (if there are multiple possible groundings, choose one)

sp {task-utils*construct-task-argument*object*propose*select-object-argument
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type object
          ^source <obj>
         -^selected)
-->
   (<s> ^operator <o> + =)
   (<o> ^name select-object-argument 
        ^argument <arg>
        ^source <obj>)
}

# If there are multiple object arguments of the same name, prefer task-objects over non task-objects
sp {task-utils*construct-task-argument*object*prefer*select-object-argument*task-object
   (state <s> ^name construct-task-operator
              ^operator <o1> +
              ^operator <o2> +
              ^top-state.task-stack.segments <segs>)
   (<o1> ^name select-object-argument 
         ^argument <arg>
         ^source <obj1>)
   (<o2> ^name select-object-argument 
         ^argument <arg>
         ^source <obj2>)
   (<segs> ^segment.task-objects.object <obj1>
          -^segment.task-objects.object <obj2>)
-->
   (<s> ^operator <o1> > <o2>)
}

# If there are multiple object arguments of the same name, and both are task-objects, 
# Prefer one on the bottom segment task-operator over one if not
sp {task-utils*construct-task-argument*object*prefer*select-object-argument*bottom*task-object
   (state <s> ^name construct-task-operator
              ^operator <o1> +
              ^operator <o2> +
              ^top-state.task-stack.bottom.task-objects <bot-objs>)
   (<o1> ^name select-object-argument 
         ^argument <arg>
         ^source <obj1>)
   (<o2> ^name select-object-argument 
         ^argument <arg>
         ^source <obj2>)
   (<bot-objs> ^task-object <obj1>
              -^task-object <obj2>)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {task-utils*construct-task-argument*object*apply*select-object-argument
   (state <s> ^construct-task-argument <arg>
              ^operator <o>)
   (<o> ^name select-object-argument 
        ^argument <arg>
        ^source <obj>)
-->
   (<arg> ^selected <obj>)
}


### Handling abstract objects (shouldn't be grounded)

### Then we make sure the object is in the world (using add-object-to-world)

sp {task-utils*construct-task-argument*object*propose*add-object-to-world
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type object
          ^selected <obj>
         -^world-object)
-->
   (<s> ^operator <o> + =)
   (<o> ^name add-object-to-world
        ^source-obj <obj>)
}

sp {task-utils*construct-task-argument*elaborate*add-object-to-world*abstract
   (state <s> ^construct-task-argument <arg>
              ^operator <o> +
              ^task-concept-network <tcn>)
   (<arg> ^arg-type object
          ^arg-name <arg-name>
          ^selected <obj>)
   (<o> ^name add-object-to-world
        ^source-obj <obj>)
   (<tcn> ^procedural.<arg-name>.abstract true)
-->
   (<o> ^abstract true)
}

sp {task-utils*construct-task-argument*elaborate*object*argument*world-object*from*add-object-result
   (state <s> ^construct-task-argument <arg>
              ^add-object-result <res>)
   (<arg> ^arg-type object
          ^selected <obj>)
   (<res> ^source-obj <obj>
          ^world-obj <wobj>)
-->
   (<arg> ^world-object <wobj>)
}

### construct-task-argument object

sp {task-utils*construct-task-argument*propose*construct-task-argument*object
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type object
          ^world-object <obj>
         -^created-arg)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type object
        ^object <obj>
        ^reference-info <ref-info>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*object
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type object
        ^object <obj>
        ^reference-info <ref-info>)
-->
   (<arg> ^created-arg <carg>)
   (<carg> ^id <obj>
           ^reference-info <ref-info>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*object*add*reference-info
   (state <s> ^operator <o>
              ^command-message.reference-info <src-ref>)
   (<o> ^name construct-task-argument
        ^arg-type object
        ^argument.{ << parent-arg-name arg-name >> } <arg-name>
        ^reference-info <ref-info>)
   (<src-ref> ^arg-name <arg-name>
              ^constraint.<prop-h> <pred-h>)
-->
   (<ref-info> ^<prop-h> <pred-h>)
}
