
### Duration predicate
sp {task-utils*construct-task-argument*clause*expand*1*pred*duration
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^number <num>
             ^unit <unit>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type duration
          ^number <num>
          ^unit <unit>)
}

### Clocktime predicate
sp {task-utils*construct-task-argument*clause*expand*1*pred*clocktime
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^hour <hour>
             ^minute <min>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type clocktime
          ^hour <hour>
          ^minute <min>)
}

### Status predicate - current-location
sp {task-utils*construct-task-argument*clause*expand*1*pred*status*current-location
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^arg1.handle rosie
             ^predicate <pred>)
   (<pred> ^handle <in1>
           ^2 <loc>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type status
          ^name current-location
          ^1 <loc>)
}

### Object Exists predicate (if there is a red cup -> object-exists(red, cup))
sp {task-utils*construct-task-argument*clause*expand*1*pred*object-exists*1
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> -^arg1
             -^modifier.handle negation
             ^predicate <p1>
            -^predicate { <p2> <> <p1> })
   (<p1> ^handle <pred1>
         ^property.handle <prop1>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type object-exists
          ^pred-count 1
          ^1 <sp1>)
   (<sp1> ^property-handle <prop1> ^predicate-handle <pred1>)
}

sp {task-utils*construct-task-argument*clause*expand*1*pred*object-exists*2
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> -^arg1
             -^modifier.handle negation
             ^predicate <p1> 
             ^predicate { <p2> > <p1> }
            -^predicate { <p3> <> <p2> <> <p1> })
   (<p1> ^handle <pred1>
         ^property.handle <prop1>)
   (<p2> ^handle { <pred2> <> <pred1> }
         ^property.handle <prop2>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type object-exists
          ^pred-count 2
          ^1 <sp1>
          ^2 <sp2>)
   (<sp1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<sp2> ^property-handle <prop2> ^predicate-handle <pred2>)
}

sp {task-utils*construct-task-argument*clause*expand*1*pred*object-exists*3
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> -^arg1
             -^modifier.handle negation
             ^predicate <p1> 
             ^predicate { <p2> > <p1> }
             ^predicate { <p3> > <p2> })
   (<p1> ^handle <pred1>
         ^property.handle <prop1>)
   (<p2> ^handle { <pred2> <> <pred1> }
         ^property.handle <prop2>)
   (<p3> ^handle { <pred3> <> <pred1> <> <pred2> }
         ^property.handle <prop3>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type object-exists
          ^pred-count 3
          ^1 <sp1>
          ^2 <sp2>
          ^3 <sp3>)
   (<sp1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<sp2> ^property-handle <prop2> ^predicate-handle <pred2>)
   (<sp3> ^property-handle <prop3> ^predicate-handle <pred3>)
}

### Object Missing predicate (if a soda is not present -> object-missing(soda))
sp {task-utils*construct-task-argument*clause*expand*1*pred*object-missing*1
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^modifier.handle negation
             ^predicate.handle confirmed1
             ^reference-info <ref>)
   (<ref> ^arg-name arg1
          ^constraint <c1>
         -^constraint { <c2> <> <c1> })
   (<c1> ^<prop1> <pred1>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type object-missing
          ^pred-count 1
          ^1 <sp1>)
   (<sp1> ^property-handle <prop1> ^predicate-handle <pred1>)
}

sp {task-utils*construct-task-argument*clause*expand*1*pred*object-missing*2
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^modifier.handle negation
             ^predicate.handle confirmed1
             ^reference-info <ref>)
   (<ref> ^arg-name arg1
          ^constraint <c1>
          ^constraint { <c2> > <c1> }
         -^constraint { <c3> <> <c2> <> <c1> })
   (<c1> ^<prop1> <pred1>)
   (<c2> ^<prop2> <pred2>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type object-missing
          ^pred-count 2
          ^1 <sp1>
          ^2 <sp2>)
   (<sp1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<sp2> ^property-handle <prop2> ^predicate-handle <pred2>)
}

sp {task-utils*construct-task-argument*clause*expand*1*pred*object-missing*3
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^modifier.handle negation
             ^predicate.handle confirmed1
             ^reference-info <ref>)
   (<ref> ^arg-name arg1
          ^constraint <c1>
          ^constraint { <c2> > <c1> }
          ^constraint { <c3> > <c2> })
   (<c1> ^<prop1> <pred1>)
   (<c2> ^<prop2> <pred2>)
   (<c3> ^<prop3> <pred3>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^source <src>)
   (<src> ^type object-missing
          ^pred-count 3
          ^1 <sp1>
          ^2 <sp2>
          ^3 <sp3>)
   (<sp1> ^property-handle <prop1> ^predicate-handle <pred1>)
   (<sp2> ^property-handle <prop2> ^predicate-handle <pred2>)
   (<sp3> ^property-handle <prop3> ^predicate-handle <pred3>)
}

##### Unary Predicate

# standard unary predicate
sp {task-utils*construct-task-argument*clause*elaborate*clause-type*unary
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^action.handle is1
             ^predicate.handle <pred-h>
             ^arg1 <obj>
            -^modifier.handle negation
            -^arg2
            -^predicate.{2})
   (<obj> ^item-type object)
-->
   (<arg> ^clause-type unary
          ^predicate-handle <pred-h>)
}

# sense gets turned into unary predicate (you see a <x> --> visible(x))
sp {task-utils*construct-task-argument*clause*elaborate*clause-type*unary*sense
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^action.handle sense1
             ^arg1 <obj>)
   (<obj> ^item-type object)
-->
   (<arg> ^clause-type unary
          ^predicate-handle visible1)
}

# expand unary predicate
sp {task-utils*construct-task-argument*clause*expand*1*pred*unary
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^clause-type unary
          ^predicate-handle <pred-h>
          ^source <clause>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^parent <clause>
          ^source <src>)
   (<src> ^type unary
          ^handle <pred-h>)
}

# copy property-handle if it exists
sp {task-utils*construct-task-argument*clause*elaborate*unary*property-handle
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^clause-type unary
          ^property-handle <prop-h>
          ^construct-pred-1.source <src>)
-->
   (<src> ^property-handle <prop-h>)
}

##### Relation Predicate

sp {task-utils*construct-task-argument*clause*elaborate*clause-type*relation
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^action.handle is1
             ^arg1 <obj>
             ^{ << arg2 predicate relation >> } <ppred>)
   (<ppred> ^handle <pred-h>
            ^2 <obj2>)
   (<obj> ^item-type object
         -^handle rosie)
   (<obj2> ^item-type object)
-->
   (<arg> ^clause-type relation
          ^predicate-handle <pred-h>)
}

sp {task-utils*construct-task-argument*clause*elaborate*clause-type*relation*arg2
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^action.handle is1
             ^predicate <rel-pred>
             ^arg1 <obj>
             ^arg2 <obj2>)
   (<rel-pred> ^handle <pred-h>
               ^item-type relation)
   (<obj> ^item-type object
         -^handle rosie)
   (<obj2> ^item-type object)
-->
   (<arg> ^clause-type relation
          ^predicate-handle <pred-h>)
}

# contains gets turned into a relation predicate
sp {task-utils*construct-task-argument*clause*elaborate*clause-type*relation*contains
   (state <s> ^construct-task-argument <arg>
              ^top-state.world.objects.object <obj2>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^predicate.handle contains1
             ^arg1 <obj>
             ^arg2 <arg2>)
   (<obj> ^item-type object)
   (<arg2> ^handle <cat>
           ^property.handle category)
   (<obj2> ^root-category <cat>)
-->
   (<arg> ^clause-type relation
          ^predicate-handle contains1)
   (<clause> ^arg2 <obj2>)
}

# If arg2 is a single category - try to get objects matching that category to use for the second argument
sp {task-utils*construct-task-argument*clause*elaborate*clause-type*relation*category*2
   (state <s> ^construct-task-argument <arg>
              ^top-state.world.objects.object <obj2>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^action.handle is1
             ^predicate <rel-pred>
             ^arg1 <obj>
             ^arg2 <obj2>)
   (<rel-pred> ^handle <pred-h>
               ^item-type relation)
   (<obj> ^item-type object)
   (<obj2> -^item-type object
            ^handle <cat>
            ^property.handle category)
   (<obj2> ^root-category <cat>)
-->
   (<arg> ^clause-type relation
          ^predicate-handle <pred-h>)
   (<clause> ^arg2 <obj2>)
}

# expand relation predicate
sp {task-utils*construct-task-argument*clause*expand*1*pred*relation
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^clause-type relation
          ^predicate-handle <pred-h>
          ^source <clause>)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^parent <clause>
          ^source <src>)
   (<src> ^type relation
          ^handle <pred-h>)
}

####################### SPECIAL CASES ######################

# Special Relation Case: Heard
sp {task-utils*construct-task-argument*clause*elaborate*clause-type*relation*heard
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^action.handle heard1
             ^agent <obj1>
             ^arg1 <obj2>)
   (<obj1> ^item-type object)
   (<obj2> ^item-type object)
-->
   (<arg> ^pred-count 1
          ^construct-pred-1 <cta>)
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type predicate
          ^parent <clause>
          ^source <src>
          ^disable-reference-info true)
   (<src> ^type relation
          ^handle heard2
          ^1 <obj1>
          ^2 <obj2>)
}

####################### Subclauses ######################

### 2 subclauses
sp {task-utils*construct-task-argument*expand*clause*2*subclauses
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^subclause <sub1>
             ^subclause { <sub2> > <sub1> }
            -^subclause { <sub3> <> <sub2> <> <sub1> })
-->
   (<arg> ^pred-count 2
          ^construct-sub-1 <cta1>
          ^construct-sub-2 <cta2>)
   (<s> ^construct-task-argument <cta1> <cta2>)
   (<cta1> ^arg-type clause
           ^source <sub1>)
   (<cta2> ^arg-type clause
           ^source <sub2>)
}

### 3 subclauses
sp {task-utils*construct-task-argument*expand*clause*3*subclauses
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^source <clause>)
   (<clause> ^subclause <sub1>
             ^subclause { <sub2> > <sub1> }
             ^subclause { <sub3> > <sub2> }
            -^subclause { <sub4> <> <sub3> <> <sub2> <> <sub1> })
-->
   (<arg> ^pred-count 3
          ^construct-sub-1 <cta1>
          ^construct-sub-2 <cta2>
          ^construct-sub-3 <cta3>)
   (<s> ^construct-task-argument <cta1> <cta2> <cta3>)
   (<cta1> ^arg-type clause
           ^source <sub1>)
   (<cta2> ^arg-type clause
           ^source <sub2>)
   (<cta3> ^arg-type clause
           ^source <sub3>)
}

sp {task-utils*construct-task-argument*elaborate*sub-1*result*as*construct-pred-1
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^construct-sub-1.construct-pred-1 <p>)
-->
   (<arg> ^construct-pred-1 <p>)
}
sp {task-utils*construct-task-argument*elaborate*sub-2*result*as*construct-pred-2
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^construct-sub-2.construct-pred-1 <p>)
-->
   (<arg> ^construct-pred-2 <p>)
}
sp {task-utils*construct-task-argument*elaborate*sub-3*result*as*construct-pred-3
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
          ^construct-sub-3.construct-pred-1 <p>)
-->
   (<arg> ^construct-pred-3 <p>)
}

####################### Create Results ######################

### pred-count 1
sp {task-utils*construct-task-argument*propose*construct-task-argument*clause*1
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
         -^created-arg
          ^pred-count 1
          ^construct-pred-1.created-arg <pred1>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type clause
        ^pred-count 1
        ^pred1 <pred1>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*clause*1
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type clause
        ^pred-count 1
        ^pred1 <pred1>)
-->
   (<arg> ^created-arg <pset>)
   (<pset> ^pred-count 1
           ^1 <pred1>)
}

### pred-count 2
sp {task-utils*construct-task-argument*propose*construct-task-argument*clause*2
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
         -^created-arg
          ^pred-count 2
          ^construct-pred-1.created-arg <pred1>
          ^construct-pred-2.created-arg <pred2>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type clause
        ^pred-count 2
        ^pred1 <pred1>
        ^pred2 <pred2>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*clause*2
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type clause
        ^pred-count 2
        ^pred1 <pred1>
        ^pred2 <pred2>)
-->
   (<arg> ^created-arg <pset>)
   (<pset> ^pred-count 2
           ^1 <pred1>
           ^2 <pred2>)
}

### pred-count 3
sp {task-utils*construct-task-argument*propose*construct-task-argument*clause*3
   (state <s> ^construct-task-argument <arg>)
   (<arg> ^arg-type clause
         -^created-arg
          ^pred-count 3
          ^construct-pred-1.created-arg <pred1>
          ^construct-pred-2.created-arg <pred2>
          ^construct-pred-3.created-arg <pred3>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type clause
        ^pred-count 3
        ^pred1 <pred1>
        ^pred2 <pred2>
        ^pred3 <pred3>)
}

sp {task-utils*construct-task-argument*apply*construct-task-argument*clause*3
   (state <s> ^operator <o>)
   (<o> ^name construct-task-argument
        ^argument <arg>
        ^arg-type clause
        ^pred-count 3
        ^pred1 <pred1>
        ^pred2 <pred2>
        ^pred3 <pred3>)
-->
   (<arg> ^created-arg <pset>)
   (<pset> ^pred-count 3
           ^1 <pred1>
           ^2 <pred2>
           ^3 <pred3>)
}

