##### concept
sp {task-utils*construct-task-operator*elaborate*construct-task-argument*concept
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name> <conc>)
   (<conc> ^item-type concept
          -^property.handle unit)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type concept
          ^arg-name <arg-name>
          ^source <conc>)
}

##### number (no unit)
sp {task-utils*construct-task-operator*elaborate*construct-task-argument*number
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name> <num-arg>
         -^{ <arg-name2> }.property.handle unit)
   (<num-arg> ^number <num>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type number
          ^arg-name <arg-name>
          ^source <num-arg>)
}

##### object 
sp {task-utils*construct-task-operator*elaborate*construct-task-argument*object
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name> <obj>)
   (<obj> ^item-type object)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type object
          ^arg-name <arg-name>
          ^source <obj>)
}

##### measure (number + unit)
sp {task-utils*construct-task-operator*elaborate*construct-task-argument*measure
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name1> <num-arg>
          ^<arg-name2> <unit-arg>)
   (<num-arg> ^handle <num> ^property.handle number)
   (<unit-arg> ^handle <unit> ^property.handle unit)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type measure
          ^arg-name <arg-name2>
          ^source <src>)
   (<src> ^number <num> ^unit <unit>)
}


# turn message argument from say/ask into an object
sp {task-utils*construct-task-operator*elaborate*construct-task-argument*object*message
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^action.handle << say1 ask1 >>
          ^<arg-name>.sentence <sentence>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type object
          ^arg-name <arg-name>
          ^source <obj>)
   (<obj> ^item-type object
          ^handle (make-constant-symbol |obj-hand|)
          ^predicates <preds>)
   (<preds> ^category message
            ^sentence <sentence>)
}

#### partial-predicate
sp {task-utils*construct-task-operator*elaborate*construct-task-argument*partial-predicate
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^{ <arg-name> <> predicate <> relation } <arg>)
   (<arg> ^item-type predicate
         -^until-clause
         -^after-clause
          ^handle { <handle> <> for1 }
          ^2 <obj2>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type partial-predicate
          ^arg-name <arg-name>
          ^source <pred>)
   (<pred> ^handle <handle>
           ^2 <obj2>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*partial-predicate*rel*arg2
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^{ << predicate relation >> } <arg>)
   (<arg> ^item-type predicate
         -^until-clause
         -^after-clause
          ^handle <handle>
          ^2 <obj2>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type partial-predicate
          ^arg-name arg2
          ^source <pred>)
   (<pred> ^handle <handle>
           ^2 <obj2>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*predicate*arg2*relations
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^arg2.{2}.relations <arg2>)
   (<arg2> ^handle <handle>
           ^2 <obj2>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type partial-predicate
          ^arg-name arg1
          ^source <pred>)
   (<pred> ^handle <handle>
           ^2 <obj2>)
}

#### until-clause/after-clause 

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*clause*is1*state*predicate
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^action.handle is1
             ^arg1 <obj>
             ^predicate.handle <pred-h>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type <clause-type>
          ^arg-name <clause-type>
          ^source <src>)
   (<src> ^pred-count 1
          ^1 <pred1>)
   (<pred1> ^type unary
            ^handle <pred-h>
            ^1 <obj>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*clause*2*is*predicates
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^subclause <sub1> 
             ^subclause { <sub2> > <sub1> })
   (<sub1> ^action.handle is1
           ^arg1 <obj1>
           ^predicate.handle <pred1-h>)
   (<sub2> ^action.handle is1
           ^arg1 <obj2>
           ^predicate.handle <pred2-h>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type <clause-type>
          ^arg-name <clause-type>
          ^source <src>)
   (<src> ^pred-count 2
          ^1 <pred1>
          ^2 <pred2>)
   (<pred1> ^type unary
            ^handle <pred1-h>
            ^1 <obj1>)
   (<pred2> ^type unary
            ^handle <pred2-h>
            ^1 <obj2>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*clause*visible
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^action.handle sense1
             ^agent.handle rosie
             ^arg1 <obj>)
   (<obj> -^unit << seconds minutes hours >>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type <clause-type>
          ^arg-name <clause-type>
          ^source <src>)
   (<src> ^pred-count 1
          ^1 <pred1>)
   (<pred1> ^type unary
            ^handle visible1
            ^1 <obj>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*until-clause*duration*predicate*for
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name> <arg>)
   (<arg> ^item-type predicate
          ^handle for1
          ^2 <time>)
   (<time> ^number <num>
           ^unit <unit>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type until-clause
          ^arg-name until-clause
          ^source <src>)
   (<src> ^pred-count 1
          ^1 <pred1>)
   (<pred1> ^type duration
            ^number <num>
            ^unit <unit>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*clause*duration*predicate
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^action.handle sense1
             ^agent.handle rosie
             ^arg1 <obj>)
   (<obj> ^number <num> 
          ^unit { <unit> << minutes seconds >> })
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type <clause-type>
          ^arg-name <clause-type>
          ^source <src>)
   (<src> ^pred-count 1
          ^1 <pred1>)
   (<pred1> ^type duration
            ^number <num>
            ^unit <unit>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*clause*clocktime*predicate
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^<arg-name>.{ <clause-type> << until-clause after-clause >> } <clause>)
   (<clause> ^action.handle sense1
             ^agent.handle rosie
             ^arg1 <obj>)
   (<obj> ^number <num> 
          ^unit hours)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type <clause-type>
          ^arg-name <clause-type>
          ^source <src>)
   (<src> ^pred-count 1
          ^1 <pred1>)
   (<pred1> ^type clocktime
            ^hour (int (/ <num> 100) )
            ^minute (mod <num> 100))
}

#### conditions
sp {task-utils*construct-task-operator*elaborate*construct-task-argument*condition*1*predicate
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^conditions <conds>)
   (<conds> ^action.handle is1
           ^arg1 <obj>
           ^predicate.handle <ph>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type conditions
          ^arg-name conditions
          ^source <src>)
   (<src> ^pred-count 1
          ^1 <pred1>)
   (<pred1> ^type unary
            ^handle <ph>
            ^1 <obj>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*condition*1*predicate*current-location
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^conditions <conds>)
   (<conds> ^action.handle is1
            ^arg1.handle rosie
            ^predicate <pred>)
   (<pred> ^handle in1
           ^2 <loc>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type conditions
          ^arg-name conditions
          ^source <src>)
   (<src> ^pred-count 1
          ^1 <pred1>)
   (<pred1> ^type status
            ^name current-location
            ^1 <loc>)
}

sp {task-utils*construct-task-operator*elaborate*construct-task-argument*condition*1*pred*sense
   (state <s> ^name construct-task-operator
              ^command-message <msg>)
   (<msg> ^conditions <conds>)
   (<conds> ^action.handle sense1
            ^agent.handle rosie
            ^arg1 <obj>)
-->
   (<s> ^construct-task-argument <cta>)
   (<cta> ^arg-type conditions
          ^arg-name conditions
          ^source <src>)
   (<src> ^pred-count 1
          ^1 <pred1>)
   (<pred1> ^type unary
            ^handle visible1
            ^1 <obj>)
}
