
# [PARAM] command-message <msg>
#   The parsed command representation from language comprehension
sp {task-utils*construct-task-operator*elaborate*message*from*superoperator
   (state <s> ^name construct-task-operator
              ^superstate.operator.command-message <msg>)
-->
   (<s> ^command-message <msg>)
}

# [PARAM] result-name <str>
#   The name to use when returning the result to the superstate
sp {task-utils*construct-task-operator*elaborate*result-name*from*superoperator
   (state <s> ^name construct-task-operator
              ^superstate.operator.result-name <res-name>)
-->
   (<s> ^result-name <res-name>)
}

# [PARAM] update-tcn <bool>
#       If true, will update the TCN with procedural information from the task-operator
sp {task-utils*construct-task-operator*elaborate*update-tcn*from*superoperator
   (state <s> ^name construct-task-operator
              ^superstate.operator.update-tcn <flag>)
-->
   (<s> ^update-tcn <flag>)
}

### construct-task-argument elaborations

# [FLAG] construct-task-argument.needs-created true
#   present if it hasn't been constructed yet
sp {task-utils*construct-task-operator*elaborate*cta*needs-created
   (state <s> ^name construct-task-operator
              ^construct-task-argument <arg>)
   (<arg> -^created-arg)
-->
   (<arg> ^needs-created true)
}

# [FLAG] uncreated-args true
#   present if there is an argument that still needs to be created
sp {task-utils*construct-task-operator*elaborate*uncreated-args
   (state <s> ^name construct-task-operator
              ^construct-task-argument.needs-created true)
-->
   (<s> ^uncreated-args true)
}

# [FLAG] construct-task-argument.needs-copied true
#   present if an argument hasn't been copied onto the task operator
sp {task-utils*construct-task-operator*elaborate*cta*needs-copied
   (state <s> ^name construct-task-operator
              ^construct-task-argument <cta>
              ^task-operator <task-op>)
   (<cta> ^arg-name <arg-name>
          ^created-arg <arg>)
   (<task-op> -^<arg-name> <arg>)
-->
   (<cta> ^needs-copied true)
}

# [FLAG] uncopied-args true
#   present if there is an argument that still needs to be copied
sp {task-utils*construct-task-operator*elaborate*uncopied-args
   (state <s> ^name construct-task-operator
              ^construct-task-argument.needs-copied true)
-->
   (<s> ^uncopied-args true)
}


# [FLAG] construct-task-argument.abstract true
# abstract arguments will have an object representation that is not a world object
#   and should not be grounded or added to the world

# Elaborate abstract flag from the TCN
sp {task-utils*construct-task-operator*elaborate*cta*object*abstract*true
   (state <s> ^name construct-task-operator
              ^construct-task-argument <arg>
              ^task-concept-network <tcn>)
   (<arg> ^arg-name <arg-name>)
   (<tcn> ^procedural.<arg-name>.id.abstract true)
-->
   (<arg> ^abstract true)
}

## Elaborate abstract flag to children structures
#sp {task-utils*construct-task-operator*elaborate*cta*abstract*children
#   (state <s> ^name construct-task-operator
#              ^construct-task-argument <arg>
#              ^construct-task-argument <child>)
#   (<arg> ^abstract true
#          ^<child-arg> <child>)
#-->
#   (<child> ^abstract true)
#}

