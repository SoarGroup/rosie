#################################################################
####################### construct-task-argument #################

Takes an argument from a command-message from the parser, 
  and constructs an argument representation that 
  will be copied onto the superstate.task-operator 

(<s> ^operator <o> +)
(<o> ^name construct-task-argument
     ^arg-name <arg-name> # The name to use when adding to the task-operator
     ^arg-type <arg-type> # Type of the argument << concept object predicate until-clause >>
     ^message-arg <marg>) # The corresponding argument on the command-message

# arg-type concept
(<o> ^handle <concept-handle>)

# arg-type object
(<o> ^object <obj>)

# arg-type partial-predicate
(<o> ^handle <pred-handle>
     ^2 <obj2>)

# arg-type after-clause/until-clause
(<o> ^predicate <pred>)
(<pred> ^type << state relation >>
        ^handle <pred-handle>
        ^1 <obj1>
        ^2 <obj2>) # only used for relations
(<pred> ^type duration # after 3 minutes
        ^number <n>
        ^unit << minutes seconds >>)
(<pred> ^type clocktime # after 9:00
        ^hour <hour>
        ^minute <min>)


0. Elaborations
   ^task-concept-network (from superstate)
   ^command-message (from superstate)

1. add-object-to-world
   Make sure any objects are represented on the top-state world (adding if not present)
   (Implemented in manage-world-state/add-object-to-world)

2. create-task-argument
   Create the actual task-argument representation

3. add-object-reference-info
   If the command-message has information about how the object was referred to 
     copy that info onto the argument

4. add-argument-to-tcn
   If this is the first time seeing an argument, and it is not in the task-concept-nework,
     add it to the task-concept-network.procedural link

5. store-smem-concepts
   If we did add-argument-to-tcn, we have to store the changes

6. complete-construct-task-argument
   Finish by copying the argument onto the superstate.task-operator

