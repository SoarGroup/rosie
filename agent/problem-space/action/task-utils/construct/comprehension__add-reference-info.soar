### AM: These are special rules that will create a reference-info structure during language comprehension
# This reference-info contains information about the referring expression for a specific object
# For example, if you say 'Pick up the blue mug', the reference-info would include the constraints 'blue' and 'mug'

############ Setting up the reference-info for DP constructions ####################

sp {comprehension*elaborate*process-semantics*DP*make-reference-info
   (state <s> ^operator <o> +
             -^top-state.dialog-context
             -^agent-params.disable-reference-info true
             -^agent-params.hypothetical true)
   (<o> ^name process-semantics
        ^attribute <arg-name>
        ^assigner <asg>
        ^value <obj>)
   (<asg> ^structure-type DP
          ^parent-receiver.semantics <dest-sem>
          ^merged-receiver <rcv>)
   (<obj> ^item-type object)
-->
   (<o> ^make-reference-info <mri>)
   (<mri> ^reference-info <ref-info>
          ^arg-name <arg-name>
          ^receiver <rcv>
          ^referent <obj>
          ^destination <dest-sem>)
}


############ Setting up the reference-info for PP constructions ####################

sp {comprehension*elaborate*process-semantics*PP*make-reference-info
   (state <s> ^operator <o> +
             -^top-state.dialog-context
             -^agent-params.disable-reference-info true
             -^agent-params.hypothetical true)
   (<o> ^name process-semantics
        ^attribute <arg-name>
        ^assigner <asg>
        ^<pred-name> <pred>)
   (<asg> ^structure-type PP
          ^parent-receiver.semantics <dest-sem>
          ^merged-receiver.head <rcv>)
   (<rcv> ^structure-type DP)
   (<pred> ^2 <obj2>)
   (<obj2> ^item-type object)
-->
   (<o> ^make-reference-info <mri>)
   (<mri> ^reference-info <ref-info>
          ^arg-name <arg-name>
          ^receiver <rcv>
          ^referent <obj2>
          ^destination <dest-sem>)
}

############ Creating the reference-info structure ####################

# Copy the base reference-info structure to the destination (if it doesn't exist)
sp {comprehension*apply*process-semantics*copy*reference-info*to*destination
   (state <s> ^operator <o>)
   (<o> ^name process-semantics
        ^make-reference-info <mri>)
   (<mri> ^reference-info <ref-info>
          ^arg-name <arg-name>
          ^destination <dest>)
   (<dest> -^reference-info.arg-name <arg-name>)
-->
   (<dest> ^reference-info <ref-info>)
   (<ref-info> ^arg-name <arg-name>)
}

# Copy the referent onto the reference-info
sp {comprehension*apply*process-semantics*copy*reference-info*referent
   (state <s> ^operator <o>)
   (<o> ^name process-semantics
        ^make-reference-info <mri>)
   (<mri> ^reference-info <ref-info>
          ^referent <obj>)
-->
   (<ref-info> ^referent <obj>)
}

# Copy the referent onto an existing reference-info (happens with multiple groundings)
sp {comprehension*apply*process-semantics*copy*reference-info*referent*already*exists
   (state <s> ^operator <o>)
   (<o> ^name process-semantics
        ^make-reference-info <mri>)
   (<mri> ^arg-name <arg-name>
          ^referent <obj>
          ^destination <dest>)
   (<dest> ^reference-info <ref-info>)
   (<ref-info> ^arg-name <arg-name>)
-->
   (<ref-info> ^referent <obj>)
}

# Copy the constraints onto the reference-info
sp {comprehension*apply*process-semantics*copy*reference-info*constraint
   (state <s> ^operator <o>)
   (<o> ^name process-semantics
        ^make-reference-info <mri>)
   (<mri> ^reference-info <ref-info>
          ^receiver.constraint <c>)
   (<c> ^handle <pred-h>
        ^property.handle <prop-h>)
-->
   (<ref-info> ^constraint.<prop-h> <pred-h>)
}

# Copy a relation constraint
sp {comprehension*apply*process-semantics*copy*reference-info*relation*constraint
   (state <s> ^operator <o>)
   (<o> ^name process-semantics
        ^make-reference-info <mri>)
   (<mri> ^reference-info <ref-info>
          ^receiver.constraint <c>)
   (<c> ^relation <rel>)
   (<rel> ^handle <rel-h>
          ^2 <obj2>)
   (<obj2> ^root-category <cat>)
-->
   (<ref-info> ^relation <rel-cons>)
   (<rel-cons> ^handle <rel-h>
               ^2 <new-obj2>)
   (<new-obj2> ^constraint.category <cat>)
}



