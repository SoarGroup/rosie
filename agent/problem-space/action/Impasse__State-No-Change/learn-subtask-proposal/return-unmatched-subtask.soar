### passes-first-check
# If the task has the 'first' modifier, require that no other subtasks have been performed
sp {learn-subtask-proposal*elaborate*passes-first-check
   (state <s> ^name learn-subtask-proposal
              ^subtask-tcn.modifiers.mod-handle first1
              ^current-task-segment <seg>)
   (<seg> -^performed-subtask <any>)
-->
   (<s> ^passes-first-check true)
}

sp {learn-subtask-proposal*elaborate*passes-first-check*not*first
   (state <s> ^name learn-subtask-proposal
             -^subtask-tcn.modifiers.mod-handle first1)
-->
   (<s> ^passes-first-check true)
}

### passes-once-check
# If the task has the 'perform once' modifier, require that it hasn't been performed before

sp {learn-subtask-proposal*elaborate*passes-once-check
   (state <s> ^name learn-subtask-proposal
              ^subtask-tcn.modifiers.mod-handle once1
              ^subtask-handle <sub-h>
              ^current-task-segment <seg>)
   (<seg> -^performed-subtask <sub-h>)
-->
   (<s> ^passes-once-check true)
}

sp {learn-subtask-proposal*elaborate*passes-once-check*not*once
   (state <s> ^name learn-subtask-proposal
             -^subtask-tcn.modifiers.mod-handle once1)
-->
   (<s> ^passes-once-check true)
}


### passes-precondition-check (SPCASE)
# Used if specific tasks need additional preconditions 

sp {learn-subtask-proposal*elaborate*passes-precondition-check*normal
   (state <s> ^name learn-subtask-proposal
              ^subtask-operator <sub-op>
             -^has-precondition-check)
-->
   (<s> ^passes-precondition-check true)
}

# @SPCASE: For remember with 2 objects, make sure the second is unconfirmed
sp {learn-subtask-proposal*elaborate*passes-precondition-check*remember*second*obj*not-confirmed
   (state <s> ^name learn-subtask-proposal
              ^task-operator <task-op>
              ^subtask-operator <sub-op>
              ^superstate.superstate.world.objects.object <obj2>)
   (<sub-op> ^name op_remember1
             ^arg2.id <obj2>)
   (<obj2> ^predicates.is-confirmed1 not-confirmed1)
-->
   (<s> ^has-precondition-check true
        ^passes-precondition-check true)
}

### propose return-unmatched-subtask if both checks pass

sp {learn-subtask-proposal*propose*return-unmatched-subtask
   (state <s> ^name learn-subtask-proposal
              ^passes-first-check true
              ^passes-once-check true
              ^passes-precondition-check true
              ^subtask-operator <op>)
-->
   (<s> ^operator <o> + >)
   (<o> ^name return-unmatched-subtask
        ^subtask-operator <op>
        ^always-propose true)
}

sp {learn-subtask-proposal*reject*return-unmatched-subtask*if*not*unmatched
   (state <s> ^name learn-subtask-proposal
              ^operator <o> +
             -^no-subtask-matches true)
   (<o> ^name return-unmatched-subtask)
-->
   (<s> ^operator <o> -)
}

# CREATE RESULT
sp {__PROP__SUBT__*problem-space*action*propose*subtask*2
   (state <s> ^name learn-subtask-proposal
              ^operator <o>
              ^superstate.superstate <ss>)
   (<o> ^name return-unmatched-subtask
        ^subtask-operator <op>)
-->
   (<ss> ^operator <op> +)
}

sp {learn-subtask-proposal*apply*return-unmatched-subtask*removed*learned*no*superstate
   (state <s> ^name learn-subtask-proposal
              ^superstate <ss>
              ^operator <o>
              ^subtask-handle <h>)
   (<o> ^name return-unmatched-subtask
        ^subtask-operator <op>)
   (<ss> ^name task-state-no-change
         ^task-concept-network.procedural.subtasks.subtask <sub>)
   (<sub> ^handle <h>
          ^learned-proposal no)
-->
   (<sub> ^learned-proposal no -)
}

