sp {task-state-no-change*propose*learn-subtask-proposal
   (state <s> ^name task-state-no-change
              ^task-concept-network.procedural.subtasks.subtask <sub>)
   (<sub> ^learned-proposal no
          ^handle <sub-h>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name learn-subtask-proposal
        ^subtask-handle <sub-h>)
}

sp {task-state-no-change*reject*learn-subtask-proposal*subgoal-specific
   (state <s> ^name task-state-no-change
              ^operator <o> +
              ^desired.handle <goal-h>
              ^task-concept-network.procedural.subtasks.subtask <sub>)
   (<o> ^name learn-subtask-proposal
        ^subtask-handle <sub-h>)
   (<sub> ^handle <sub-h>
          ^subgoal-specific <> <goal-h>)
-->
   (<s> ^operator <o> -)
}

#sp {subproblem*execute*best*preference*learned*subtask
#   (state <s> ^problem-space.subproblem execute
#              ^operator <o> +
#              ^current-task-segment.learn-subtask-proposal <sub-h>)
#   (<o> ^subtask-handle <sub-h>)
#-->
#   (<s> ^operator <o> !)
#}
#          
#sp {subproblem*execute*apply*subtask*remove*unlearned
#   (state <s> ^problem-space.name action
#              ^problem-space.subproblem execute
#              ^operator.subtask-handle <sub-handle>
#              ^current-task-segment <seg>)
#   (<seg> ^learn-subtask-proposal <sub-handle>)
#-->
#   (<seg> ^learn-subtask-proposal <sub-handle> -)
#}
