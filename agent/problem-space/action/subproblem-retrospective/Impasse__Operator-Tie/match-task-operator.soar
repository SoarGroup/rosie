# Copy the subtask-operator from the superstate
sp {subproblem*retrospective*selection*elaborate*subtask-operator*superstate
   (state <s> ^name selection
              ^problem-space.subproblem retrospective
              ^superstate.subtask-operator <subtask-op>)
-->
   (<s> ^subtask-operator <subtask-op>)
}

# Match the subtask-operator against all of those proposed in the superstate
sp {subproblem*retrospective*selection*elaborate*match-task-operator
   (state <s> ^name selection
              ^problem-space.subproblem retrospective
              ^subtask-operator <subtask-op>)
-->
   (<s> ^match-task-operator <mto>)
   (<mto> ^task-operator <subtask-op>
          ^candidate-tasks <cands>)
}

sp {subproblem*retrospective*selection*elaborate*match-task-operator*candidate-task-operator
   (state <s> ^name selection
              ^problem-space.subproblem retrospective
              ^item <o>
              ^match-task-operator.candidate-tasks <cands>)
-->
   (<cands> ^candidate-task-operator <o>)
}

# Prefer evaluating the matching operator
sp {subproblem*retrospective*selection*prefer*evaluate-operator*if*matches*subtask
   (state <s> ^name selection
              ^problem-space <ps>
              ^operator <o> +
              ^match-task-operator <mto>)
   (<mto> ^successful-match <ssop>)
   (<ps> ^subproblem retrospective)
   (<o> ^name evaluate-operator
        ^superoperator <ssop>)
-->
   (<s> ^operator <o> >)
}
         

## Only evaluate the operator that matches the subtask operator
#sp {subproblem*retrospective*selection*reject*evaluate-operator*if*not*matched
#   (state <s> ^name selection
#              ^problem-space <ps>
#              ^operator <o> +
#              ^match-task-operator <mto>)
#   (<mto> -^successful-match <ssop>)
#   (<ps> ^subproblem retrospective)
#   (<o> ^name evaluate-operator
#        ^superoperator <ssop>)
#-->
#   (<s> ^operator <o> -)
#}
         
