## New version of process-semantics.
## Puts semantics on assigner.parent-receiver.semantics - need to create for every receiver
##    So previously computed semantics for receiver structures are accessible via receiver.semantics 

###### Semantic Conversion

################Elaborations  ##############################

sp {elaborate*assigner
   (state <s> ^name comprehension
              ^segment.merged-assigner <ass>)
-->
   (<s> ^assigner <ass>)}

sp {elaborate*process-semantics*DP-DP
 #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>)   
   (<mre> ^structure-type DP
          ^complement.head.head.lt-referent <sg>
          ^head.lt-referent.handle of1)
-->
   (<s> ^deep-complement true)}

#####!! ADD assigner to operator so bind to a specific assigner!

################################################################################

## Standard case where there is a referent on receiver.
## Not sure about always having the "object" available...

sp {propose*process-semantics*referent
   (state <s> ^name comprehension
             -^deep-complement true
              ^assigner <ass>)
   (<ass> ^merged-receiver.referent <sg>
         -^processed-semantics <sg>#  changed from <sg> to <any> JK prevent multiple results#TODO need for double majhong actions hmmm
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

#JK HACK for now to avoid multiple arg1 (related to retry sentence issue)
  sp {prefer*process-semantics*arg1
#:interrupt
   (state <s> ^name comprehension  
              ^operator <o1> +
              ^operator <o2> +)    
(<o1> ^name process-semantics ^assigner <ass> ^attribute arg1 ^value.relation)
(<o2> ^name process-semantics ^assigner <ass> ^attribute arg1 -^value.relation)
-->
(<s> ^operator <o1> > <o2>)
}                               

## There is not a referent on receiver and have known lt semantic structure to attach it.
sp {propose*process-semantics*no-local-referent*lt-referent
 #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^lt-referent <sg>
         -^referent)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*no-referent*constraint
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <con>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^constraint <con>
          -^head.lt-referent <sg>
          -^lt-referent
          -^referent)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <con>)}

sp {propose*process-semantics*no-referent*head
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> -^constraint <con>
          -^lt-referent
          -^referent
           ^head.referent <head>)
-->
   #(write (crlf) |propose*process-semantics*no-referent*head|)
   (<s> ^operator <op> + =, >)
  # (interrupt)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <head>)}

sp {propose*process-semantics*referent*no-constraint*relation
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <rel>
          ^lt.semantic-structure { <> *copy* <> *embed* <> relation <ss> })
   (<mre> -^constraint <con>
          -^semantics
          -^referent
           ^lt <lli>
          -^lt-referent
          -^head.referent)
   (<lli> ^relation <rel>)
-->
   #(write (crlf) |propose*process-semantics*referent-type*no-constraint*relation|)
 #  (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <rel>)}  ### SPECIAL

sp {propose*process-semantics*referent-type*no-constraint*relation
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <rel>
           ^lt.referent-type literal
          ^lt.semantic-structure { <> *copy* <> *embed* <> relation <ss> })
   (<mre> -^constraint <con>
          -^referent
           ^lt <lli>
          -^lt-referent
          -^head.referent)   
   (<lli> ^relation <rel>)
-->
   #(write (crlf) |propose*process-semantics*referent-type*no-constraint*relation|)
 #  (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <rel>)}  ### SPECIAL

#sp {propose*process-semantics*error
# #:interrupt
#   (state <s> ^name comprehension
#              ^assigner <ass>)
#   (<ass> ^merged-receiver <mre>
#         -^processed-semantics <sg>
#          ^lt <lt>)
#   (<lt> ^semantic-structure { <> *copy* <> *embed* <ss> })
#   (<mre> -^constraint 
#          -^referent
#          -^head.referent
#          -^head.lt-referent
#          -^lt-referent
#           ^lt <lli>)
#   (<lli> -^relation 
#           ^spelling <sg>)
#-->
#   
#   #(write (crlf) |No receiver.referent. No receiver.lt-referent/relation: | <mre> |, | <sg>)
#}

### FAILED REFERENT
sp {propose*process-semantics*failed-referent
 #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
  (<mre> ^lt.relation <rel>
        -^referent
         ^head <head>)
  (<head> ^constraint <con>
          ^failed-grounding <fg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <val>)
   (<val> ^2 <con> 
          ^handle <rel>)}

sp {propose*process-semantics*referent*deeper
#:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^head.lt-referent <sg>
         -^referent
         -^lt-referent
         -^constraint
         -^complement.head.head.lt-referent)
-->   
   #(write (crlf) |propose*process-semantics*referent*deeper.|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}


sp {propose*process-semantics*referent-nil*deeper*constraint
#  :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <con> # was <con> changed to <any> JK prevent multiple results
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^head.lt-referent #<> <con>         # Added JEL 8/28/2016
         -^referent
         -^lt-referent
          ^constraint <con>
         -^complement.head.head.lt-referent)
   (<con> -^referent
          -^property.handle possessive)
-->   
   #(write (crlf) |propose*process-semantics*referent-nil*deeper*constraint - OK?|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <con>)}


sp {propose*process-semantics*referent-nil*deeper*constraint*referent
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <ref>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^head.lt-referent
         -^referent
         -^lt-referent
          ^constraint <con>
         -^complement.head.head.lt-referent)
   (<con> ^referent <ref>)
-->   
   #(write (crlf) |propose*process-semantics*referent-nil*deeper*constraint*referent - OK?|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <ref>)}
#
#

#######################################
### Semantic Structure included in receiver

sp {propose*process-semantics*receiver
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mr>
         -^processed-semantics <sg>
         -^lt.semantic-structure *embed*)
   (<mr> ^lt.semantic-structure { <> *copy* <> *embed* <ss> }
         ^lt-referent <sg>)
-->
   #(write (crlf) | propose*process-semantics*receiver - semantic-structure in receiver???|)
  # (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*receiver*embed
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mr>
          ^lt <lt>
          ^parent-receiver.semantics.<es> <embed>)
   (<lt> ^semantic-structure *embed*
         ^embed-structure <es>)
   (<mr> ^lt.semantic-structure { <> *copy* <> *embed* <ss> }
         -^processed-semantics <sg>
          ^semantics <embed>
         ^lt-referent <sg>)
-->
   #(write (crlf) |Propose*process-semantics*receiver - semantic-structure in receiver???|)
  # (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^receiver <mr>
         ^embed <embed>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*referent2
   (state <s> ^operator <op> +
              ^assigner <ass>)
   (<ass> ^merged-receiver <mr>)
   (<mr> ^lt-referent2 <sg>
         ^lt.semantic-structure2 <ss>)
   (<op> ^name process-semantics) 
-->
   (<op> ^attribute2 <ss>
         ^value2 <sg>)}

################################
## Prepositions
##

## Semantic structure comes from parent of assigner
sp {propose*process-semantics*preposition-relation*head*referent
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^lt.relation.handle <spr>
         -^lt.relation-type ternary
          ^head.referent <sg>)
-->
   #(write (crlf) |propose*process-semantics*preposition-relation*head*referent - OK|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sp-x>)
   (<sp-x> ^handle <spr>
           ^2 <sg>)}

sp {propose*process-semantics*preposition-relation*head*referent*ternary
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^lt.relation.handle <spr>
          ^lt.relation-type ternary
          ^head.referent <sg>
          ^complement.referent <comp>)
-->
   #(write (crlf) |propose*process-semantics*preposition-relation*head*referent*ternary - OK|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sp-x>)
   (<sp-x> ^handle <spr>
           ^2 <sg>
           ^3 <comp>)}
## Semantic structure comes from parent of assigner
sp {propose*process-semantics*preposition-relation*head-head-lt-referent
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^lt.relation.handle <spr>
         -^lt.relation-type ternary
          ^head <head>)
   (<head> ^head.lt-referent <sg>
          -^referent
          -^complement)
-->
#(write (crlf) |propose*process-semantics*preposition-relation*head-head-lt-referent - OK|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sp-x>)
   (<sp-x> ^handle <spr>
           ^2 <sg>)}

sp {propose*process-semantics*preposition-relation*head-head-complement-lt-referent
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^lt.relation.handle <spr>
         -^lt.relation-type ternary
          ^head <head>)
   (<head> ^head.lt-referent <sg>
          -^referent         # JEL 9/8/2016
           ^complement.constraint.relation <rel>)
  -(<rel> ^handle by1)  # hack - JEL 8/23/2016 to avoid double firing

-->
#(write (crlf) |propose*process-semantics*preposition-relation*head-head-complement-lt-referent - OK|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sp-x>)
   (<sp-x> ^handle <spr>
           ^2 <sg>)
   (<sg> ^2 <rel>)}

sp {propose*process-semantics*preposition-relation*head*referent*ternary*head-head-lt-referent
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^lt.relation.handle <spr>
          ^lt.relation-type ternary
         -^head.referent #JK 1/16/2017 to avoid double firing
          ^head.head.lt-referent <sg>
          ^complement.referent <comp>)
-->
#(write (crlf) |propose*process-semantics*preposition-relation*head*referent*ternary*head-head-lt-referent - OK|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sp-x>)
   (<sp-x> ^handle <spr>
           ^2 <sg>
           ^3 <comp>)}
### BUG 
sp {propose*process-semantics*relation*head-head-lt-referent
   #:interrupt
   (state <s> ^name comprehension
               ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure relation)
   (<mre> ^lt.relation.handle <spr>
         -^lt.relation-type ternary
          ^head.head.lt-referent <sg>
         -^head.referent)
-->
   #(write (crlf) |propose*process-semantics*relation*head-head-lt-referent - ok|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute relation
         ^relation <srx>)
   (<srx> ^handle <spr>
          ^2 <sg>)}   # SG is an LTI - if LTI then problem. 

## Should be able to independently have access to complement (possibly complement.head).

sp {propose*process-semantics*relation*head-head-lt-referent*ternary
   #:interrupt
   (state <s> ^name comprehension
               ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure relation)
   (<mre> ^lt.relation.handle <spr>
          ^head.head.lt-referent <sg>
          ^lt.relation-type ternary
          ^complement.referent <comp>
         -^head.referent)
-->
   #(write (crlf) |propose*process-semantics*relation*head-head-lt-referent-ternary - ok|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute relation
         ^relation <srx>)
   (<srx> ^handle <spr>
          ^2 <sg>
          ^3 <comp>)}

## Pulls up a spatial relation embedded in a following clause, such as to the left (of the stove)
sp {propose*process-semantics*relation*semantics
   (state <s> ^name comprehension
               ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
         -^processed-semantics.relation <sg> #JK 1/19/17 added to prevent duplicate predicates where relation is already embedded in one predicate
          ^lt.semantic-structure relation)
   (<mre> ^head.referent.relation <sg>)
   -(<sg> ^{2}.predicates.is-visible1 unknown-visible1)
-->
 #  (write (crlf) |propose*process-semantics*relation*semantics - ok|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute predicate
         ^value <sg>)}                                                                                   
#sp {propose*process-semantics*relation*semantics
#  # :interrupt
#   (state <s> ^name comprehension
#               ^assigner <ass>)
#   (<ass> ^merged-receiver <mre> 
#         -^processed-semantics <sg>
#          ^lt.semantic-structure relation)
#   (<mre> ^head.referent.relation <sg>)
#-->
#   #(write (crlf) |propose*process-semantics*relation*semantics - ok|)
#   (<s> ^operator <op> + =, >)
#   (<op> ^name process-semantics
#         ^assigner <ass>
#         ^attribute predicate
#         ^value <sg>)}

# For when merging "of the game" with the preceeding "name/action/.." 

sp {propose*process-semantics*DP-with-of-DP
 #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^structure-type DP
          ^complement.lt.relation.handle of1
          ^head.lt-referent.handle <name>
          ^complement.head <h1>)
   (<h1> ^head.lt-referent <game>
        -^referent)
-->
   #(write (crlf) |propose*process-semantics*DP-with-of-DP.|)
  # (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sr>
         ^value <xx>)
   (<sr> ^handle of1
         ^2 <xx>)
   (<xx> ^handle <name>
         ^2 <game>)}

sp {propose*process-semantics*DP-with-of-DP*referent
 #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
   (<mre> ^structure-type DP
         -^referent                             # Added to avoid double adding
          ^complement.lt.relation.handle of1
          ^head.lt-referent.handle <name>
          ^complement.head <head>)
   (<head> ^referent <ref>)
-->
   #(write (crlf) |propose*process-semantics*DP-with-of-DP*referent.|)
  # (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sr>
         ^value <xx>)
   (<sr> ^handle of1
         ^2 <xx>)
   (<xx> ^handle <name>
         ^2 <ref>)}

#sp {propose*process-semantics*DP-with-of-DP-PP*referent*complement
 #:interrupt
#   (state <s> ^name comprehension
##              ^assigner <ass>)
#   (<ass> ^merged-receiver <mre> 
#         -^processed-semantics <sg>
#          ^lt.semantic-structure { <> *copy* <> *embed* <ss> })
#   (<mre> ^structure-type DP
#         -^referent                             # Added to avoid double adding
#          ^complement.lt.relation.handle of1
#          ^head.lt-referent.handle <name>
#          ^complement.head <head>)
#   (<head> ^referent <ref>
#           ^complement <comp>)
#   (<comp> ^head.referent <ref2>
#           ^lt.relation.handle <prop2>)
#-->
#   (write (crlf) |propose*process-semantics*DP-with-of-DP*referent-complement.|)
  # (interrupt)
#   (<s> ^operator <op> + =, >)
#   (<op> ^name process-semantics
#         ^assigner <ass>
#         ^attribute <ss>
#         ^relation <sr>
#         ^relation2 <sr2>
#         ^value <xx>)
#   (<sr> ^handle of1
#         ^2 <xx>)
#   (<xx> ^handle <name>
#         ^2 <ref>)
#   (<sr2> ^handle <prop2>
#          ^2 <ref2>)}


# For when merging "for two minutes" with the preceeding "wait" 

sp {propose*process-semantics*PP-with-of-PP-DP
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
   (<mre> ^structure-type PP
          ^head.head.lt-referent.handle <minutes>
          ^head.lt-referent <sg>)  #two
   (<sg> -^property.handle possessive)
-->
   #(write (crlf) |propose*process-semantics*PP-with-of-PP-DP - OK|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sr>)
   (<sr> ^handle <minutes>
         ^2 <sg>)}

###### Need to splice into preceeding structure - Should be a general copy up...
# For when merging "of the garbage" with the preceeding "to the left of" which is already associated with a verb.
sp {propose*process-semantics*PP-with-left-of-PP
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <obj>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }
          ^parent-receiver.head.lt <hlli>)
   (<hlli> ^semantic-entity-type relation
           ^relation.handle <left-of1>)
   (<mre> ^structure-type PP
          ^head.referent <obj>
          ^lt.relation.handle of1)  
-->
   #(write (crlf) |propose*process-semantics*PP-with-left-of-PP - Check-fix.|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute relation
         ^relation <sr>)
   (<sr> ^handle <left-of1>
         ^2 <obj>)}


## Removed because it doesn't have a lt.semantic-structure
#sp {propose*process-semantics*PP-with-left-of-PP2
#   #:interrupt
#   (state <s> ^name comprehension
#              ^assigner <ass>)
#   (<ass> ^merged-receiver <mre> 
#         -^processed-semantics <obj>
#          ^parent-receiver.head.lt <hlli>)
#   (<hlli> ^semantic-entity-type relation
#           ^relation.handle <left-of1>)
#   (<mre> ^structure-type PP
#          ^head.referent <obj>
#          ^lt.relation.handle of1)   
#-->
#   #(write (crlf) |propose*process-semantics*PP-with-left-of-PP2 - Check-fix.|)
#   (<s> ^operator <op> + =, >)
#   (<op> ^name process-semantics
#         ^assigner <ass>
#         ^attribute relation
#         ^relation <sr>)
#   (<sr> ^handle <left-of1>
#         ^2 <obj>)}

########### ADJECTIVES

sp {propose*process-semantics*default*adjunct
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <adj>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
   (<mre> -^referent <sg>
           ^adjunct.lt.relation <adj>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute adjunct
         ^value <adj>)}

sp {propose*process-semantics*adjective
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <id>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
   (<mre> -^referent
           ^lt <lli>)
   (<lli> ^structure-type ADJ
          ^object-feature <of>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <lli>)}

sp {propose*process-semantics*adjective*unknown-name
   #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <ss>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
   (<mre> -^referent 
           ^lt <lli>)
   (<lli> ^structure-type ADJ
         -^referent.handle <pf>
          ^object-feature { <> unknown <of> })
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <xx>
         ^extra-attribute <of>)}

sp {propose*process-semantics*adjective*unknown-object-feature
   #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <lli>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
   (<mre> -^referent 
           ^lt <lli>)
   (<lli> ^structure-type ADJ
         -^referent)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <lli>)}

############ Copy Semantics
# will copy all of the substructures from semantics <sg> to the next higher level
sp {propose*process-semantics*copy
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> -^processed-semantics <sg>
           ^merged-receiver.semantics <sg>
           ^lt.semantic-structure *copy*
          -^lt.copy-structure) 
  -{(<ass> ^merged-receiver.semantics <sg>)  # So only get one match if there are multiple attributes to copy.
    (<sg> -^<att>)} 
--> 
   #(write (crlf) |propose*process-semantics*copy|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^copy-semantics <sg>
         ^assigner <ass>)}

 sp {propose*process-semantics*copy*structure
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> -^processed-semantics <sg>
           ^merged-receiver.semantics <sg>
           ^lt.semantic-structure *copy*
           ^lt.copy-structure <att>) 
  -{(<ass> ^merged-receiver.semantics <sg>)  # So only get one match if there are multiple attributes to copy.
    (<sg> -^<att2>)} 
--> 
   #(write (crlf) |propose*process-semantics*copy|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^copy-semantics <sg>
         ^copy-structure <att>
         ^assigner <ass>)}

 
############ Embed Semantics
# will embed the substructures from semantics <sg> to the next higher level
sp {propose*process-semantics*embed
   #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> -^processed-semantics *embed*
           ^merged-receiver.semantics <sg>
           ^lt <lt>)
   (<lt> ^semantic-structure *embed*
         ^embed-structure <embed>) 
--> 
   #(write (crlf) |propose*process-semantics*embed|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^embed-semantics true
         ^embed-structure <embed>
         ^assigner <ass>)}

# will create ^<att> <sg> from the semantics <sg> pointer (but not copy the the substructure) 
sp {propose*process-semantics*use-semantics
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver.semantics <sg>
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
 -{(<sg> ^relation  <x>)
   (<ass> ^lt.semantic-structure << relation arg1 >>)}  
 -{(<ass> ^merged-receiver.semantics <sg>)
   (<sg> -^<att>)}
  -(<sg> ^<ss>) # Don't double embed
  -(<sg> ^<< arg1 arg2 predicate reference-info >>)
  -{(<sg> ^action <x>)
    (<ass> ^processed-semantics.predicates <x>)}
-->
   #(write (crlf) |propose*process-semantics*use-semantics|)
  # (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*use-semantics2
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver.semantics <sg>
         -^processed-semantics <value>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
 -{(<sg> ^relation  <x>)
   (<ass> ^lt.semantic-structure << relation arg1 >>)}  
 -{(<ass> ^merged-receiver.semantics <sg>)
   (<sg> -^<att>)}
  -(<sg> ^<ss>) # Don't double embed
   (<sg> ^<< predicate arg1 arg2 >> <value>)
-->
   #(write (crlf) |propose*process-semantics*use-semantics2|)
  # (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <value>)}

# will create ^<att> <sg> from the semantics <sg> pointer 
sp {propose*process-semantics*use-semantics*already*same-attribute
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver.semantics <sg>
         -^processed-semantics <value>
          ^lt.semantic-structure { <> *copy* <> *embed* <ss> }) 
 -{(<sg> ^relation  <x>)
   (<ass> ^lt.semantic-structure << relation arg1 >>)}  
 -{(<ass> ^merged-receiver.semantics <sg>)
   (<sg> -^<att>)}
   (<sg> ^<ss> <value>) # Don't double embed
-->
   #(write (crlf) |propose*process-semantics*use-semantics|)
  # (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <value>)}

sp {propose*process-semantics*semantics*relation
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt.semantic-structure relation) 
   (<mre> ^semantics <sem>
          ^<< complement head >>.lt <lt>)  ## New JEL
   (<sem> ^of-relation <sg>)
   (<lt> ^semantic-structure relation
         ^<att> <left-of1>)
-->
   #(write (crlf) |propose*process-semantics*relation|)
  # (interrupt)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute relation
         ^relation <sr>)
   (<sr> ^handle <left-of1>
         ^2 <sg>)}

############ MONITOR

#sp {monitor*process-semantics*semantic
#   (state <s> ^name comprehension
#              ^assigner.merged-receiver.referent <ref>)
#   (<ref> ^object) 
#   -->
#   (write (crlf) |Referent with object: | <ref>)
# #  (interrupt)
#   }

######################### Control Knowledge

sp {comprehension*compare*process-semantics
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name process-semantics)
   (<op2> ^name <<  process-phrase-end failed-referent-grounding process-missing-assigner merge comprehend-word >>)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*process-semantics*prefer-specific
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name process-semantics
          ^relation)
   (<op2> ^name process-semantics
         -^relation)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*process-semantics*prefer-specific2
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name process-semantics
         -^copy-semantics true)
   (<op2> ^name process-semantics
          ^copy-semantics true)
-->
   (<s> ^operator <op1> > <op2>)
}

#JK
sp {comprehension*compare*process-semantics*prefer-specific3
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name process-semantics
          ^assigner <as>
          -^value.property.handle category)
   (<op2> ^name process-semantics
          ^assigner <as>
          ^value.property.handle category)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {evaluate-operator*reject*process-semantics
   (state <s> ^name evaluate-operator
              ^operator <op1> +)
   (<op1> ^name process-semantics)
-->
   (<s> ^operator <op1> -)
}

