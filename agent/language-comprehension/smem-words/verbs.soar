## Example Verbs: Move, Store, Put {down}, Pick {up}, Open, Close, Turn {on/off}, Cook, Discard, Serve, Organize, Set, Clean {up}
##        is, are
#Action verbs: run, hop, dream, imagine [have a direct object, sometimes indirect object]
# Linking Verbs: is, are, seems,  [have a predicate noun or predicate adjective]



smem --add {
           (<prefer> ^spelling |prefer|
                     ^structure-type V
                     ^semantic-structure action
                     ^tense present
                     ^number singular
                     ^assigners  <prefera1>
                               <prefera2>
                               <prefera3>
                    ^referent @prefer1
                    ^converts-to VP)
           (<prefera1> ^structure-type GP  #Gerund Phrase
                       ^relative-position after
                       ^syntactic-structure complement
                       ^semantic-structure *embed*
                       ^embed-structure subclause1
                       ^before <prefera2> 
                       ^before <prefera3>
                       ^required true)
           (<prefera2> ^structure-type P
                       ^lexical-item-spelling |over| 
                       ^before <prefera3>
                       ^syntactic-structure adjunct
                       ^optional true
                       ^referent-type literal)
           (<prefera3> ^structure-type GP  #Gerund Phrase
                       ^syntactic-structure complement2
                       ^semantic-structure *embed*
                       ^embed-structure subclause2
                       ^optional true)
}

smem --add {
           (<consider> ^spelling |consider|
                     ^structure-type V
                     ^semantic-structure action
                     ^tense present
                     ^number singular
                     ^assigners <prefera1>
                                <prefera2>
                                <prefera3>
                   ^referent @consider1
                   ^converts-to VP)
           (<prefera1> ^structure-type GP  #Gerund Phrase
                       ^relative-position after
                       ^syntactic-structure complement
                       ^semantic-structure *embed*
                       ^embed-structure subclause1
                       ^before <prefera2> 
                       ^before <prefera3>
                       ^required true)
           (<prefera2> ^structure-type P
                       ^lexical-item-spelling |over| 
                       ^before <prefera3>
                       ^syntactic-structure adjunct
                       ^optional true
                       ^referent-type literal)
           (<prefera3> ^structure-type GP  #Gerund Phrase
                       ^syntactic-structure complement2
                       ^semantic-structure *embed*
                       ^embed-structure subclause2
                       ^optional true)
}
smem --add {
           (<avoid> ^spelling |avoid|
                     ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <avoida1>
                               <avoida2>
                               <avoida3>
                   ^referent @avoid1
                   ^converts-to VP)
           (<avoida1> ^structure-type GP  #Gerund Phrase
                       ^relative-position after
                       ^syntactic-structure complement
                       ^semantic-structure *embed*
                       ^embed-structure subclause1  #James fix inconsistent use of subclause vs subclause1
                       ^before <avoida2> 
                       ^before <avoida3>
                       ^required true)
           (<avoida2> ^structure-type P
                     ^lexical-item-spelling |over| 
                       ^before <avoida3>
                       ^syntactic-structure adjunct
                       ^semantic-structure on-off-state
                       ^optional true
                       ^referent-type literal)
           (<avoida3> ^structure-type GP  #Gerund Phrase
                       ^semantic-structure *embed*
                       ^embed-structure subclause2
                       ^optional true)
}
smem --add {
           
############################
   #### VERBS

   ## Tell
           (<tell> ^spelling |tell|
                   ^referent @tell1
                   ^super-type @60991) 

           (<throw> ^spelling |throw|
                   ^referent @throw1
                   ^super-type @60998
                   ^directional true) 

           (<change> ^spelling |change|
                      ^referent @change-color1
                      ^super-type @60987
                      ^directional true)

           (<move> ^spelling |move|
                   ^referent @move1
                   ^tense present
                   ^directional true
                   ^super-type @60987)

            ### VERSION OF MOVE ONLY USED FOR TESTING/DEV
           (<testmove> ^spelling |testmove|
                   ^referent @testmove1
                   ^tense present
                   ^directional true
                   ^super-type @60987)

	       (<write> ^spelling |write|
                   ^referent @write1
                   ^tense present
                   ^directional true
                   ^super-type @60987)

		   (<remove> ^spelling |remove|
                   ^referent @remove1
                   #^tense present
                   ^directional true
                   ^super-type @60998)
#    ## MOVE
#           (<moved> ^spelling |moved|
#                   ^referent @move1
#                   ^tense past
#                   ^directional true
#                   ^super-type @60986)
#      ## covered                                        ## JEL - decide was not covered - should be adj. 
#           (<covered> ^spelling |covered-v|
#                   ^current-word |covered|
#                   ^prior-word-stale false
#                   ^prior-word RC
#                   ^prior-word ADV
#                   ^prior-word-first false
#                   ^referent @101149
#                   ^tense past
#                   ^super-type @60986) 
#
#      ## matched
#           (<matched> ^spelling |matched-v|
#                   ^current-word |matched|
#                   ^prior-word-stale false
#                   ^prior-word IS-V
#                   ^prior-word |not|
#                   ^prior-word-first false
#                   ^referent @101147
#                   ^tense past
#                   ^super-type @60986)                             
   ## set
           (<set> ^spelling |set|
                   ^referent @set1
                   ^directional true
                   ^super-type @60997)

 #  ## place
 #          (<place> ^spelling |place|
 #                  ^referent @move1
 #                  ^super-type @60999
 #                  ^directional true)
           
      (<attack> ^spelling |attack|
                ^referent @attack1
                   ^super-type @60999
                   ^directional true)
      
(<fill> ^spelling |fill|
                ^referent @fill1
                   ^super-type @60999
                   ^directional true)
# (Second version just for task-tests)
(<fill2> ^spelling |fill2|
                ^referent @fill2
                   ^super-type @60999
                   ^directional true)
        
   ## PUT
           (<put> ^spelling |put|
                   ^referent @put-down1
                   ^super-type @60985 
                   ^directional true)

           (<set-timer> ^spelling |set-timer|
                   ^referent @set-timer1
                   ^super-type @60985 
                   ^directional true)
           
   ## Said
           (<said> ^spelling |said|
                   ^referent @say1
                   ^tense past
                   ^super-type @60999) 
        

   ## discard
           (<discard> ^spelling |discard|
                      ^referent @discard1
                      ^super-type @60998)
              
    ## pick
           (<pick> ^spelling |pick|
                  ^referent @pick-up1
                  ^super-type @60998
                  ^can-be-part-of |pick-up|)

    ## find
           (<find> ^spelling |find|
                  ^referent @find1
                  ^super-type @60998)

    ## view
           (<view> ^spelling |view|
                  ^referent @view1
                  ^super-type @60998)
          
    ## cook
           (<cook> ^spelling |cook|
                  ^referent @cook1
                  ^super-type @60998)
    ## flip-on
           (<flip-on> ^spelling |flip-on|
                  ^referent @flip-on1
                  ^super-type @60998)
                            
    ## open
           (<open> ^spelling |open|
                   ^referent @open1
                   ^super-type @60997                 
                   ^can-be-part-of |open-up|)
           
     ## close           
           (<close> ^spelling |close|
                    ^referent @close1
                    ^super-type @60997 
                    ^converts-to VP)
                            
    ## lock
           (<lock> ^spelling |lock|
                   ^referent @lock1
                   ^super-type @60998)
           
     ## unlock
           (<unlock> ^spelling |unlock|
                    ^referent @unlock1
                    ^super-type @60998)
                            
    ## press
           (<press> ^spelling |press|
                   ^referent @press1
                   ^super-type @60998)

    ## keep - Keep a water on the table
           (<keep> ^spelling |keep|
                   ^referent @keep1
                   ^super-type @60999)

    ## inspect
           (<inspect> ^spelling |inspect|
                   ^referent @inspect1
                   ^super-type @60997)

    ## guard
           (<guard> ^spelling |guard|
                   ^referent @guard1
                   ^super-type @60997)

    ## monitor
           (<monitor> ^spelling |monitor|
                   ^referent @monitor1
                   ^super-type @60993)

    ## observe
           (<observe> ^spelling |observe|
                   ^referent @observe1
                   ^super-type @60993)
           
    ## organize           
           (<organize> ^spelling |organize|
                    ^referent @organize1
                    ^super-type @60997)

    ## clean           
           (<clean> ^spelling |clean|
                    ^referent @clean1
                    ^super-type @60997)
 

#    ## set           
#           (<set> ^spelling |set|
#                    ^referent @set1
#                    ^super-type @60997)
                     
    ## activate           
           (<activate> ^spelling |activate|
                    ^referent @turn-on1
                    ^super-type @60997)

   ## deactivate
           (<deactivate> ^spelling |deactivate|
                    ^referent @turn-off1
                    ^super-type @60997)
                          
    ## STORE
          (<store> ^spelling |store|
                   ^referent @store1
                   ^super-type @60996)   
    ## plug
          (<plug> ^spelling |plug|
                   ^referent @plug1
                   ^super-type @60999)  
    
          
      ## raise alarm
            (<raise> ^spelling |raise|
                     ^referent @raise1
                     ^super-type @60996)

            (<raise1> ^spelling-single-word |raise-alarm|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @raise1)

   ### roll (cozmo - roll the green cube)
         (<roll> ^spelling |roll|
                 ^referent @roll1
                 ^super-type @60996)

   ### wheelie (cozmo - wheelie on the green cube)
      (<wheelie> ^spelling |wheelie|
                 ^referent @wheelie1
                 ^super-type @60992)
                              

    ## Attach
#          (<attack> ^spelling |attack|
#                   ^referent @attack1
#                   ^super-type @60997) 

#    ## matches
#           (<matches> ^spelling |matches|
#                   ^referent @matches1
#                   ^tense present
#                   ^directional true
#                   ^super-type @60987)
                         
    ## Point
          (<point> ^spelling |point|
                   ^referent @point1
                   ^super-type @60995)

            ## check
           (<check> ^spelling |check|
                   ^super-type @60990
                   ^referent @check1)

           (<test> ^spelling |test|
                   ^super-type @60990 
                   ^referent @101113)

      ## Fetch
     (<fetch> ^spelling |fetch|
             ^referent @fetch1
             ^super-type @60999
             ^directional true)

     (<approach> ^spelling |approach|
             ^referent @approach1
             ^super-type @60998)
           
           (<has> ^spelling |has|
                   ^super-type @60989
                   ^referent @has1)
           
           (<have> ^spelling |have|
                   ^super-type @60989 
                   ^referent @has1)
           
           (<play> ^spelling |play|
                   ^super-type @60999 
                   ^referent @play1)
           
(<wines> ^spelling |wins|
                   ^super-type @60993 
                   ^referent @win1)
           
           (<wine> ^spelling |win|
                   ^super-type @60993 
                   ^referent @win1)
           
           (<lose> ^spelling |lose|
                   ^super-type @60993 
                   ^referent @lose1)
}
smem --add { 
   ## Ignore
         (<ignore> ^spelling |ignore|
                   ^referent @ignore1
                   ^super-type @60988) 
             
          (<attend> ^spelling |attend|
                   ^referent @attend1 
                   ^super-type @60988)
          

           (<attend-to> ^prior-word |attend|
                        ^current-word |to|
                         ^spelling |attend-to|
                         ^super-type @60998
                         ^referent @attend1
                         ^consumes-prior-word true)
                                 
}
## Mobile Verbs
   
## STOP at the intersection/t-intersection/hall/door/hallway on the left.
smem --add {  

            # AM: Added reset-arm command
            (<reset-arm> ^spelling-single-word |reset-arm|
                         ^structure-type CP
                         ^semantic-structure action
                         ^message-type command
                         ^referent @reset-arm1)

           (<stop> ^spelling |stop|
                   ^referent @stop1
                   ^super-type @60995)
           
           
            (<stopx> ^spelling-single-word |stop|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @stop1)

         # 'Skip' or 'Skip the goal'

           (<skip> ^spelling |skip|
                       ^referent @skip1
                       ^super-type @60996)
           
            (<skip-sw> ^spelling-single-word |skip|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @skip1)

         # Complete the following tasks

           (<complete> ^spelling |complete|
                      ^referent @complete1
                      ^super-type @60998)
                                  
         # Finish the task
           (<finish> ^spelling |finish|
                      ^referent @finish1
                      ^super-type @60998)

         # Repeat until <x> or while <x>

           (<repeat> ^spelling |repeat|
                      ^referent @repeat1
                      ^super-type @60997)

            (<repeat-sw> ^spelling-single-word |repeat|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @repeat1)

         
         # 'Continue' or 'Continue the task' or 'Continue move'

           (<continue> ^spelling |continue|
                        ^structure-type V
                        ^semantic-structure action
                        ^tense present
                        ^number singular
                        ^referent @continue1
                        ^assigners <continue-V> <continue-DP>
                        ^converts-to VP)
           (<continue-V> ^structure-type V
                          ^relative-position after
                          ^syntactic-structure nil
                          ^semantic-structure action
                          ^optional true)
           (<continue-DP> ^structure-type DP
                           ^relative-position after
                           ^syntactic-structure nil
                           ^semantic-structure arg1
                           ^optional true)
           
            (<continue-sw> ^spelling-single-word |continue|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @continue1)

         # 'Interrupt' or 'Interrupt store'

           (<interrupt> ^spelling |interrupt|
                        ^structure-type V
                        ^semantic-structure action
                        ^tense present
                        ^number singular
                        ^referent @interrupt1
                        ^assigners <interrupt-V>
                        ^converts-to VP)
           (<interrupt-V> ^structure-type V
                          ^relative-position after
                          ^syntactic-structure nil
                          ^semantic-structure action
                          ^required true)

            (<interrupt-sw> ^spelling-single-word |interrupt|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @interrupt1)

            (<patrol> ^spelling-single-word |patrol|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @patrol1)

            (<advance> ^spelling-single-word |advance|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @advance1)

            (<lead> ^spelling-single-word |lead|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @lead1)

            (<squaredance> ^spelling-single-word |squaredance|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @squaredance1)

            (<recite> ^spelling-single-word |recite|
                     ^structure-type CP
                     ^semantic-structure action
                     ^message-type command
                     ^referent @recite1)
            
           (<deliver> ^spelling |deliver|
                      ^referent @deliver1
                      ^super-type @60999
                      ^directional true)
            
#           (<find> ^spelling |find|
#                      ^referent @find1
#                      ^super-type @60999)
                       
           (<scan> ^spelling |scan|
                      ^referent @scan1
                      ^super-type @60992)
     ## give
           (<give> ^spelling |give|
                   ^referent @give1
                   ^super-type @60999
                   ^directional true)
           
           (<take> ^spelling |take|
                      ^referent @take1
                      ^super-type @60999)
                                  
           (<guid> ^spelling |guide|
                      ^referent @guide1
                      ^super-type @60999)
                                  
           (<perform> ^spelling |perform|
                      ^referent @perform1
                      ^super-type @60998)

           (<bring> ^spelling |bring|
                      ^referent @bring1
                      ^super-type @60999)
                       
           (<serve> ^spelling |serve|
                      ^referent @serve1
                      ^super-type @60999)

           (<use> ^spelling |use|
                  ^referent @use1
                  ^super-type @60999)

           (<pour> ^spelling |pour|
                   ^referent @pour1
                   ^super-type @60999)

           (<heat> ^spelling |heat|
                   ^referent @heat1
                   ^super-type @60999)

# Verbs added by PR for action templates
           (<carry> ^spelling |carry|
                   ^referent @carry1
                   ^super-type @60999)

           (<clear> ^spelling |clear|
                   ^referent @clear1
                   ^super-type @60996)

           (<empty> ^spelling |empty|
                   ^referent @empty1
                   ^super-type @60998)

           (<get> ^spelling |get|
                   ^referent @get1
                   ^super-type @60999)

           (<grab> ^spelling |grab|
                   ^referent @grab1
                   ^super-type @60998)

           (<shut> ^spelling |shut|
                   ^referent @shut1
                   ^super-type @60998)

           (<start> ^spelling |start|
                   ^referent @start1
                   ^super-type @60994)

           (<place> ^spelling |place|
                   ^referent @place1
                   ^super-type @60998)

           (<refrigerate> ^spelling |refrigerate|
                   ^referent @refrigerate1
                   ^super-type @60998)

           (<bake> ^spelling |bake|
                   ^referent @bake1
                   ^super-type @60998)
            
}

smem --add {
	(<scan> ^spelling-single-word |scan|
         ^structure-type CP
         ^semantic-structure action
         ^message-type command
         ^referent @scan1)
  
  (<scanp> ^spelling |scan|
            ^super-type @60995
            ^referent @scan1)


   (<face> ^spelling |face|
           ^referent @face1
           ^super-type @60998)
}
## Drive forward, down the hall

## Turn left/right/around
## Turn left.
## Turn right ten degrees.

## AM: Apr 2020 - Added ability to specify a number of degrees to turn (e.g. Turn right twenty degrees)

smem --add {
     (<turn-left>  ^prior-word |turn|
                   ^current-word |left|
                   ^spelling |turn-left|
                   ^referent @turn1
                   ^super-type <turn-supertype>
                   ^semantic-structure2 arg1
                   ^referent2 @left1
                   ^prior-word-first true)

     (<turn-right> ^prior-word |turn|
                   ^current-word |right|
                   ^spelling |turn-right|
                   ^referent @turn1
                   ^super-type <turn-supertype>
                   ^semantic-structure2 arg1
                   ^referent2 @right1
                   ^prior-word-first true)

    (<turn-around> ^prior-word |turn|
                   ^current-word |around|
                   ^spelling |turn-around|
                   ^referent @turn1
                   ^super-type <turn-supertype>
                   ^semantic-structure2 arg1
                   ^referent2 @around1
                   ^prior-word-first true)

   (<turn-supertype> ^structure-type V
                     ^semantic-structure action
                     ^tense present
                     ^number singular
                     ^assigners <a1>
                     ^converts-to VP)
   # Can accept an optional DP for the units, i.e. twenty degrees
   (<a1> ^structure-type DP
         ^relative-position after
         ^syntactic-structure head
         ^semantic-structure arg2
         ^referent-type literal
         ^optional true)
}

## AM: Added Look Up/Look Down
smem --add {
           (<look> ^spelling |look|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^referent @look1
                   ^converts-to VP)

           (<look-up> ^prior-word |look|
                         ^current-word |up|
                         ^spelling |look-up|
                         ^structure-type CP
                         ^semantic-structure action
                         ^referent @look1
                         ^semantic-structure2 arg1
                         ^referent2 @up1
                         ^prior-word-first true
                         ^message-type command)

           (<look-down> ^prior-word |look|
                         ^current-word |down|
                         ^spelling |look-down|
                         ^structure-type CP
                         ^semantic-structure action
                         ^referent @look1
                         ^semantic-structure2 arg1
                         ^referent2 @down1
                         ^prior-word-first true
                         ^message-type command)
         }

## AM: Added Lift Up/Lift Down
smem --add {
           (<lift> ^spelling |lift|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^referent @lift1
                   ^converts-to VP)

           (<lift-up> ^prior-word |lift|
                         ^current-word |up|
                         ^spelling |lift-up|
                         ^structure-type CP
                         ^semantic-structure action
                         ^referent @lift1
                         ^semantic-structure2 arg1
                         ^referent2 @up1
                         ^prior-word-first true
                         ^message-type command)

           (<lift-down> ^prior-word |lift|
                         ^current-word |down|
                         ^spelling |lift-down|
                         ^structure-type CP
                         ^semantic-structure action
                         ^referent @lift1
                         ^semantic-structure2 arg1
                         ^referent2 @down1
                         ^prior-word-first true
                         ^message-type command)
         }

########## SENSING VERBS
# detect/see/encounter/sense DP
smem --add {  
           (<see> ^spelling |see|
                  ^referent @sense1
                  ^super-type @60997)
           
           (<detect> ^spelling |detect|
                     ^referent @sense1
                     ^super-type @60997)           
            
           (<sensex> ^spelling |sense|
                     ^referent @sense1
                     ^super-type @60997)             
           
           (<encounter> ^spelling |encounter|
                        ^referent @sense1
                      ^super-type @60997)  
             
           (<reach> ^spelling |reach|
                    ^referent @sense1
                    ^super-type @60997)
}
##################### Different ways to say: Drive Forward 
## Go down the hall, go forward, go to the end of the hall, go until you ...: Go PP
smem --add {     
           (<explore> ^spelling |explore|
                      ^referent @explore1
                      ^super-type @60992)
                   
          (<go> ^spelling |go|
                 ^referent @go-to-location1
                 ^super-type @60992)
           
            (<gox> ^spelling-single-word |go|
                   ^structure-type CP
                   ^semantic-structure action
                   ^message-type command
                   ^referent @drive1)          
           ## GO

#     forward
#           (<forward> ^spelling |forward|
#                      ^super-type @60995
#                      ^referent @drive1) 

           (<forwardx> ^spelling-single-word |forward|
                       ^structure-type CP
                       ^semantic-structure action
                       ^message-type command
                       ^referent @drive1) 

#           (<go-forward> ^prior-word |go|
#                         ^current-word |forward|
#                         ^spelling |go-forward|
#                         ^super-type @60992
#                         ^referent @drive1
#                         ^prior-word-first true)
           
           (<go-down> ^prior-word |go|
                      ^current-word |down|
                      ^spelling |go-down|
                      ^super-type @60993
                      ^referent @drive1
                      ^prior-word-first true)

#     drive
           (<drive> ^spelling |drive|
                    ^super-type @60992
                    ^referent @drive1)

           (<drivex> ^spelling-single-word |drive|
                       ^structure-type CP
                       ^semantic-structure action
                       ^message-type command
                       ^referent @drive1) 

           (<drive-forward> ^prior-word |drive|
                            ^current-word |forward|
                         ^spelling |drive-forward|
                         ^super-type @60992
                         ^referent @drive1
                         ^prior-word-first true)

           (<drive-down> ^prior-word |drive|
                      ^current-word |down|
                      ^spelling |drive-down|
                      ^super-type @60993
                      ^referent @drive1
                      ^prior-word-first true)

}

##########  Remember
 
smem --add { 
   ## Heard
           (<heard> ^spelling |heard|
                   ^referent @heard1
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2>
                   ^converts-to VP)
          (<VT1> ^structure-type DP # AM: Changes from PN to DP so that it would ground to a full person object in the world (not just a name)
                 ^before <VT2> 
                 ^relative-position before
                 ^syntactic-structure head
                 ^semantic-structure agent
                 ^required true) 
          (<VT2> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
}


###################################################
# Mental Actions
# AM: I made some major changes/additions, Mar 2020
 
# Remember
# Remember <ref-expr> as <ref-expr> (WM)
# Permanently remember <ref-expr> as <ref-expr> of <ref-expr> (SMEM)
# e.g. Remember the coke as the preferred drink of Mary
#      Permanently remember the current location as the office of Mary
smem --add {            
    (<rem> ^spelling |remember|
           ^referent @remember1
           ^structure-type V
           ^semantic-structure action
           ^tense present
           ^number singular
           ^assigners <VTN> <VT0> <VT1> <VT2> <VT3> <VT4> <VT5>
           ^converts-to VP)
    (<VTN> ^structure-type ADJ
           ^syntactic-structure nil
           ^semantic-structure modifier
           ^optional true)
    (<VT0> ^structure-type ADV
           ^syntactic-structure nil
           ^semantic-structure modifier
           ^lexical-item-spelling |permanently|
           ^optional true)
    (<VT1> ^structure-type DP
           ^before <VT3> <VT5>
           ^relative-position after
           ^syntactic-structure head
           ^semantic-structure arg1
           ^required true)
    (<VT2> ^structure-type P
           ^syntactic-structure nil
           ^lexical-item-spelling |as|
           ^required true)
    (<VT3> ^structure-type DP
           ^before <VT5>
           ^relative-position after
           ^syntactic-structure complement
           ^semantic-structure arg2
           ^required true)
    (<VT4> ^structure-type P
           ^syntactic-structure nil
           ^lexical-item-spelling |of|
           ^optional true)
    (<VT5> ^structure-type DP
           ^relative-position after
           ^syntactic-structure complement
           ^semantic-structure arg3
           ^optional true)
}

# Recall
# Recall the <ref-expr> of <ref-expr> (SMEM)
#   Recall the storage location of a soda. 
# Recall the <ref-expr> when <was-statement> (EPMEM)
#   Recall the current location when Mary was present. 
smem --add {
    (<rem> ^spelling |recall|
           ^referent @recall1
           ^structure-type V
           ^semantic-structure action
           ^tense present
           ^number singular
           ^assigners <ADJ> <ADV> <DP1> <WHEN> <OF> <DP2>
           ^converts-to VP)
    (<ADJ> ^structure-type ADJ
           ^syntactic-structure nil
           ^semantic-structure modifier
           ^optional true)
    (<ADV> ^structure-type ADV
           ^syntactic-structure nil
           ^semantic-structure modifier
           ^optional true)
    (<DP1> ^structure-type DP
           ^relative-position after
           ^before <WHEN> <DP2>
           ^syntactic-structure head
           ^semantic-structure arg1
           ^required true)
    (<WHEN> ^structure-type WHEN-PP
           ^relative-position after
           ^exclusive <DP2>
           ^syntactic-structure complement
           ^semantic-structure arg2
           ^optional true)
    (<OF> ^structure-type P
          ^syntactic-structure nil
          ^lexical-item-spelling |of|
          ^optional true)
    (<DP2> ^structure-type DP
           ^relative-position after
           ^exclusive <WHEN>
           ^syntactic-structure complement
           ^semantic-structure arg2
           ^optional true)
}

smem --add {    
     (<ask> ^spelling |ask|
             ^referent @ask1
             ^structure-type V
             ^semantic-structure action
             ^tense present
             ^number singular
             ^assigners <ADJ> <ADV> <VT1> <VT2> <VT3>
             ^converts-to VP)
    (<ADJ> ^structure-type ADJ
           ^syntactic-structure nil
           ^semantic-structure modifier
           ^optional true)
    (<ADV> ^structure-type ADV
           ^syntactic-structure nil
           ^semantic-structure modifier
           ^optional true)
    (<VT1> ^structure-type PN
           ^before <VT2> <VT3>
           ^relative-position after
           ^syntactic-structure head
           ^semantic-structure agent
           ^optional true) 
    (<VT2> ^structure-type U
           ^exclusive <VT3>
           ^relative-position after
           ^syntactic-structure complement
           ^semantic-structure arg1
           ^optional true) 
    (<VT3> ^structure-type DP
           ^exclusive <VT2>
           ^relative-position after
           ^syntactic-structure complement
           ^semantic-structure arg1
           ^optional true) 
     
}

smem --add {    
           (<say> ^spelling |say|
                   ^referent @say1
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT2> <VT3> <VT4>
                   ^converts-to VP)
          (<VT2> ^structure-type U
                 ^exclusive <VT3>
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
          (<VT3> ^structure-type DP
                 ^exclusive <VT2>
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
          (<VT4> ^structure-type PP
                 ^relative-position after
                 ^syntactic-structure complement2
                 ^semantic-structure arg2
                 ^optional true) 
}

smem --add {    
           (<describe> ^spelling |describe|
                   ^referent @describe1
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT2> <VT3> <VT4>
                   ^converts-to VP)
          (<VT2> ^structure-type U
                 ^exclusive <VT3>
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
          (<VT3> ^structure-type DP
                 ^exclusive <VT2>
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1
                 ^optional true) 
          (<VT4> ^structure-type PP
                 ^relative-position after
                 ^syntactic-structure complement2
                 ^semantic-structure arg2
                 ^optional true) 
     
}
smem --add {
           (<announce> ^spelling |announce|
                   ^referent @announce1
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT2>
                   ^converts-to VP)
          (<VT2> ^structure-type U
                 ^relative-position after
                 ^syntactic-structure complement
                 ^semantic-structure arg1)
     
}

#### Ensure that <cond>
smem --add {
  (<ensure>  ^spelling |ensure| 
         ^structure-type V
         ^referent @ensure1
         ^semantic-structure action
         ^assigners <CP> 
         ^converts-to VP)
   (<CP> ^structure-type CP
          ^relative-position after
          ^semantic-structure *embed*
          ^embed-structure test-subclause
          ^delay-merge true               
          ^syntactic-structure nil
          ^required true)
}
            
  
######### Follow A1202

## Follow the left wall / Follow the right wall
smem --add {
           (<folllow> ^spelling |follow|
                      ^super-type @60993
                      ^referent @follow-wall1)
}
   
smem --add {
           (<orient> ^spelling |orient|
                      ^semantic-structure action
                      ^referent @orient1
                      ^converts-to VP
                      ^structure-type V
                      ^semantic-structure action
                      ^tense present
                      ^number singular
                      ^assigners  <VT1>
                      ^converts-to VP)  
          (<VT1> ^structure-type CARDINAL
                 ^syntactic-structure head
                 ^referent-type literal
                 ^semantic-structure arg1
                 ^required true)
}                         

# AM: The sentence 'Face the red box' didn't work with this included
#smem --add {
#           (<orient> ^spelling |face|
#                      ^semantic-structure action
#                      ^referent @orient1
#                      ^converts-to VP
#                      ^structure-type V
#                      ^semantic-structure action
#                      ^tense present
#                      ^number singular
#                      ^assigners <VT1>
#                      ^converts-to VP) 
#          (<VT1> ^structure-type CARDINAL
#                 ^syntactic-structure head
#                 ^referent-type literal
#                 ^semantic-structure arg1
#                 ^required true)
#}    

smem --add {   
           (<load> ^spelling |load|
                      ^semantic-structure action
                      ^referent @load1
                      ^converts-to VP
                      ^structure-type V
                      ^semantic-structure action
                      ^tense present
                      ^number singular
                      ^assigners <vt1>
                      ^converts-to VP)  
          (<vt1> ^structure-type U
                 ^syntactic-structure head
                 ^referent-type literal
                 ^semantic-structure arg1
                 ^required true)
}        
### Sense Verbs        
            
 
#smem --add {  ## Stack - can take a conjunction of objects to stack
#           
#           (<stack> ^spelling |stack|
#                  ^structure-type V
#                  ^semantic-structure action
#                  ^tense present
#                  ^number singular
#                  ^assigners <stack1> <stack2> <stack3> <stack4> <stack5> 
#                  ^referent @stack1
#                  ^converts-to VP)
#           (<stack1> ^structure-type DP
#                     ^before <stack3>
#                     ^before <stack5>
#                     ^syntactic-structure head
#                     ^semantic-structure arg1
#                     ^required true)
#           (<stack2> ^structure-type CONJ
#                     ^before <stack4>
#                     ^syntactic-structure nil
#                     ^optional true)
#           (<stack3> ^structure-type DP
#                     ^before <stack5>
#                     ^syntactic-structure head
#                     ^semantic-structure arg2
#                     ^optional true)
#           (<stack4> ^structure-type CONJ
#                     ^syntactic-structure nil
#                     ^optional true)
#           (<stack5> ^structure-type DP
#                     ^syntactic-structure head
#                     ^semantic-structure arg3
#                     ^optional true)
#           }           
 
smem --add { 
# turn X on
      ## turn
           (@9011 ^spelling |turn|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <turna1>
                               <turna2>
                               <turna3>
                   ^referent @turn1
                   ^converts-to VP)
           (<turna1> ^structure-type DP
                     ^relative-position after
                     ^syntactic-structure complement
                     ^semantic-structure arg1
                     ^before <turna2> 
                     ^before <turna3>
                     ^optional true)
           (<turna2> ^structure-type ADJ
                     ^exclusive <turna3>
                     ^lexical-item-spelling |on| 
                     ^relative-position after
                     ^after <turna1>
                     ^syntactic-structure adjunct
                     ^semantic-structure on-off-state
                     ^required true
                     ^referent-type literal)
           (<turna3> ^structure-type ADJ
                     ^exclusive <turna2>
                     ^lexical-item-spelling |off|
                     ^relative-position after
                     ^after <turna1>
                     ^syntactic-structure adjunct
                     ^semantic-structure on-off-state
                     ^required true
                     ^referent-type literal)
          ## WAIT
           (<wait> ^spelling-single-word |wait|
                   ^structure-type CP
                   ^message-type wait)
           
            ## WAIT
           (<wait2> ^spelling |wait|
                   ^super-type @60993 
                   ^referent @wait1)
}

#   @60999  Move DP PP (optional - but usually there) ADV
#   @60998  Pick DP ADV
#   @60997  Clean DP ADV PP (optional) 
#   @60996  Store DP (PP optional)
#   @60995  Point PP
#   @60994  Stop
#   @60993  Go-down [DP: the hall] [PP: until...]

### VERB such as Store - has a object (DP) it is moving and a destination specified by a PP

## Should add adverb to it
         
smem --add {            
           (@60999  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <ADJ-MOD> <VT0> <VT1> <VT2> <VT3> <VT4> <VT5> <VT6> <VT7>
                   ^converts-to VP)
           (<ADJ-MOD> ^structure-type ADJ  # First 
                  ^relative-position before
                  ^syntactic-structure nil
                  ^semantic-structure modifier
                  ^optional true)
           (<VT0> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT1> ^structure-type DP                          # you .. 
                   ^relative-position before
                   ^syntactic-structure head
                   ^semantic-structure agent
                   ^optional true)
           (<VT2> ^structure-type V-AUX                       # can
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT3> ^structure-type DP   
                 ^before <VT5> <VT7>                         # what is being moved
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
           (<VT4> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT3> 
                  ^exclusive <VT7>
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT5> ^structure-type PP                  #onto xyz - doesn't allow   - move x from y to z
                  ^after #<VT3> #<VT4>
                  ^exclusive <VT7>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
           (<VT6> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT7> ^structure-type DP                             # Added to handle Give Bob a Tour
                   #^after <VT3>                                        # removed because causing interference with 41 mobil v2
                   ^exclusive <VT5> <VT4>
                   ^relative-position after
                   ^syntactic-structure head
                   ^semantic-structure arg2
                   ^optional true)

 
}
#         
## Has single argument, it is manipulating
## Includes adverb - Pick up the block slowly; pick the block up

smem --add {            
           (@60998 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <ADJ-MOD> <VT1> <VT2> <VT3> <VT4> <VT5>
                   ^converts-to VP)
           (<ADJ-MOD> ^structure-type ADJ  # First 
                  ^relative-position before
                  ^syntactic-structure nil
                  ^semantic-structure modifier
                  ^optional true)
          (<VT1> ^structure-type V-AUX
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^syntactic-structure nil
                 ^optional true)
          (<VT2> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT3> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
          (<VT4> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT3> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT5> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}
   
## Has single argument, such as Set or Organize, not necessarily a movable object.
##  Optional PP - such as until ...
smem --add {            
           (@60997 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular             # added 8/25/2016 JEL
                   ^assigners <VT0> <ADJ-MOD>
                   <VT1> <VT2> <VT3> <VT4> <VT5> <VT6>
                   ^converts-to VP)
           (<ADJ-MOD> ^structure-type ADJ  # First 
                  ^relative-position before
                  ^syntactic-structure nil
                  ^semantic-structure modifier
                  ^optional true)
          (<VT0> ^structure-type DP
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure agent
                 ^optional true)
          (<VT1> ^structure-type V-AUX
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT2> ^structure-type DP
                 ^before <VT3>
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)         
          (<VT3> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT2> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
          (<VT4> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT5> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
          (<VT6> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}        

## Has required dp, optional PP (Store) - 

smem --add {            
           (@60996  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <ADJ-MOD> <VT1> <VT2> <VT3> <VT4> <VT5> <VT6>
                   ^converts-to VP)
           (<ADJ-MOD> ^structure-type ADJ  # First 
                  ^relative-position before
                  ^syntactic-structure nil
                  ^semantic-structure modifier
                  ^optional true)
          (<VT1> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT2> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
          (<VT3> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT2> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT4> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
           (<VT5> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT6> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

### VERB such as Point a destination specified by a PP
         
smem --add {            
           (@60995 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <ADJ-MOD> <VT1> <VT2> <VT3> <VT4> <VT6>
                   ^converts-to VP)
           (<ADJ-MOD> ^structure-type ADJ  # First 
                  ^relative-position before
                  ^syntactic-structure nil
                  ^semantic-structure modifier
                  ^optional true)
          (<VT1> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT2> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg1
                  ^optional true)
           (<VT3> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT2> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true)
           (<VT4> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT6> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

### VERB such as stop that has no arguments except a possible adverb      
smem --add {            
           (@60994 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular 
                   ^assigners <VT0> <VT1> <VT4>
                   ^converts-to VP)
          (<VT0> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT1> ^structure-type ADV  
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}
#
#### VERB such as Forward with an optional a destination specified by a DP or PP, or PP: until
#         
smem --add {            
           (@60993 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT3> <VT4>
                   ^converts-to VP)
          (<VT0> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT1> ^structure-type DP
                  ^before <VT2>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                 # ^referent-type literal
                  ^optional true)
           (<VT2> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg1
                  ^optional true)
           (<VT3> ^structure-type ADV 
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

smem --add {            
           (@60992 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT2> <VT3> <VT4> <VT5>
                   ^converts-to VP)
          (<VT4> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT0> ^structure-type DP
                  ^before <VT3>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^referent-type literal
                  ^optional true)
           (<VT2> ^structure-type ADV 
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)           
          (<VT3> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure relation
                  ^optional true)
          (<VT5> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}
 
# Tell me the answer 
# Tell john if you see a box - 
# Tell me what you saw - 
smem --add {            
           (@60991 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1>  <VT2> <VT4>
                   ^converts-to VP)
          (<VT2> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT0> ^structure-type DP # AM: Changes to DP so the person is grounded to an object
                  ^before <VT1> 
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
           (<VT1> ^structure-type DP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^referent-type literal
                  ^optional true) 
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)     
}

 smem --add {            
           (@60990 ^structure-type V
                  ^semantic-structure action
                  ^tense present
                  ^number singular
                  ^assigners <VT0> <VT1>  <VT4>
                  ^converts-to VP)
          (<VT0> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
           (<VT1> ^structure-type IF-CLAUSE
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)   
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true) 
}

smem --add {            
           (@60989 ^structure-type V
                  ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT0> <VT3> <VT4>
                   ^converts-to VP)
          (<VT4> ^structure-type DP
                 ^relative-position before
                 ^syntactic-structure head
                 ^semantic-structure agent
                 ^optional true)
          (<VT0> ^structure-type V-AUX
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^syntactic-structure nil
                 ^optional true)
          (<VT1> ^structure-type DP# |you have X |
                 ^exclusive <VT2> <VT3> 
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^optional true)
          (<VT2> ^structure-type C-ADJ-P # |you have more than X |
                 ^exclusive <VT1> <VT3> 
                 ^relative-position after
                 ^syntactic-structure predicate
                 ^semantic-structure predicate
                 ^optional true)
           (<VT3> ^structure-type ADJ #|you have lost.|
                 ^exclusive <VT1> <VT2> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
}


## Ignore - supports ignore below
smem --add {            
           (@60988 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT3> <VT4>
                   ^converts-to VP)
          (<VT0> ^structure-type V-AUX
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^syntactic-structure nil
                 ^optional true)
          (<VT1> ^structure-type DP
                 ^exclusive <VT2>
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^optional true)
          (<VT2> ^structure-type P
                 ^exclusive <VT1>
                 ^strip-assigners true
                  ^referent-type literal
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^optional true)
           (<VT3> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT4> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

# move the box from the table to the stove. 
 
smem --add {            
           (@60987  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <ADJ-MOD> <VT0> <VT1> <VT2> <VT3> <VT4> <VT5> <VT7> <VT6>
                   ^converts-to VP)
           (<ADJ-MOD> ^structure-type ADJ  # First 
                  ^relative-position before
                  ^syntactic-structure nil
                  ^semantic-structure modifier
                  ^optional true)
           (<VT0> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT1> ^structure-type DP                          # you .. 
                   ^relative-position before
                   ^syntactic-structure head
                   ^semantic-structure agent
                   ^optional true)
           (<VT2> ^structure-type V-AUX                       # can
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT3> ^structure-type DP                             # what is being moved
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
           (<VT4> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT3> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT5> ^structure-type PP                  #onto xyz - doesn't allow   - move x from y to z
                  ^before <VT6> #<VT4>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  #^repeatable true                   Allowing this confuses things - maybe needed for move x from y to z but should do it differently
                  ^optional true)
           (<VT6> ^structure-type PP                  #onto xyz - doesn't allow   - move x from y to z
                  ^after <VT5> <VT3>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg3
                  ^optional true)
           (<VT7> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)

 
}
   

### VERB such as ... was -> covered PP (by, during, with) 
         
smem --add {            
           (@60986 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2> <VT3> <VT4> 
                   ^converts-to VP)
          (<VT1> ^structure-type V-AUX
                 ^syntactic-structure nil
                 ^relative-position before
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT2> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg1
                  ^optional true)
          (<VT3> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
          (<VT4> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
}

 
smem --add {            
           (@60985  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT0> <VT1> <VT2> <VT3> <VT4> <VT5> <VT6> 
                   ^converts-to VP)
           (<VT0> ^structure-type ADV  #Carefully 
                  ^relative-position before
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
           (<VT1> ^structure-type DP                          # you .. 
                   ^relative-position before
                   ^syntactic-structure head
                   ^semantic-structure agent
                   ^optional true)
           (<VT2> ^structure-type V-AUX                       # can
                 ^relative-position before
                 ^syntactic-structure nil
                 ^semantic-structure action-modifier
                 ^optional true)
          (<VT3> ^structure-type DP  
                 ^before <VT5>                           # what is being moved
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
           (<VT4> ^structure-type CONJP # |move the block and the sphere to the |
                  ^after <VT3> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true) 
           (<VT5> ^structure-type PP                  #onto xyz - doesn't allow   - move x from y to z
                 #^after <VT3> #<VT4>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
           (<VT6> ^structure-type ADV  # Up down slowly ...
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true)
 
}

# Gerunds
smem --add {           
           (<play> ^spelling |playing|
                   ^super-type @20999 
                   ^referent @play1)
           
           (<place> ^spelling |placing|
                   ^super-type @20999 
                   ^referent @place1)
           
           (<move> ^spelling |moving|
                   ^super-type @20999 
                   ^referent @move1)

            (<attack> ^spelling |attacking|
                   ^super-type @20999 
                   ^referent @attack1)
            
            (<write> ^spelling |writing|
                   ^super-type @20999 
                   ^referent @write1)
}


# AM: Added support for present-tense verbs that describe a relation between two things
# structure-type REL_VERB
# Potential examples: 
#   The mug contains water. The person holds a book. The legs support the table. 
smem --add {
   (<sentence> ^construction |*-DP-REL_VERB-DP/N|
               ^structure-type C
               ^converts-to CP
               ^current-word REL_VERB
               ^message-type object-description
               ^prior-word DP
               ^prior-word-first false
               ^assigners <arg1_DP> <rel_verb> <arg2_DP> <arg2_N>)
   (<arg1_DP> ^structure-type DP
              ^relative-position before
              ^syntactic-structure head
              ^semantic-structure arg1
              ^required true)
   (<rel_verb> ^structure-type REL_VERB
               ^syntactic-structure predicate
               ^semantic-structure predicate
               ^before <arg2_DP> <arg2_N>
               ^required true)
   (<arg2_DP> ^structure-type DP
          ^relative-position after
          ^exclusive <arg2_N>
          ^syntactic-structure complement 
          ^semantic-structure arg2
          ^referent-type literal
          ^optional true)
   (<arg2_N> ^structure-type N
          ^relative-position after
          ^exclusive <arg2_DP>
          ^syntactic-structure predicate 
          ^semantic-structure arg2
          ^referent-type literal
          ^optional true)

   ### Instances of such verbs

   (<contains> ^spelling |contains|
               ^referent @contains1
               ^structure-type REL_VERB
               ^tense present
               ^number singular)
}
