##### AFTER
# 
# AFTER <DP>, <VP> - After three minutes, open the microwave.
smem --add {
   (<after> ^spelling |after|
            ^structure-type P
            ^referent @after1
            ^semantic-structure temporal-predicate
            ^message-type command
            ^assigners <clause_DP> <comma> <task>
            ^current-word-first true
            ^converts-to CP)
   (<clause_DP> ^structure-type DP
                ^before <comma>
                ^relative-position after
                ^semantic-structure temporal-clause
                ^syntactic-structure head
                ^required true)
   (<comma> ^structure-type CONJ
           ^required true
           ^relative-position after
           ^before <task> 
           ^syntactic-structure nil)
   (<task> ^structure-type VP
           ^syntactic-structure nil
           ^required true)
}

##### AT
# 
# AT <TIME> <VP> - At 3:00, serve Alice. 
smem --add {
   (<at> ^spelling |at|
         ^structure-type P
         ^referent @at1
         ^semantic-structure temporal-predicate
         ^message-type command
         ^assigners <clause_TIME> <task>
         ^current-word-first true
         ^converts-to CP)
   (<clause_TIME> ^structure-type TIME
                  ^before <task>
                  ^relative-position after
                  ^semantic-structure temporal-clause
                  ^syntactic-structure head
                  ^required true)
   (<task> ^structure-type VP
           ^syntactic-structure nil
           ^required true)
}

##### WHEN
# 
# WHEN <CP>, <VP> - When the meeting is over, open the door
smem --add {
   (<when> ^spelling |when|
            ^structure-type P
            ^referent @when1
            ^semantic-structure temporal-predicate
            ^message-type command
            ^assigners <clause_CP> <comma> <task>
            ^current-word-first true
            ^converts-to CP)
   (<clause_CP> ^structure-type CP
                ^before <comma>
                ^relative-position after
                ^semantic-structure *embed*
                ^embed-structure temporal-clause
                ^syntactic-structure nil
                ^required true)
   (<comma> ^structure-type CONJ
            ^required true
            ^relative-position after
            ^before <task> 
            ^syntactic-structure nil)
   (<task> ^structure-type VP
           ^syntactic-structure nil
           ^required true)
}

##### UNTIL
#
# <VP> until <CP>   - Turn right until the desk is visible.
# <VP> until <TIME> - Monitor the door until 4:00. 

smem --add {                         
   (<until> ^spelling |until|
            ^structure-type P
            ^referent @until1
            ^semantic-structure temporal-predicate
            ^relative-position before
            ^message-type command
            ^assigners <task> <clause_CP> <clause_TIME>
            ^prior-word VP
            ^converts-to CP)
   (<task> ^structure-type VP
           ^syntactic-structure nil
           ^required true)
   (<clause_CP> ^structure-type CP
                ^after <task>
                ^exclusive <clause_TIME>
                ^relative-position after
                ^semantic-structure *embed*
                ^embed-structure temporal-clause
                ^syntactic-structure nil
                ^required true)
   (<clause_TIME> ^structure-type TIME
                  ^after <task>
                  ^exclusive <clause_CP>
                  ^relative-position after
                  ^semantic-structure temporal-clause
                  ^syntactic-structure head
                  ^required true)
}

##### WHILE
#
# <VP> while <CP> - Turn right while the desk is visible.

smem --add {                         
   (<while> ^spelling |while|
            ^structure-type P
            ^referent @while1
            ^semantic-structure temporal-predicate
            ^relative-position before
            ^message-type command
            ^assigners <task> <clause_CP> 
            ^prior-word VP
            ^converts-to CP)
   (<task> ^structure-type VP
           ^syntactic-structure nil
           ^required true)
   (<clause_CP> ^structure-type CP
                ^after <task>
                ^relative-position after
                ^semantic-structure *embed*
                ^embed-structure temporal-clause
                ^syntactic-structure nil
                ^required true)
}

##### FOR
#
# <VP> for <DP> - Drive forward for five seconds.

smem --add {                         
   (<for> ^spelling |for|
          ^structure-type P
          ^referent @for1
          ^semantic-structure temporal-predicate
          ^relative-position before
          ^message-type command
          ^assigners <task> <clause_DP> 
          ^prior-word VP
          ^converts-to CP)
   (<task> ^structure-type VP
           ^syntactic-structure nil
           ^required true)
   (<clause_DP> ^structure-type DP
                ^after <task>
                ^relative-position after
                ^semantic-structure temporal-clause
                ^syntactic-structure head
                ^required true)
}
