# 'is' concept
smem --add {
   (@101148 ^handle is1)
}

# The green block is {big} {a rabbit} {in the pantry} {smaller than the triangle} {that ...}
# The name of an action is slide.
smem --add {
           (<sentence> ^construction |*-DP-is-ADJ/DP/PP/CONJP/RC|
                       ^structure-type C
                       ^converts-to CP
                       ^current-word IS-V
                       ^message-type object-description
                       ^prior-word DP
                       ^prior-word-first true
                       ^assigners <isa> <isl> <isy> <is> <isx> <isb> <isc> <isd> <ise> <isf> <isg> <ish> <isi> <isj>)
           (<isa> ^structure-type DP
                  ^relative-position before
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
          (<isy> ^structure-type CONJP # |The block and spheres are red.|
                  ^after <isa> 
                  ^before <is>
                  ^relative-position before
                  ^syntactic-structure head
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true)  
          (<is> ^structure-type IS-V
                 ^syntactic-structure predicate
                 ^semantic-structure action
                 ^before <ish>
                 ^required true)
           (<isl> ^structure-type V-AUX                       # can
                  ^relative-position after
                  ^syntactic-structure nil
                  ^semantic-structure modifier
                  ^optional true)
           (<isx> ^structure-type ADV  # NOT - referent is negation
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^referent-type literal
                  ^optional true)
           (<isb> ^structure-type ADJ #|The large block is green.|
                  ^exclusive <isc> <isd> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<isc> ^structure-type DP # |The large block is a triangle.|
                  ^exclusive <isb> <isd> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure complement # AM: EDIT: Added so that this is an object, not a single predicate
                  ^semantic-structure arg2
                  ^referent-type literal
                  ^optional true)
           (<isd> ^structure-type N   # In case just get |The red block is rabbit.|  
                  ^exclusive <isb> <isc> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<ise> ^structure-type PP # The block is in the garbage.|
                  ^exclusive <isb> <isc> <isd> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
           (<isf> ^structure-type U #|The name of the game is tictactoe.|
                  ^exclusive <isb> <isc> <isd> <ise> <isg> <ish> <isj> 
                  ^predicted-structure-type ADJ
                  ^relative-position after
                  ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isg> ^structure-type C-ADJ-P # |The block is smaller than the red triangle.|
                  ^exclusive <isb> <isc> <isd> <ise> <isf> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
          (<ish> ^structure-type RC # |The goal is that ....|
                  ^relative-position after
                  ^exclusive <isb> <isc> <isd> <ise> <isf> <isg> <isj> 
                  ^syntactic-structure predicate
                  ^semantic-structure *embed*
                  ^embed-structure subclause
                  ^optional true)
          (<isi> ^structure-type CONJP # |The block is red [and large].| |The block is red and in the garbage.| |The block is red and a triangle.|
                  #^after <isc> <isd> <ise> <isf> <isg> <ish> <isj> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure predicate
                  ^optional true)           
          (<isj> ^structure-type V #|The name of the action is slide.|
                  ^exclusive <isb> <isc> <isd> <ise> <isg> <ish> 
                  ^relative-position after
                  ^strip-assigners true
                  ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
 }
smem --add {
           (<sentence> ^construction |*-PN-is-ADJ/DP/PP/CONJP/RC|
                       ^structure-type C
                       ^converts-to CP
                       ^current-word IS-V
                       ^message-type object-description
                       ^prior-word PN
                       ^prior-word-first true
                       ^assigners <isa> <isl> <isy> <is> <isx> <isb> <isc> <isd> <ise> <isf> <isg> <ish> <isi> <isj>)
           (<isa> ^structure-type PN
                  ^exclusive <isa>
                  ^relative-position before
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
          (<isy> ^structure-type CONJP # |The block and spheres are red.|
                  ^after <isa> 
                  ^before <is>
                  ^relative-position before
                  ^syntactic-structure head
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true)  
          (<is> ^structure-type IS-V
                 ^syntactic-structure predicate
                 ^semantic-structure action
                 ^before <ish>
                 ^required true)
           (<isl> ^structure-type V-AUX                       # can
                 ^relative-position after
                 ^syntactic-structure nil
                 ^semantic-structure modifier
                 ^optional true)
           (<isx> ^structure-type ADV  # NOT - referent is negation
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^referent-type literal
                  ^optional true)
           (<isb> ^structure-type ADJ #|The large block is green.|
                  ^exclusive <isc> <isd> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<isc> ^structure-type DP # |The large block is a triangle.|
                  ^exclusive <isb> <isd> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<isd> ^structure-type N   # In case just get |The red block is rabbit.|  
                  ^exclusive <isb> <isc> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<ise> ^structure-type PP # The block is in the garbage.|
                  ^exclusive <isb> <isc> <isd> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
           (<isf> ^structure-type U #|The name of the game is tictactoe.|
                  ^exclusive <isb> <isc> <isd> <ise> <isg> <ish> <isj> 
                  ^predicted-structure-type ADJ
                  ^relative-position after
                  ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isg> ^structure-type C-ADJ-P # |The block is smaller than the red triangle.|
                  ^exclusive <isb> <isc> <isd> <ise> <isf> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
          (<ish> ^structure-type RC # |The goal is that ....|
                  ^relative-position after
                  ^exclusive <isb> <isc> <isd> <ise> <isf> <isg> <isj> 
                  ^syntactic-structure predicate
                  ^semantic-structure *embed*
                  ^embed-structure subclause
                  ^optional true)
          (<isi> ^structure-type CONJP # |The block is red [and large].| |The block is red and in the garbage.| |The block is red and a triangle.|
                  #^after <isc> <isd> <ise> <isf> <isg> <ish> <isj> 
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure predicate
                  ^optional true)           
          (<isj> ^structure-type V #|The name of the action is slide.|
                  ^exclusive <isb> <isc> <isd> <ise> <isg> <ish> 
                  ^relative-position after
                  ^strip-assigners true
                  ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
 }

smem --add {
           (<sentence> ^construction |CONJP-is-ADJ/DP/PP/CONJP/RC|
                       ^structure-type C
                       ^converts-to CP
                       ^current-word IS-V
                       ^message-type object-description
                       ^prior-word CONJP
                       ^prior-word-first true
                       ^prior-word-first false
                       ^assigners <isa> <isy> <is> <isx> <isb> <isc> <isd> <ise> <isf> <isg> <ish> <isi> <isj>)
           (<isa> ^structure-type DP
                  ^relative-position before
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
          (<isy> ^structure-type CONJP # |The block and spheres are red.|
                  ^after <isa> 
                  ^before <is>
                  ^relative-position before
                  ^syntactic-structure head
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure arg1
                  ^optional true)  
          (<is> ^structure-type IS-V
                 ^syntactic-structure predicate
                 ^semantic-structure action
                 ^before <ish>
                 ^required true)
           (<isx> ^structure-type ADV  # NOT - referent is negation
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^referent-type literal
                  ^optional true)
           (<isb> ^structure-type ADJ #|The large block is green.|
                  ^exclusive <isc> <isd> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<isc> ^structure-type DP # |The large block is a triangle.|
                  ^exclusive <isb> <isd> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                 ^referent-type literal
                  ^optional true)
           (<isd> ^structure-type N   # In case just get |The red block is rabbit.|  
                  ^exclusive <isb> <isc> <ise> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<ise> ^structure-type PP # The block is in the garbage.|
                  ^exclusive <isb> <isc> <isd> <isf> <isg> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
           (<isf> ^structure-type U #|The name of the game is tictactoe.|
                  ^exclusive <isb> <isc> <isd> <ise> <isg> <ish> <isj> 
                  ^predicted-structure-type ADJ
                  ^relative-position after
                  ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isg> ^structure-type C-ADJ-P # |The block is smaller than the red triangle.|
                  ^exclusive <isb> <isc> <isd> <ise> <isf> <ish> <isj> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
          (<ish> ^structure-type RC # |The goal is that ....|
                  ^relative-position after
                  ^exclusive <isb> <isc> <isd> <ise> <isf> <isg> <isj> 
                  ^syntactic-structure predicate
                  ^semantic-structure *embed*
                  ^embed-structure subclause
                  ^optional true)
          (<isi> ^structure-type CONJP # |The block is red [and large].| |The block is red and in the garbage.| |The block is red and a triangle.|
                  ^syntactic-structure predicate
                  ^repeatable true
                  ^semantic-structure *copy*
                  ^copy-structure predicate
                  ^optional true)           
          (<isj> ^structure-type V #|The name of the action is slide.|
                  ^exclusive <isb> <isc> <isd> <ise> <isg> <ish> 
                  ^relative-position after
                  ^strip-assigners true
                  ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
 }
## [Wait until] the chicken is cooked.
## Need to update to include everything from above.
smem --add {
           (<sentence> ^construction |DP-is-ADJ/DP/PP/CONJP/RP|
                       ^structure-type C
                       ^current-word IS-V
                       ^message-type object-description
                       ^semantic-structure action
                       ^referent @101148
                       ^prior-word DP
                       ^prior-word-first false
                       ^assigners <isa> <is> <isx> <isb> <isc> <isd> <ise> <isf> <ish> #<isg> <isi>
                       ^converts-to CP) 
           (<isa> ^structure-type DP
                  ^relative-position before
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
           (<is> ^structure-type IS-V
                 ^syntactic-structure predicate
                 ^before <ish>
                 ^required true)
           (<isx> ^structure-type ADV  # NOT - referent is negation
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^referent-type literal
                  ^optional true)
           (<isb> ^structure-type ADJ #|The large block is green.|
                  ^exclusive <isc> <isd> <ise> <isf> <ish> #<isg>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<isc> ^structure-type DP # |The large block is a triangle.|
                  ^exclusive <isb> <isd> <ise> <ish> #<isf> <isg> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<isd> ^structure-type N   # In case just get |The red block is rabbit.|  
                  ^exclusive <isb> <isc> <ise> <isf> <ish> # <isg> <isi> Commented out <ish> PL 8/19/2020
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
            (<ise> ^structure-type PP # The block is in the garbage.|
                  ^exclusive <isb> <isc> <isd> <isf> <ish> # <isg> Commented out <ish> PL 8/19/2020
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
#           (<isf> ^structure-type U #|The name of the game is tictactoe.|
#                  ^exclusive <isb> <isc> <isd> <ise> <isg> <ish> 
#                  ^predicted-structure-type ADJ
#                  ^relative-position after
#                  ^referent-type literal
#                  ^syntactic-structure complement
#                  ^semantic-structure predicate
#                  ^optional true)
           (<isf> ^structure-type C-ADJ-P # |The block is smaller than the red triangle.|
                  ^exclusive <isb> <isc> <isd> <ise> <ish> #<isf> Commented out <ish> PL 8/19/2020
                  ^relative-position after
                  ^referent-type literal
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
#JK conflict with AM
#   Commented out PL 8/19/2020 
             (<ish> ^structure-type RC # |The goal is that ....|
                     ^relative-position after
                     ^exclusive <isc> <isd> <ise> <isf> <isg> 
                     ^syntactic-structure predicate
                     ^semantic-structure *embed*
                     ^embed-structure subclause
                     ^optional true)
#JK-merge2022
#JK-dev has above commented out, conflict with AM
#             (<ish> ^structure-type RC # |The goal is that ....|
#                     ^relative-position after
#                     ^exclusive <isc> <isd> <ise> <isf> <isg> 
#                     ^syntactic-structure predicate
#                     ^semantic-structure *embed*
#                     ^embed-structure subclause
#                     ^optional true)
#
#          (<isi> ^structure-type CONJP # |The block is red and large.| |The block is red and in the garbage.| |The block is red and a triangle.|
#                  ^after <isc> <isd> <ise> <isf> <isg> <ish>
#                  ^syntactic-structure predicate
#                  ^semantic-structure *embed*
#                  ^embed-structure subclause
#                  ^optional true)
}


############### C-ADJ-P  IF [ more X than Y is Z] then
## [Wait until] the chicken is cooked.
## Need to update to include everything from above.
smem --add {
           (<sentence> ^construction |C-ADJ-P IS /DP/PP/C-ADJP-CONJP/RP|
                       ^structure-type C
                       ^current-word IS-V
                       ^prior-word C-ADJ-P
                       ^prior-word-first false
                       ^semantic-structure action
                       ^referent @101148
                       ^assigners <isa> <isb> <isc> <isd> <ise> 
                       ^converts-to CP) 
           (<isa> ^structure-type C-ADJ-P
                  ^relative-position before
                  ^syntactic-structure head
                   ^semantic-structure *embed*
                   ^embed-structure arg1
                  ^required true)
           (<isb> ^structure-type IS-V
                 ^syntactic-structure predicate
                 ^semantic-structure action
                 ^required true)
           (<isc> ^structure-type ADV  # NOT - referent is negation
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^referent-type literal
                  ^optional true)
           (<isd> ^structure-type ADJ #|The large block is green.|
                  ^exclusive <ise> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
            (<ise> ^structure-type PP # The block is in the garbage.|
                  ^exclusive <isd>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
}


## If first word is unknown - see |*-U-is-DP-T| in constructions-unknown-words.

# Green is a color. Medium is a size. - Already known
smem --add {
           (<sentence> ^construction |*-ADJ-is-DP|
                       ^structure-type CP
                       ^current-word IS-V
                       ^prior-word ADJ
                       ^prior-word-first true
                       ^message-type adjective-definition
                       ^assigners <isa> <isb> <isc>) 
           (<isa> ^structure-type ADJ
                  ^before <isb>
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^referent-type literal
                  ^required true)
           (<isb> ^structure-type IS-V
                  ^after <isa>
                  ^before <isc>
                  ^syntactic-structure predicate
                 ^semantic-structure action
                  ^required true)
           (<isc> ^structure-type DP
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure property
                  ^referent-type literal
                  ^required true)
}

# Sphere is a shape. - Already known
smem --add {
           (<sentence> ^construction |*-N-is-DP|
                       ^structure-type CP
                       ^current-word IS-V
                       ^prior-word N
                       ^prior-word-first true
                       ^message-type adjective-definition
                       ^assigners <isa> <isb> <isc> )#<isd> )
           (<isa> ^structure-type N
                  ^before <isb>
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^referent-type literal
                  ^required true)
           (<isb> ^structure-type IS-V
                 ^semantic-structure action
                  ^after <isa>
                  ^before <isc>
                #  ^lexical-item-spelling |is|
                  ^syntactic-structure predicate
                  ^required true)
           (<isc> ^structure-type DP
                  ^after <isb>
                  ^syntactic-structure predicate
                  ^semantic-structure property
                  ^referent-type literal
                  ^required true)
}


# What is in the pantry?
smem --add {
           (<sentence> ^construction |*-What-is-PP/DP-QT|
                       ^current-word IS-V
                       ^prior-word |what|
                       ^prior-word-first true
                       ^assigners <isb> <isc> <isd> <ise>
                       ^message-type what-is-question
                       ^structure-type S)
           (<isb> ^structure-type IS-V
                 ^semantic-structure action
                  ^syntactic-structure predicate
                  ^required true)
           (<isc> ^structure-type PP
                  ^exclusive <isd>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure relation
                  ^optional true)     
           (<isd> ^structure-type DP
                  ^exclusive <isc>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^optional true)    
           (<ise> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)
}

# What <predicate> is DP?  What color is this? What size is the red triangle?
# syntactic-referent-type N/ADJ
smem --add {
           (<sentence> ^construction |*-What-N-is-DP-QT|
                       ^current-word N
                       ^prior-word |what|
                       ^prior-word-first true
                       ^assigners <isa> <isb> <isc> <isd> <ise>
                       ^message-type predicate-question
                       ^structure-type S)
           (<isa> ^structure-type N
                  ^before <isb>
                  ^syntactic-structure predicate
                  ^semantic-structure property
                  ^referent-type literal
                  ^before <ise>
                  ^required true)
           (<isb> ^structure-type IS-V
                  ^syntactic-structure nil
                  ^semantic-structure nil
                  ^before <ise>
                  ^required true)
           (<isc> ^structure-type DP
                  ^exclusive <isd>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^optional true)
           (<isd> ^structure-type THIS
                  ^exclusive <isc>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^specifier definite                  
                  ^demonstrative true
                  ^optional true)           
           (<ise> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)
}

# Where is the green block?
smem --add {
           (<sentence> ^construction |*-Where-is-DP-QT|
                       ^current-word IS-V
                       ^prior-word |where|
                       ^prior-word-first true
                       ^message-type where-is-question
                       ^assigners <isb> <isc> <isd>
                       ^structure-type S)
           (<isb> ^structure-type IS-V
                  ^before <isc> <isd>
                  ^syntactic-structure predicate
                  ^semantic-structure where-question
                  ^required true)
           (<isc> ^structure-type DP
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
           (<isd> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)
}

# There are zero locations that are not below a block.
### Should extend so can handle unknown...
smem --add {
           (<sentence> ^construction |*-There-is-DP/ADJ/PP|
                       ^structure-type CP
                       ^message-type object-description
                       ^current-word IS-V
                       ^prior-word |there|
                       ^prior-word-first true
                       ^assigners <isb> <isbb> <isc> <isd> <ise>)
          (<isb> ^structure-type IS-V
                  ^before <isc> 
                  ^before <isd>
                  ^before <ise>
                 ^semantic-structure action
                  ^syntactic-structure predicate
                  ^required true)
           (<isbb> ^structure-type ADV  # NOT - referent is negation
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^referent-type literal)
           (<isc> ^structure-type DP
                  ^exclusive <isd> <ise>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                #  ^referent-type literal   # why?  keeps from grounding  
                  ^optional true)
           (<isd> ^structure-type ADJ
                  ^exclusive <isc> <ise>
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true
                  ^referent-type literal)
           (<ise> ^structrure P
                  ^exclusive <isc> <isd>
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^optional true)
}

smem --add {
           (<sentence> ^construction |There-is-ADJ/DP/PP|
                       ^structure-type C
                       ^current-word IS-V
                       ^message-type object-description
                       ^prior-word |there|
                       ^prior-word-first false
                       ^assigners <isa> <isb> <isc> <isd> <ise> <isf>
                       ^converts-to CP) 
           (<isa> ^structure-type IS-V
                  ^before <isb> 
                  ^before <isc>
                  ^before <isd>
                  ^before <ise>
                  ^before <isf>
                  ^semantic-structure action
                  ^syntactic-structure predicate
                  ^required true)
           (<isb> ^structure-type ADV  # NOT - referent is negation
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^referent-type literal)
           (<isc> ^structure-type ADJ
                  ^exclusive <isd> <ise>  <isf>
                  ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isd> ^structure-type DP
                  ^exclusive <isc> <ise> <isf> 
              #   ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<ise> ^structure-type PP
                  ^exclusive <isc> <isd> <isf>
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^optional true)
           (<isf> ^structure-type C-ADJ-P
                  ^exclusive <isc> <isd> <ise> 
              #   ^referent-type literal
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
}


# Is the green sphere on the table?
# Is the read arch to the right of the green sphere?
# Is this red?
# Is the large sphere green? - 104 
# Is this a sphere?
# Is the large orange block a sphere?

### Should extend so can handle unknown...
smem --add {
           (<sentence> ^construction |*-Is-DP-DP/ADJ/PP?|
                       ^structure-type S
                       ^message-type object-question
                       ^current-word is
                       ^prior-word |*|
                       ^assigners <isb> <isd> <ise> <isf> <isg>)
           (<isb> ^structure-type DP
                  ^before <isd> <ise> <isf>
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^specifier definite                  
                  ^demonstrative true
                  ^required true)                      
           (<isd> ^structure-type DP
                  ^exclusive <ise> <isf> 
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<ise> ^structure-type ADJ
                  ^exclusive <isd> <isf>
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<isf> ^structure-type PP
                  ^exclusive <isd> <ise>
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)

           (<isg> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)

}

### Should extend so can handle unknown...
smem --add {
           (<sentence> ^construction |*-Is-DP-DP/ADJ/PP?|
                       ^structure-type S
                       ^message-type object-question
                       ^current-word D
                       ^prior-word-first true
                       ^prior-word IS-V
                       ^assigners <isa> <isb> <isd> <ise> <isf> <isg>)
          (<isa> ^structure-type IS-V
                  ^before <isb> 
                  ^before <isc>
                  ^before <isd>
                  ^before <ise>
                  ^syntactic-structure predicate
                  ^required true)
           (<isb> ^structure-type DP
                  ^before <isd> <ise> <isf>
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^specifier definite                  
                  ^demonstrative true
                  ^required true)                      
           (<isd> ^structure-type DP
                  ^exclusive <ise> <isf> 
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<ise> ^structure-type ADJ
                  ^after <isb>
                  ^exclusive <isd> <isf>
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal
                  ^optional true)
           (<isf> ^structure-type PP
                  ^exclusive <isd> <ise>
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)

           (<isg> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)

}
