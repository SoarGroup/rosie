##If CP << , then >> CP. 

smem --add {
           
           (<is>  ^spelling |whenever| 
                  ^structure-type C  ## !
                  ^message-type whenever	
                  #^hypothetical true
                  ^assigners <IS0> <IS1> <IS2> <IS3>
                  ^current-word-first true
                  ^converts-to CP)  ##!
          (<IS0> ^structure-type VP
                 ^exclusive <IS1>
                 ^before <IS2> <IS3>
                 ^relative-position after
                 ^semantic-structure *embed*
                 ^embed-structure if-subclause
                 ^delay-merge true               # hack - it will cause merges to delay until there are no comprehend-constructions coming.
                 ^syntactic-structure nil
                 ^required true)
          (<IS1> ^structure-type CP
                 ^exclusive <IS0>
                 ^before <IS2> <IS3>
                 ^relative-position after
                 ^semantic-structure *embed*
                 ^embed-structure if-subclause
                 ^delay-merge true               # hack - it will cause merges to delay until there are no comprehend-constructions coming.
                 ^syntactic-structure nil
                 ^required true)
          (<IS2> ^structure-type THEN
                 ^before <IS3>
                 ^required true
                 ^syntactic-structure nil)
          (<IS3> ^structure-type CP
                 ^semantic-structure *embed*
                 ^embed-structure then-subclause
                 ^syntactic-structure nil
                 ^required true)
          
}
        
smem --add {(<then> ^spelling |then|
                    ^structure-type THEN)
                        
           
           (<is>  ^spelling |if| 
                  ^structure-type C  ## !
                  ^message-type conditional	
                  #^hypothetical true
                  ^assigners <IS0> <IS1> <IS2> <IS3> 
                  ^current-word-first true
                  ^converts-to CP)  ##!
          (<IS0> ^structure-type VP
                 ^exclusive <IS1>
                 ^before <IS2> <IS3> 
                 ^relative-position after
                 ^semantic-structure *embed*
                 ^embed-structure if-subclause
                 ^delay-merge true               # hack - it will cause merges to delay until there are no comprehend-constructions coming.
                 ^syntactic-structure nil
                 ^required true)
          (<IS1> ^structure-type CP
                 ^exclusive <IS0>
                 ^before <IS2> <IS3> 
                 ^relative-position after
                 ^semantic-structure *embed*
                 ^embed-structure if-subclause
                 ^delay-merge true               # hack - it will cause merges to delay until there are no comprehend-constructions coming.
                 ^syntactic-structure nil
                 ^required true)
          (<IS2> ^structure-type THEN
                 ^before <IS3> 
                 ^required true
                 ^syntactic-structure nil)
          (<IS3> ^structure-type CP
                 ^semantic-structure *embed*
                 ^embed-structure then-subclause
                 ^syntactic-structure nil
                 ^required true)
          
}
        
#smem --add {                   
#           
#           (<is>  ^spelling |when| 
#                  ^structure-type C  ## !
#                  ^message-type conditional	
#                  #^hypothetical true
#                  ^assigners <IS1> <IS2> <IS4># <IS3>
#                  ^current-word-first true
#                  ^converts-to CP)  ##!
#          (<IS1> ^structure-type CP
#                 ^before <IS2> <IS4>
#                 ^relative-position after
#                 ^semantic-structure *embed*
#                 ^embed-structure when-subclause
#                 ^delay-merge true               # hack - it will cause merges to delay until there are no comprehend-constructions coming.
#                 ^syntactic-structure nil
#                 ^required true)
#          (<IS2> ^structure-type SEMICOLON
#                 ^before <IS4>
#                 ^required true
#                 ^syntactic-structure nil)
#          (<IS4> ^structure-type CP
#                 ^semantic-structure *embed*
#                 ^embed-structure then-subclause
#                 ^syntactic-structure nil
#                 ^required true)
#          
#}

       
# AM: Moved 'while' implementation to temporal-clauses.soar
# @MODIFIERS
#smem --add {                   
#           (<is>  ^spelling |while| 
#                  ^structure-type C  ## !
#                  ^message-type conditional	
#                  #^hypothetical true
#                  ^assigners <IS1> <IS2> <IS4># <IS3>
#                  ^current-word-first true
#                  ^converts-to CP)  ##!
#          (<IS1> ^structure-type CP
#                 ^before <IS2> <IS4>
#                 ^relative-position after
#                 ^semantic-structure *embed*
#                 ^embed-structure while-subclause
#                 ^delay-merge true               # hack - it will cause merges to delay until there are no comprehend-constructions coming.
#                 ^syntactic-structure nil
#                 ^required true)
#          (<IS2> ^structure-type SEMICOLON
#                 ^before <IS4>
#                 ^required true
#                 ^syntactic-structure nil)
#          (<IS4> ^structure-type CP
#                 ^semantic-structure *embed*
#                 ^embed-structure then-subclause
#                 ^syntactic-structure nil
#                 ^required true)
#          
#}


## Remove 8/25/2015 because subsumed by check definition.
# check if the conference room is empty
# ask if someone is there.
# you can CP if the X is Y. 
# if CP
#        
smem --add {(<is>  ^spelling |V-if| 
                   ^current-word |if|
                   ^current-word |whether|
                   ^hypothetical true
                   ^prior-word V
                   ^structure-type IF
                   ^converts-to IF-CLAUSE	
                   ^assigners <IS1>
                   ^current-word-first false)
          (<IS1> ^structure-type CP
                 ^relative-position after
                  ^semantic-structure *embed*
                  ^embed-structure if-subclause
                 ^syntactic-structure nil
                 ^required true)
}
   
