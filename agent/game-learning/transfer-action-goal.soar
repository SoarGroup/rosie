sp {transfer-action-goal*elaborate*super-operator*relearn
   (state <s> ^name transfer-action-goal
              ^superstate.operator <o>)
   (<o> ^check yes)
-->
(<s> ^relearn yes)
}

sp {transfer-action-goal*elaborate*super-operator
   (state <s> ^name transfer-action-goal
              ^superstate.operator <o>)
    (<o> ^type <type>
         ^structure <st>
         ^handle-name <handle>)
    (<st> ^from <game>)
  -{(<st> ^from {<game2> < <game>})
    (<s> -^top-state.dialog-context.name <game2>)}
  -{(<s> ^top-state.dialog-context.name <game>)}
-->
    (<s> ^gtype <type>
         ^game <game>)
        # ^retrieve-handle <handle>)
}

sp {transfer-action-goal*learn-predicate*action
    :o-support
   (state <s> ^name transfer-action-goal
              ^gtype action
             -^relearn yes
              ^retrieve-handle <handle>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> ^interaction.status <status> ^interaction.changes <changes>)
   (<dc> ^structure <pred>)
   (<pred> ^actions <act>)
-->
   (<act> ^retrieve-handle <handle>)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type already-learned-action
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}

sp {transfer-action-goal*learn-predicate*failure
    :o-support
   (state <s> ^name transfer-action-goal
              ^gtype failure
             -^relearn yes
              ^retrieve-handle <handle>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> ^interaction.status <status> ^interaction.changes <changes>)
   (<dc> ^structure <pred>)
   (<pred> ^failures <act>)
-->
   (<act> ^retrieve-handle <handle>)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type already-learned-failure
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}

sp {transfer-action-goal*learn-predicate*goal
    :o-support
   (state <s> ^name transfer-action-goal
              ^gtype goal
             -^relearn yes
              ^retrieve-handle <handle>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> ^interaction.status <status> ^interaction.changes <changes>)
   (<dc> ^structure <pred>)
   (<pred> ^goals <act>)
-->
   (<act> ^retrieve-handle <handle>)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type already-learned-goal
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}

#JK IF ASSUMING ONE NAME, don't need to relearn predicate UNCOMMENT ALL BELOW
sp {transfer-action-goal*propose*learn-predicate*relearn
   (state <s> ^name transfer-action-goal
              ^superstate.operator.structure <t>
              ^relearn yes
              ^gtype <type>)
-->
   (<s> ^operator <o> + >)
   (<o> ^name learn-predicate
        ^structure <t>
        ^type <type>)
}

sp {transfer-action-goal*apply*learn-predicate
   (state <s> ^name transfer-action-goal
              ^top-state.dialog-context <dc>
              ^operator <o>
              ^superstate <ss>)
   (<ss> ^new-handle <handle> ^ps-copy <ps>)
   (<o> ^name learn-predicate ^structure <t> ^type <type>)
   (<dc> ^name <game>)
   (<t> ^argnum <an> ^item-type <it> ^primary-rtype <pr> ^type <g> 
   		^word-structure <ws> ^type << goal failure >>) #^predicate-structure <ps> 
   (<ws> ^spelling <spell>)
-->
   (<s> ^gtype <type>
        ^game <name>
        ^structure <stuc>)
   (<dc> ^learn-link <stuc>) 
   (<stuc> ^handle <handle> ^from <game> ^formated predicate ^aname <handle> ^potential-args <pa1> ^parameter-set <ps1>
           ^argnum <an> ^item-type <it> ^nlp-set <ps> 
		   ^primary-rtype <pr> ^type <g> #^word-structure <ws2> 
		   ^predicate-structure <ps>)
   #(<ws2> ^referent <ref> ^spelling <spell>)
   #(<ref> ^handle <handle>)#^word-structure <ws2>)#JK temp triple action 
#JK2 only one spelling version
   (<ps1> ^argnum <an>)
   (<ps> ^aname <handle>)
}

sp {transfer-action-goal*apply*learn-predicate*action
   (state <s> ^name transfer-action-goal
              ^top-state.dialog-context <dc>
              ^operator <o>
              ^superstate <ss>)
   (<ss> ^new-handle <handle> ^ps-copy <ps>)
   (<o> ^name learn-predicate ^structure <t> ^type <type>)
   (<dc> ^name <game>)
   (<t> ^argnum <an> ^item-type <it> ^primary-rtype <pr> ^type <g> ^word-structure <ws> ^type action ^verb-structure <vs>)#^predicate-structure <ps> 
   (<ws> ^spelling <spell>)
-->
   (<s> ^gtype <type>
        ^game <name>
        ^structure <stuc>)
   (<dc> ^learn-link <stuc>) 
   (<stuc> ^handle <handle> ^from <game> ^formated predicate ^aname <handle> ^potential-args <pa1> ^parameter-set <ps1> ^verb-structure <vs>
           ^argnum <an> ^item-type <it> ^nlp-set <ps> 
		   ^primary-rtype <pr> ^type <g> #^word-structure <ws2> 
		   ^predicate-structure <ps>)
   #(<ws2> ^referent <ref> ^spelling <spell>)
   #(<ref> ^handle <handle>)# JK temp ^word-structure <ws2>)
   (<ps1> ^argnum <an>)
   (<ps> ^aname <handle>)
}

#trying to fix triple pass! GDS issue not sure why, for now just do two games
#sp {transfer-action-goal*apply*learn-predicate
#:interrupt
#   (state <s> ^name transfer-action-goal
#              ^top-state.dialog-context <dc>
#              ^operator <o>
#              ^superstate <ss>)
#   (<ss> ^new-handle <handle> ^ps-copy <ps>)
#   (<o> ^name learn-predicate ^structure <t> ^type <type>)
#   (<dc> ^name <game>)
#   (<t> ^argnum <an> ^item-type <it> ^primary-rtype <pr> ^type <g> ^word-structure <ws>)#^predicate-structure <ps> 
#   (<ws> ^spelling <spell>)
#-->
#   (<s> ^gtype <type>
#        ^game <name>
#        ^structure <stuc>)
#   (<dc> ^learn-link <stuc>) 
#   (<stuc> ^handle <handle> ^from <game> ^formated predicate #^potential-args <pa1> ^parameter-set <ps1>
#           ^argnum <an> ^item-type <it> ^primary-rtype <pr> ^type <g> ^word-structure <ws2> ^predicate-structure <ps>)
#   (<ws2> ^referent <ref> ^spelling <spell>)
#   (<ref> ^handle <handle> ^word-structure <ws2>)
#   #(<ps1> ^argnum <an>)
#   #(<ps> ^aname <handle>)
#}


#dumb 2
sp {transfer-final*propose*learn-predicate*relearn
   (state <s> ^name transfer-final
              ^superstate.operator <sop>)
   (<sop> ^structure <t>
          ^type <type>)
-->
   (<s> ^operator <o> + >)
   (<o> ^name learn-predicate
        ^structure <t>
        ^type <type>)
}

#sp {transfer-final*apply*learn-predicate
#   (state <s> ^name transfer-final
#              ^top-state.dialog-context <dc>
#              ^operator <o>
#              ^superstate <ss>)
#   (<ss> ^new-handle <handle> ^ps-copy <ps>)
#   (<o> ^name learn-predicate ^structure <t> ^type <type>)
#   (<dc> ^name <game>)
#   (<t> ^argnum <an> ^item-type <it> ^primary-rtype <pr> ^type <g> ^word-structure <ws>)#^predicate-structure <ps> 
#   (<ws> ^spelling <spell>)
#-->
#   (<s> ^gtype <type>
#        ^game <name>
#        ^structure <stuc>)
#   (<dc> ^learn-link <stuc>) 
#   (<stuc> ^handle <handle> ^from <game> ^formated predicate ^aname <handle> ^potential-args <pa1> ^parameter-set <ps1>
#           ^argnum <an> ^item-type <it> ^nlp-set <ps> ^primary-rtype <pr> ^type <g> ^word-structure <ws2>)
#   (<ws2> ^referent <ref> ^spelling <spell>)
#   (<ref> ^handle <handle> ^word-structure <ws2>)
#   (<ps1> ^argnum <an>)
#   (<ps> ^aname <handle>)
#}

sp {learn-predicate*elaborate*from*transfer-final
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.name <name>
              ^superstate <ss>)
   (<ss> ^name transfer-final ^operator <op>)
   (<op> ^structure <t> ^type <type>)
-->
   (<s> ^gtype <type>
      #  ^retrieve-handle <handle>
        #^parsed-structure <ps>
        ^game <name>
        ^<type> <t>
        ^main-type <type>)
 }

#retrieve-handle
#sp {learn-predicate*elaborate*dialog-context*action
#    :o-support
#   (state <s> ^name learn-predicate
#              ^top-state.dialog-context.structure.actions <act>
#              ^superstate <ss>)
#   (<ss> ^name transfer-action-goal ^retrieve-handle <handle> ^gtype action)
#
#-->
#   (<act> ^retrieve-handle <handle>)
# }
#sp {learn-predicate*elaborate*dialog-context*goal
#    :o-support
#   (state <s> ^name learn-predicate
#              ^top-state.dialog-context.structure.goals <act>
#              ^superstate <ss>)
#   (<ss> ^name transfer-action-goal ^retrieve-handle <handle> ^gtype goal)
#
#-->
#   (<act> ^retrieve-handle <handle>)
# }
#
#sp {learn-predicate*elaborate*dialog-context*failure
#    :o-support
#   (state <s> ^name learn-predicate
#              ^top-state.dialog-context.structure.failures <act>
#              ^superstate <ss>)
#   (<ss> ^name transfer-action-goal ^retrieve-handle <handle> ^gtype failure)
#-->
#   (<act> ^retrieve-handle <handle>)
# }

#if suceed store game from in smem and respond with (I know the task
sp {learn-predicate*elaborate*on-smem*result
   (state <s> ^name learn-predicate
              ^operator <o>
              ^smem.command <sc>
              ^top-state.dialog-context.name <name>
              ^superstate <ss>)
   (<o> -^duplicate-of ^type <type>)
   (<ss> ^name transfer-action-goal ^superstate.operator.structure <t> ^gtype <type>)
-->
    (<t> ^from <name>)
   # (<sc> ^store <t>)
    (<s> ^stored-transfer <t>)
 }
#TODO JK depricated?
#sp {learn-predicate*elaborate*transfered-action
#   (state <s> ^name learn-predicate
#              ^operator <o>
#              ^smem.command <sc>
#              ^stored-transfer <t>
#              ^top-state.interaction.status <status>
#              ^top-state.interaction.changes <changes>)
#   (<o> -^duplicate-of ^type action)
#-->
##    (<sc> ^store <t>)#TODO need store that strips out aname, nlp-set like original storing
#   (<changes> ^outgoing-message <msg>)
#   (<msg> ^type already-learned-action
#          ^complete-message true)
#   (<status> ^performed.learning-event <de>)
#   (<de> ^type game-name
#         ^originator agent)
#}
#sp {learn-predicate*elaborate*transfered-goal
#   (state <s> ^name learn-predicate
#              ^operator <o>
#              ^smem.command <sc>
#              ^stored-transfer <t>
#              ^top-state.interaction.status <status>
#              ^top-state.interaction.changes <changes>)
#   (<o> -^duplicate-of ^type goal)
#-->
# #   (<sc> ^store <t>)#TODO need store that strips out aname, nlp-set like original storing
#   (<changes> ^outgoing-message <msg>)
#   (<msg> ^type already-learned-goal
#          ^complete-message true)
#   (<status> ^performed.learning-event <de>)
#   (<de> ^type game-name
#         ^originator agent)
#}
#sp {learn-predicate*elaborate*transfered-failure
#   (state <s> ^name learn-predicate
#              ^operator <o>
#              ^smem.command <sc>
#              ^stored-transfer <t>
#              ^top-state.interaction.status <status>
#              ^top-state.interaction.changes <changes>)
#   (<o> -^duplicate-of ^type failure)
#-->
# #   (<sc> ^store <t>)#TODO need store that strips out aname, nlp-set like original storing
#   (<changes> ^outgoing-message <msg>)
#   (<msg> ^type already-learned-failure
#          ^complete-message true)
#   (<status> ^performed.learning-event <de>)
#   (<de> ^type game-name
#         ^originator agent)
#}
