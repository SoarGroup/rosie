#JK move to appropriate location
#elabroate volume if it exists for object onto object


sp {perception-monitor*elaborate*object*volume
	(state <s> ^superstate nil
            ^perception-monitor.object-monitor.object-info <obj>)
 	(<obj> ^world-obj <wmobj> ^differences.belief-vol <bv>)
  	(<bv> ^type volume ^result.record.value <vol>)
   	(<wmobj> ^predicates <p>)
-->
	(<p> ^volume <vol>)
}

sp {learn-predicate*elaborate*verb-structure
    :o-support
   (state <s> ^name learn-predicate
              ^gtype action
              ^verb-structure <vs>
              ^action <a>)
-->
    (<a> ^verb-structure <vs>)
}

sp {learn-predicate*elaborate*input-args
   (state <s> ^name learn-predicate
              ^gtype <gtype>
             -^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
   (<T5> ^handle <name> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype <rtype> ^input <a1>)#^parameter.{1}.param-id <a1>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}

#hmm not sure if right anymore
#try doing it for non parameters too
sp {learn-predicate*elaborate*input-args*set-to-single*objects
   (state <s> ^name learn-predicate
              ^gtype <gtype>
             -^top-state.dialog-context.learning-predicate.name <name>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set) #^parameter.num 0) #JK nlp new problem
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^result.set <res> ^attribute input-arg ^rtype single ^input <a1>)# ^parameter.{1}.param-id <a1>
   (<nlps> ^aname <name>)
-->
   (<res> ^instance <i15>)
   (<i15> ^1 <obj>)
}

#JK REMOVED deep-copy sentence change                                                             
#sp {learn-predicate*elaborate*input-args*learning-predicate
#   (state <s> ^name learn-predicate
#              ^top-state.dialog-context.learning-predicate.name <name>
#              ^predicate <T5>)
#   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
#   (<c> ^attribute input-arg)
#   (<nlps> ^aname <name>)
#-->
#   (<c> ^result.set <res>)
#}
sp {learn-predicate*elaborate*input-args*object*single
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate <lp>
              ^world.objects.object <obj>
              ^predicate <T5>)
   (<lp> ^name <name> ^usage-args.<argin> <a1>)
   (<a1> ^rtype single ^result.set <s3>)
   (<s3> ^instance <i5>)
   (<i5> ^1 <obja>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype single ^input <argin>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
   (<obj> ^handle <h1>)
   (<obja> ^handle <h1>)
  -{(<s3> ^instance {<i8> < <i5>})
    (<i8> ^1 <obja>)} #bias only create one per object
-->
   (<res> ^instance <in>)
   (<in> ^1 <obj>)
}
#JK nlp others fix????  HERE
sp {learn-predicate*elaborate*input-args*object*single*to*set
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate <lp>
              ^world.objects.object <obj>
              ^predicate <T5>)
   (<lp> ^name <name> ^usage-args.<argin> <a1>)
   (<a1> ^rtype set ^result.set.instance.{1}.<object> <obja>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype single ^input <argin>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
   (<obj> ^handle <h1>)
   (<obja> ^handle <h1>)
-->
   (<res> ^instance <in>)
   (<in> ^1 <obj>)
}
#do single to set or no...< lets say probably do not want to do that here, 
#ok that is a copy, not same set, just for learning
sp {learn-predicate*elaborate*input-args*object*set
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate <lp>
              ^predicate <T5>)
   (<lp> ^name <name> ^usage-args.<argin> <a1>)
   (<a1> ^rtype set ^result.set.instance.{1} <set>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype set ^input <argin>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
-->
   (<res> ^instance <in>)
   (<in> ^1 <set2> ^copy <set>)
}
sp {learn-predicate*elaborate*input-args*object*set*to*set-objects
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate <lp>
              ^world.objects.object <obj>
              ^predicate <T5>)
   (<lp> ^name <name> ^usage-args.<argin> <a1>)
   (<a1> ^rtype set ^result.set.instance.{1} <set>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^rtype set ^input <argin>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
   (<obj> ^handle <h1>)
   (<obja> ^handle <h1>)
   (<set> ^<object> <obja>)
   (<res> ^instance <in>)
   (<in> ^1 <set2> ^copy <set>)
-->
   (<set2> ^<object> <obj>)
}
#elaborate all conditions before world-copy
sp {learn-predicate*elaborate*problem-space*predicate-structure
   (state <s> ^name learn-predicate
              -^superstate.name selection
              ^top-state.world <world2>)
-->
   (<s> ^problem-space <ps>)
   (<ps> ^world <world> ^name game)#JK 1/18/17 ^name action hmmm
   (<world> ^source <world2>
            ^copy-type deep)
}
sp {learn-predicate*elaborate*problem-space*world
    (state <s> ^name learn-predicate ^superstate <ss>)
    (<ss> ^superstate <ts> ^name selection)
    (<ts> ^world <world2> ^name learn-predicate)
-->
    (<s> ^problem-space <ps> +)
    (<ps> ^world <world> +  ^dont-copy-anything true + ^name game)#JK 1/18/17 ^name action + hmmm
    (<world> ^source <world2> + ^copy-type deep +)
}
#INHERIT primitive relations of locations beneath a block #need to not copy
sp {learn-predicate*elaborate*inherited*location*relations
   (state <s> ^name learn-predicate
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates.category location)
   (<prep2> -^handle on1 ^instance <instance2> -^dont-copy <instance2>)
   (<instance2> ^{<< 1 2 >> <arg1>} <obja> ^{<< 1 2 >> <arg2>} {<objx> <> <obj>} -^3 ^{<arg1> <> <arg2>})
-->
   (<prep2> ^instance <instance4> ^dont-copy <instance4>) #dont copy
   (<instance4> ^<arg1> <obj> ^<arg2> <objx>)
}
sp {learn-predicate*elaborate*inherited*location*relations*2
   (state <s> ^name learn-predicate
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates.category location)
   (<prep2> -^handle on1 ^instance <instance2> ^dont-copy <instance2>)
   (<instance2> ^1 <obja> ^2 {<objx> <> <obj>} -^3)
-->
   (<prep2> ^instance <instance4> ^dont-copy <instance4>) #dont copy
   (<instance4> ^1 <obj> ^2 <objx>)
}
#inherit x y row column position
sp {learn-predicate*elaborate*inherited*location*xy*coordinate
   (state <s> ^name learn-predicate
              ^world.predicates <p2>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle on1 ^instance <instance>)
   (<instance> ^1 <obj> ^2 <obja>)
   (<obja> ^predicates <preds>)
   (<preds> ^{<< x y row column position >> <xy>} <cord> )#^category location 
   (<obj> ^predicates <op>)
-->
   (<op> ^<xy> <cord> ^dont-copy <xy> ^dont-copy dont-copy)
}
sp {learn-predicate*elaborate*from*transfer-action-goal
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.name <name>
              ^superstate <ss>)
   (<ss> ^name transfer-action-goal ^structure <t> ^gtype <type>)
-->
##(write |HMMM 3 this did fire... on transfer?|)
   (<s> ^gtype <type>
      #  ^retrieve-handle <handle>
        #^parsed-structure <ps>
        ^completed-version 1 #will this work?
        ^game <name>
        ^<type> <t>
        ^main-type <type>)
}


sp {learn-predicate*elaborate*tcn
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<t> -^learned-structure)
   (<op> ^message <t>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
   (<s> ^main-type <type>)
        #^gtype <type>)
        #^<type> <act>)
  #(<act> ^parameter-set <ps>
  #      ^potential-args <po>)
}
sp {learn-predicate*elaborate*parsed-structure
:o-support
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<t> -^learned-structure)
   (<op> ^message <t>)
-->
   (<s> ^parsed-structure <t>)
}
sp {learn-predicate*elaborate*tcn*nlp-set
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<op> ^nlp-set <nps>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
(write |HMMM this did fire... on transfer?|)
   (<s> ^parsed-structure <t>
        ^gtype <type>
        ^main-type <type>
        ^completed-version 1 #wont work with version-set?
        ^<type> <act>)
  (<act> ^parameter-set <ps>
         ^nlp-set <nps>
        ^potential-args <po>)
}
#weird check why fires at first selection auto repair
sp {learn-predicate*elaborate*tcn*nlp-set*stored
:o-support
   (state <s> ^name learn-predicate
              ^quiescence t 
			 -^main-type #COPY FIX
			  ^top-state.dialog-context <dc>
              ^superstate.operator <op>)
   (<t> ^learned-structure <nps>)
   (<op> ^message <t>
         ^type {<type> << predicate action goal failure heuristic >>})
-->
#TODO need to clean learn-link and message <t> then of parsed-struct, or dont add
#TODO better explained if is iterative (add new knowledge so should rebuild ...)
(write |HMMM 2 this did fire... on transfer?|)
   (<s> ^parsed-structure <t2>
        ^gtype <type>
        ^completed-version 1
        ^main-type <type>
        ^<type> <act>)
  (<act> ^parameter-set <ps>
         ^nlp-set <nps>
        ^potential-args <po>)
}
sp {learn-predicate*apply*convert-language-format*clean-old-structures
   (state <s> ^name learn-predicate
             #-^<gtype>.nlp-set
              ^parsed-structure <t>
              ^operator <o>
              ^top-state.dialog-context <dc>
              #^gtype <gtype>
             -^tcn)
   (<o> ^name create-from-parse) #convert-parsed-format
   (<dc> ^learn-link <ll>)
   (<ll> ^predicate-structure <ps>)
   (<ps> ^conditions <nlp>)
 -{(<dc> ^learn-link {<l2> > <ll>})}#TODO just do test for most recent?
-->
#(interrupt) #make sure ok
   (<ps> ^conditions <nlp> -)
}

sp {learn-predicate*propose*create-from-parse
   (state <s> ^name learn-predicate
             #-^<type>.nlp-set #CHANGE
             #-^prohibit
             -^completed-version 1 
              ^parsed-structure <t>
			  ^main-type <type>
              #^gtype <gtype>
             -^tcn)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-from-parse #convert-parsed-format
        ^structure <t>)
}
sp {learn-predicate*elaborate*version-list
:o-support
   (state <s> ^name learn-predicate)
-->
   (<s> ^version-list <vl>)
}
sp {learn-predicate*propose*create-version-map
   (state <s> ^name learn-predicate
              ^completed-version 1
			  ^version-list <vl>
			 -^version-map
             -^tcn)
-->
   (<s> ^operator <o> + >)
   (<o> ^name create-version-map
        ^version-list <vl>)
}
sp {learn-predicate*propose*create-from-parse*version-set
   (state <s> ^name learn-predicate
              ^completed-version 1 
              ^parsed-structure <t>
			  ^version-map.version-set <vs>
			  ^main-type <type>
             -^tcn)
   (<vs> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-from-parse
   		^version-set <vs>
        ^structure <t>)
}

#delay this copy until we have picked a winner!
sp {learn-predicate*store*structure
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^nlp-set.nlp <nlp> ^formated ^final-version) #COPY CHANGE
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^predicate-structure <ps>)
-->
   (<ps> ^conditions <nlp>) #COPY PROBLEM	
}
sp {learn-predicate*store*prefer
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^prefer <nlp> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^prefer <nlp>)#COPY PROBLEM
}
sp {learn-predicate*store*avoid
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^avoid <nlp> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^avoid <nlp>)#COPY PROBLEM
}
sp {learn-predicate*store*moved
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^moved <nlp> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^moved <nlp>)
}
sp {learn-predicate*store*modifier
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^modifier <m> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^modifier <m>)
   (<s> ^problemspace game-heuristics)
}
sp {learn-predicate*store*consider
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << heuristic >>}
              ^<gtype> <t>)
   (<t> ^consider <nlp> ^formated ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^consider <nlp>)
   (<s> ^problemspace games)
}
sp {learn-predicate*store*opponent
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^nlp-set.opponent <o> ^formated ^handle <n> ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <n>)
-->
   (<ll> ^opponent <o>)
}
sp {learn-predicate*store*structure*argnum
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^main-type {<gtype> << action goal failure heuristic >>}
              ^<gtype> <t>)
   (<t> ^parameter-set.argnum <an> ^handle <n> ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <n>)
-->
   (<ll> ^argnum <an>) #COPY PROBLEM
}
sp {learn-predicate*store*structure*heuristic
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype heuristic
              ^main-type heuristic
              ^heuristic <t>)
   (<t> ^nlp-set <nl> ^formated ^parameter-set.argnum <an> ^handle <name>)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <name> ^ntype heuristic)
-->
   (<s> ^ntype heuristic)
   (<t> ^ntype heuristic)
}
sp {learn-predicate*store*structure*learned-predicate
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<type> << predicate heuristic >>}
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set <nl> ^formated ^parameter-set.argnum <an> ^handle <name> ^final-version true)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^handle <name>)
-->
   (<ll> ^argnum <an>) #COPY PROBLEM # ^predicate-structure <ps>
}
sp {learn-predicate*store*structure*learned-predicate*conditions
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<type> << predicate heuristic >>}
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set.nlp <nlp> ^formated ^handle <name> ^final-version)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^predicate-structure <ps> ^handle <name>)
-->
   (<ps> ^conditions <nlp>) #COPY PROBLEM
}
#COPY PROBLEM
#wait for all of interpretations to be created and formatted
sp {learn-predicate*elaborate*list-games
   (state <s> ^name learn-predicate
              ^main-type <type2>
              #^<type2> <gt>
              ^completed-versions true      
              ^top-state.dialog-context <dc>
              ^superstate.operator <op>)
   (<op> ^type <type>)
   #(<gt> ^handle <pname> ^formated)
   (<dc> ^name <name>)#^learn-link.handle <pname>
-->
   (<s> ^list.game <g> ^objects <o>)
   (<g> ^game <name> ^type <type> predicate) 
   (<s> ^current <g>)
}
sp {learn-predicate*elaborate*game-name
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.name <name>
              ^superstate.operator <op>)
   (<op> ^type <type> ^message)
-->
   (<s> ^game <name>)
}
sp {learn-predicate*elaborate*actiongoalname
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.aname <aname>)
-->
   (<t> ^aname <aname> ^handle <aname>)
}
sp {learn-predicate*elaborate*opponent
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.opponent <o>)
-->
   (<t> ^opponent <o>)
}
sp {learn-predicate*elaborate*handlename
   (state <s> ^name learn-predicate
              ^main-type <type>
              ^<type> <t>)
   (<t> ^handle <aname>)
-->
	(<t> ^aname <aname>)
}
sp {learn-predicate*propose*format-conditions
   (state <s> ^name learn-predicate
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set <nlp> -^formated)
-->
   (<s> ^operator <o> + = >)
   (<o> ^name format-conditions
        ^type <type>
		^predicate <t>
        ^nlp-set <nlp>)
}
sp {preference*learn-predicate*prefer*x*over*format-conditions
   (state <s> ^name learn-predicate
              ^operator <o> +
              ^operator <o2> +)
    (<o> ^name << create-from-parse create-version-map >>)
    (<o2> ^name format-conditions)
-->
   (<s> ^operator <o> > <o2>)
}
#create completed all versions that fires after format-conditions
sp {learn-predicate*propose*completed-creating-versions
   (state <s> ^name learn-predicate
             -^completed-versions
              ^main-type <type>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name completed-creating-versions)
}
sp {learn-predicate*apply*completed-creating-versions
   (state <s> ^name learn-predicate
              ^operator.name completed-creating-versions)
-->
   (<s> ^completed-versions true)
}

#sp {learn-predicate*apply*completed-creating-versions*interrupt*heuristics
#   (state <s> ^name learn-predicate
#   		  	  ^gtype heuristic
#			  ^heuristic <h>
#              ^operator.name completed-creating-versions)
#(<h> ^condition <cc>)
#(<cc> ^name move1)
#-->
#(write (cmd print <h> -d 10))
#(interrupt)
#}
sp {learn-predicate*apply*completed-creating-versions*interrupt*ASDFE
   (state <s> ^name learn-predicateX
   		  	  ^gtype heuristic
			  ^heuristic <h>
              ^operator <o>)
(<o> ^type << action heuristic >> -^name format-conditions -^duplicate-of) 
-->
(write (cmd print <h> -d 10))
(interrupt)
}
#sp {learn-predicate*apply*completed-creating-versions*interrupt*ASDFccE
#   (state <s> ^name learn-predicate
#   		  	  ^gtype heuristic
#			  ^heuristic <h>
#              ^operator <o>)
#(<o> ^name format-conditions ^predicate <p>) 
##(<h> ^condition <cc>)
##(<cc> ^name move1)
#-->
#(write (cmd print <p> -d 10))
##(write (cmd pref <cc> result -w))
##(write (cmd pref <cc> parameter -w))
#}

sp {learn-predicate*apply*completed-creating-versions*multiple-versions
   (state <s> ^name learn-predicate
   		  	  ^main-type <type>
              ^<type> <a1>
			  ^<type> {<a2> > <a1>})
    (<a1> ^handle <h1> ^parameter-set.set <i>)
    (<a2> ^handle <h1> ^parameter-set.set <i2>)
-->
    (<s> ^multiple-versions true)
}

sp {learn-predicate*elaborate*multiple-versions*all-results
   (state <s> ^name learn-predicate
   		  	  ^main-type <type>
              ^multiple-versions true
              ^<type> <a1>)
 -{(state <s>)
   (<a1> -^parameter-set.set <i>)}
-->
    (<a1> ^all-results <ar>)
}

sp {learn-predicate*elaborate*multiple-versions*all-results*predicate
   (state <s> ^name learn-predicate
   		  	  ^main-type <type>
              ^multiple-versions true
              ^predicate <a1>)
 -{(state <s>)
   (<a1> -^parameter-set.set <i>)}
-->
    (<a1> ^all-results <ar>)
}


sp {learn-predicate*multiple-versions*substate*disambiguate
   (state <s> ^superstate <ss>)
   (<ss> ^name learn-predicate
	     ^operator.type << goal failure action >>
         ^multiple-versions true)
-->
   (<s> ^name disambiguate)
   #(write (cmd print <s>))
   #(interrupt)
}

sp {learn-predicate*elaborate*multiple-versions*all-results*result
   (state <s> ^name learn-predicate
   		  	  #^main-type action
              ^multiple-versions true
              ^<< predicate action goal failure >> <a1>)
   (<a1> ^all-results <ar> ^parameter-set.set <i>)
-->
   (<ar> ^result <i>)
}

sp {learn-predicate*apply*operator*multiple-versions*num-results
    (state <s1> ^name learn-predicate
				^top-state.dialog-context.learning true
                ^multiple-versions true)
    (<s1> ^main-type {<type> << action goal failure >>} 
          ^operator <o> 
          ^<type> <a1>)
    (<o> ^type <type> -^duplicate-of) 
    (<a1> ^all-results <ar> ^handle <c1>)
  -{(state <s1>)
    (<ar> -^<x>)}
-->
   (<a1> ^num-results (size <ar>))
}

sp {learn-predicate*apply*operator*multiple-versions*num-results*predicate
    (state <s1> ^name learn-predicate
				^top-state.dialog-context.learning true
                ^multiple-versions true)
    (<s1> ^main-type {<type> << action goal failure >>} 
          ^operator <o> 
          ^predicate <a1>)
    (<o> ^type <type> -^duplicate-of) 
    (<a1> ^all-results <ar> ^handle <c1>)
  -{(state <s1>)
    (<ar> -^<x>)}
-->
   (<a1> ^num-results (size <ar>))
}

## MOVED FUNCTIONALITY to disambiguate.soar
#sp {learn-predicate*apply*operator*multiple-versions*same*interrupt
#    (state <s1> ^name learn-predicateQ
#				^top-state.dialog-context <dc>
#               -^top-state.dialog-context.number-answer-predicate <nr3>
#			   -^top-state.dialog-context.number-answer-predicate <nr5>
#                ^top-state.interaction.changes <c>
#				^predicate <p1>
#				^predicate <p2>
#				^version-list.version <vv>
#                ^multiple-versions true)
#    (<s1> ^main-type action
##^main-type {<type> << action goal failure >>} 
#          ^operator <o> 
#          ^action <a1>
#          ^action {<a2> > <a1>})
#    (<dc> ^learning true)
#	(<vv> ^handle-spelling <hs1> ^item <i11> <i22>)
#	(<i11> -^auto antonym ^smem-result.handle <e6>)
#	(<i22> -^auto antonym ^smem-result.handle <e7>)
#    (<o> ^type action -^duplicate-of)
#    (<p1> ^link <con1> ^handle <e6> ^num-results <nr3>)
# 	(<p2> ^link <con2> ^handle <e7> ^num-results {<nr5> <> <nr3>})
#	(<con1> ^negative false)
#	(<con2> ^negative false)
#    (<a1> ^condition <con1> ^num-results <nr> ^handle <c1>)
#    (<a2> ^condition <con2> ^num-results <nr> ^handle <c1>)
#  -{(<s1> ^action {<a3> > <a2>}) #doesnt have a third viable version
#    (<a3> ^num-results)}
#-->
#   (<dc> ^multiple-num-predicate true)
#   (<c> ^new-segment-info <info>)
#   (<info> ^purpose <p>
#           ^originator agent)
#   (<p> ^type process-multiple-question
#        ^parameters <p>
#        ^satisfaction <sat>)
#   (<p> ^word1 <nr3> ^word2 <nr5>)
#   (<sat> ^dialog-event <de>)
#   (<de> ^type process-multiple-question
#          ^originator instructor)
#   (<c> ^outgoing-message <out-msg>)
#   (<out-msg> ^type how-many-predicates #reset-state
#              ^complete-message true  #need?
#              ^fields <f>)
#   (<f> ^predicate <hs1> ^word1 <nr3> ^word2 <nr5>)
#}
#sp {learn-predicate*apply*operator*multiple-versions*query
#    (state <s1> ^name learn-predicateQ
#				^top-state.dialog-context <dc> 
#             -^top-state.dialog-context.number-answer <nr>
#              -^top-state.dialog-context.number-answer <nr2>
#                ^top-state.interaction.changes <c>
#                ^multiple-versions true)
#    (<s1> ^main-type action
##^main-type {<type> << action goal failure >>} 
#          ^operator <o> 
#          ^action <a1>
#          ^action {<a2> > <a1>})
#    (<dc> ^learning true)
#    (<o> ^type action -^duplicate-of) 
#    (<a1> ^num-results <nr> ^handle <c1>)
#    (<a2> ^num-results {<nr2> <> <nr>} ^handle <c1>)
#  -{(<s1> ^action {<a3> > <a2>}) #doesnt have a third viable version
#    (<a3> ^num-results)}
#-->
##(write (cmd print <a1> -d 5))
#   (<dc> ^multiple-num-answer true)
#   (<c> ^new-segment-info <info>)
#   (<info> ^purpose <p>
#           ^originator agent)
#   (<p> ^type process-multiple-question #process-unknown-word #process-reset-state
#        ^parameters <p>
#        ^satisfaction <sat>)
#   (<p> ^word1 <nr> ^word2 <nr2>) #word <word>
#   (<sat> ^dialog-event <de>)
#   (<de> ^type process-multiple-question
#          ^originator instructor)
#   #(<sat> ^dialog-event <de>)
#   #(<de> ^type single-word-response #process-unknown-word
#   #       ^originator instructor)
#  # (<dc> ^learning-predicate <lp>)
#  # (<lp> ^name <word> ^spelling <name2> ^usage-args (deep-copy <args>))
#   (<c> ^outgoing-message <out-msg>)
#   (<out-msg> ^type how-many-actions #reset-state
#              ^complete-message true  #need?
#              ^fields <f>)
#   (<f> ^word1 <nr> ^word2 <nr2>)#^word <word>)
#              #^fields.word <word>)
#   ###(<ps> ^learned-structure <nlp>) #dont stored
##    (<ll> ^argnum <an> -)
##    (<dc> ^needs-reset true)
#}
#sp {learn-predicate*apply*completed-creating-versions*debug
#   (state <s> ^name learn-predicate
#   		  	  ^superstate.superstate <ss>
#   		  	  #^name resolve-conditions
#   		  	  ^main-type action
#              ^action <a1>
#			  ^action {<a2> > <a1>}
#              ^operator.name completed-creating-versions)
#   #(<ss> ^name learn-predicate ^gtype <g> ^<g> <x>)
#    (<a1> ^handle <h1> ^instance <i>)
#    (<a2> ^handle <h1> ^instance <i2>)
#-->
##(write (cmd pref <n> nlp -w))
##(write (cmd print <n> -d 10))
#}


#TODO change in all cases, only copy to learn link once detected
#remove below?
sp {learn-predicate*apply*completed-creating-versions*single-version
   (state <s> ^name learn-predicate
             -^prohibit #only single type
              ^main-type predicate #<type>
              ^predicate <t>
              ^top-state.dialog-context <dc>
              ^operator.name completed-creating-versions)
   (<t> ^handle <ha>)
   (<dc> ^learn-link <ll>)
   (<ll> ^handle <ha>)
 -{(<dc> ^learn-link {<l2> > <ll>})}#TODO just do test for most recent?
-->
   (<t> ^final-version true)
}
sp {learn-predicate*elaborate*sub-conditions
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*simulated-true
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
-->
   (<s> ^simulated true)
}
sp {learn-predicate*elaborate*sub-conditions*predicate
   (state <s> ^name learn-predicate
              ^gtype {<type> << predicate heuristic >>}
              ^<type> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*sub-conditions*heuristic
   (state <s> ^name learn-predicate
              ^ntype heuristic
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*sub-conditions*action-predicate
   (state <s> ^name learn-predicate
              #^main-type predicate #may cause issues..
              ^predicate.condition <c>
              ^gtype action
              ^action <t>)
   (<c> ^verb <on> ^type concept ^attribute action)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*sub-conditions*actiongoal
   (state <s> ^name learn-predicate
              ^superstate.name transfer-action-goal
              ^gtype {<gtype> << action goal failure >> }
              ^<gtype> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*nlp-set*verb-structure
   (state <s> ^name learn-predicate
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.verb-structure <vs>)
-->
	(<t> ^verb-structure <vs>)
}
#need to make at end of learn
sp {learn-predicate*elaborate*learn-link*verb-structure
:o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc> 
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.verb-structure <vs> ^final-version)
   (<dc> ^learn-link <ll>) #TODO most recent?
# -{(<dc> ^learn-link {<l2> > <ll>})}#TODO just do test for most recent?
-->
   (<ll> ^verb-structure <vs>)
}

#TEMP, move to smem retrieval
## REMOVED for now, so can recreate figures for now
sp {learn-predicate*elaborate*synonym-table
   (state <s> ^nameXX << game-search learn-predicate >>)
-->
    (<s> ^synonym-table <st>)
    (<st> ^pairs <t1> <t2> <t3> <t4> <t5> <t6> <t7> <t8> <t9> <t10>)
    (<t1> ^word passenger rider occupant inhabitant)
    (<t2> ^word red crimson)
    (<t3> ^word clear empty uncovered)
    (<t4> ^word covered occupied)
    (<t5> ^word captured owned possessed)
    (<t6> ^word row y)
    (<t7> ^word column x)
    (<t8> ^word larger bigger)
    (<t9> ^word smaller littler)
    (<t10> ^word box cube)
}

sp {learn-predicate*elaborate*antonym-table
   (state <s> ^nameXX << game-search learn-predicate >>)
-->
    (<s> ^antonym-table <st>)
    (<st> ^pair <t1> <t2> <t3> <t4> <t5> <t6> <t7> <t8> <t9> <t10> <t11>)
    (<t1> ^word clear covered)
    (<t2> ^word empty covered)
    (<t3> ^word free placed)
    (<t4> ^word yours theirs)
    (<t5> ^word near far)
    (<t6> ^word low high)
    (<t7> ^word strong weak)
    (<t8> ^word dark light)
    (<t9> ^word full vacant)
	#(<t10> ^word current opposite)
	(<t10> ^word filled clear)
    (<t11> ^word filled empty)
}

sp {learn-predicate*elaborate*opposite-table
   (state <s> ^nameXX << game-search learn-predicate >>)
-->
    (<s> ^opposite-table <st>)
    (<st> ^pair <t1> <t2> <t3> <t4> <t5> <t6> <t7> <t8> <t9> <t10> <t11>)
    (<t1> ^word on1 below1)
    (<t2> ^word left right)
    (<t3> ^word above below)
    (<t4> ^word smaller larger)
    (<t5> ^word bigger littler)
    (<t6> ^word stronger weaker)
    (<t7> ^word heavier lighter)
    (<t8> ^word dimmer brighter)
    (<t9> ^word lower higher)
    (<t10> ^word front behind)
	(<t11> ^word bottom top)
}

sp {learn-predicate*elaborate*integer-list
   (state <s> ^name << game-search learn-predicate >>)
-->
    (<s> ^integer-list <il>)
    (<il> ^number 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
}

sp {learn-predicate*elaborate*diff-table
   (state <s> ^name learn-predicate)
-->
    (<s> ^diff-table <dtt>)
    (<dtt> ^diff <d1> <d2> <d3>)# <d3> <d4> <d5> <d6> <d7> <d8> <d9> <d10>)
    (<d1> ^pair <p> <p1> <p2> <p3> <p4> <p5> <p6> <p7> <p8> ^result 1)
    (<p> ^num 1 2)
    (<p1> ^num 3 2)
    (<p2> ^num 4 3)
    (<p3> ^num 1 0)
    (<p4> ^num 5 4)
	(<p5> ^num 6 5)
	(<p6> ^num 7 6)
	(<p7> ^num 8 7)
	(<p8> ^num 9 8)
    (<d2> ^pair <pa> <pa2> <p21> <p22> <p23> <p24> <p25> <p26> ^result 2)
    (<pa> ^num 1 3)
    (<pa2> ^num 0 2)
    (<p21> ^num 4 2)
    (<p22> ^num 5 3)
	(<p23> ^num 6 4)
	(<p24> ^num 7 5)
	(<p25> ^num 8 6)
	(<p26> ^num 9 7)
    (<d3> ^pair <pab> <pab2> <pb21> <pb22> <pb23> <pb24> <pb25> ^result 3)
    (<pab> ^num 1 4)
    (<pab2> ^num 0 3)
    (<pb21> ^num 2 5)
    (<pb22> ^num 3 6)
	(<pb23> ^num 4 7)
    (<pb24> ^num 5 8)
	(<pb25> ^num 6 9)
}
sp {game-search*elaborate*needs*diff-table
   (state <s> ^name game-search
              ^gtype <type>
              ^<type>.condition.function << soar-x-greater soar-x-less board-between >>)
-->
    (<s> ^needs-diff true)
}

sp {game-search*elaborate*diff-table
   (state <s> ^name game-search
              ^needs-diff true) 
-->
    (<s> ^diff-table <dtt>)
    (<dtt> ^diff <d1> <d2> <d3>)# <d3> <d4> <d5> <d6> <d7> <d8> <d9> <d10>)
    (<d1> ^pair <p> <p1> <p2> <p3> <p4> <p5> <p6> <p7> <p8> ^result 1)
    (<p> ^num 1 2)
    (<p1> ^num 3 2)
    (<p2> ^num 4 3)
    (<p3> ^num 1 0)
    (<p4> ^num 5 4)
    (<p5> ^num 6 5)
    (<p6> ^num 7 6)
    (<p7> ^num 8 7)
    (<p8> ^num 9 8)
    (<d2> ^pair <pa> <pa2> <p21> <p22> <p23> <p24> <p25> <p26> ^result 2)
    (<pa> ^num 1 3)
    (<pa2> ^num 0 2)
    (<p21> ^num 4 2)
    (<p22> ^num 5 3)
    (<p23> ^num 6 4)
    (<p24> ^num 7 5)
    (<p25> ^num 8 6)
    (<p26> ^num 9 7)
    (<d3> ^pair <pab> <pab2> <pb21> <pb22> <pb23> <pb24> <pb25> ^result 3)
    (<pab> ^num 1 4)
    (<pab2> ^num 0 3)
    (<pb21> ^num 2 5)
    (<pb22> ^num 3 6)
    (<pb23> ^num 4 7)
    (<pb24> ^num 5 8)
    (<pb25> ^num 6 9)
}