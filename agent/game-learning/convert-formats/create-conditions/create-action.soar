sp {create-condition*apply*create-action*2args
   (state <s> ^name create-condition
              ^action <a>
              ^action-count <an>
              ^condition-handle <handle>
			  ^superstate <ss>
     		  ^param1 <pa>
         	  ^param2 <pa2>
              ^clause <cl>
              ^verb-prep <vp>
			  ^operator <o>)
   (<o> ^name create-action)
   (<a> ^procedural <pp>)
   (<pp> ^arg1 <pp1> ^arg2 <pp2>)
   (<ss> ^action-count <an> ^nlp-set.verb-structure <va2>)
-->
   (<cl> ^formatted true)
   (<ss> ^action-count <an> -)
   (<ss> ^action-count (+ <an> 1))
   (<ss> ^verb-structure <va2>)
   (<va2> ^<an> <va>)
   (<va> ^verb-name <handle> ^verb-prep <vp> ^1 <pa> ^2 <pa2>)
   (<a> ^formatted true) 
}

sp {create-condition*apply*create-action*1args
   (state <s> ^name create-condition
              ^action <a>
              ^action-count <an>
              ^condition-handle <handle>
			  ^superstate <ss>
     		  ^param1 <pa>
         	  -^param2
              ^clause <cl>
             -^verb-prep
			  ^operator <o>)
   (<o> ^name create-action)
   (<a> ^procedural <pp>)
   (<pp> ^arg1 <pp1> -^arg2)
   (<ss> ^action-count <an> ^nlp-set.verb-structure <va2>)
-->
   (<cl> ^formatted true)
   (<ss> ^action-count <an> -)
   (<ss> ^action-count (+ <an> 1))
   (<ss> ^verb-structure <va2>)
   (<va2> ^<an> <va>)
   (<va> ^verb-name <handle> ^verb-prep <handle> ^1 <pa>)
   (<a> ^formatted true) 
}


sp {create-condition*apply*create-action*preference*1arg
   (state <s> ^name create-condition
              ^action <a>
              #^action-count <an>
              ^condition-handle <handle>
			  ^superstate <ss>
     		  ^param1 <p1>
			 -^param2
			  ^condition <co>
              ^clause <cc>
             -^verb-prep
			  ^operator <o>)
   (<o> ^name create-action)
   (<a> ^procedural <pp>)# ^handle <hm>)
   (<cc> ^subclause1 <sb>)
   (<sb> ^action <az>)
   (<az> ^handle <mo>)
   (<pp> -^arg1 ^op_name initiate-prefer1)
   #(<ss> ^action-count <an> ^nlp-set <nn>)#.verb-structure <va2>)
-->
   (<cc> ^formatted <co> ^parameter-index <p1>)
   (<a> ^formatted true)
   (<ss> ^prefer <pp>)
   (<pp> ^1 <co>)
   #(<ss> ^action-count <an> -)
   #(<ss> ^action-count (+ <an> 1))
   (<co> ^verb on1 ^name <mo> ^args <ar1> ^rtype single ^type concept ^attribute action ^parameter <para>)
   (<para> ^1 <para2>)
   (<para2> ^param-id <p1> ^type single)

}


sp {create-condition*apply*create-action*preference*2arg
   (state <s> ^name create-condition
              ^action <a>
              #^action-count <an>
              ^condition-handle <handle>
			  ^superstate <ss>
     		  ^param1 <p1>
			  ^param2 <p2>
			  ^condition <co>
              ^clause <cc>
             -^verb-prep
			  ^operator <o>)
   (<o> ^name create-action)
   (<a> ^procedural <pp>)# ^handle <hm>)
   (<cc> ^subclause1 <sb>)
   (<sb> ^action <az>)
   (<az> ^handle <mo>)
   (<pp> -^arg1 ^op_name initiate-prefer1)
   #(<ss> ^action-count <an> ^nlp-set <nn>)#.verb-structure <va2>)
-->
   (<cc> ^formatted <co> ^parameter-index <p1>)
   (<a> ^formatted true)
   (<ss> ^prefer <pp>)
   (<pp> ^1 <co>)
   #(<ss> ^action-count <an> -)
   #(<ss> ^action-count (+ <an> 1))
   (<co> ^verb on1 ^name <mo> ^args <ar1> ^rtype single ^type concept ^attribute action ^parameter <para>)
   (<para> ^1 <para2> ^2 <para3>)
   (<para2> ^param-id <p1> ^type single)
   (<para3> ^param-id <p2> ^type single)
}
## DEBUG
sp {create-condition*apply*create-action*interrupt
   (state <s> ^superstate.name create-action #condition
			  ^superstate.superstate <ss>)
			  #^operator <o>)
  # (<o> ^name create-action)
(<ss> ^condition <co> ^clause <ca> ^superstate <sss>)
-->
(write (cmd print <co> -d 3))
(write (cmd print <ss> -d 4))
(interrupt)
}