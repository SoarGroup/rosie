#todo teach concept linear on set
#need one of operator
#make to handle action with move
sp {convert-parsed-format*elaborate*sentence
   (state <s> ^name convert-parsed-format
              ^superstate.operator <sop>)
   (<sop> ^structure <t>)
-->
#    (interrupt)
   (<s> ^sentence <t>)
}

sp {convert-parsed-format*elaborate*agent*opponent
:o-support
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^sentence.agent.predicates.shape opponent1)
-->
   (<nps> ^opponent true)
}

sp {convert-parsed-format*elaborate*agent*opponent*two
:o-support
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^clause.agent.predicates.shape opponent1)
-->
   (<nps> ^opponent true)
}

sp {convert-parsed-format*elaborate*agent*opponent*then-clause
:o-support
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^sentence.then-subclause.agent.predicates.shape opponent1)
-->
   (<nps> ^opponent true)
}

sp {convert-parsed-format*elaborate*agent*opponent*then-clause*two
:o-support
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^sentence.then-subclause.subclause.agent.predicates.shape opponent1)
-->
   (<nps> ^opponent true)
}


sp {convert-parsed-format*elaborate*only-parameter
   (state <s> ^name convert-parsed-format
              ^sentence.<< if-subclause then-subclause subclause >> <c>)
   (<c> ^predicate <p>)
   (<p> ^item-type << object location block >> ^predicates.category <type>)
-->
   (<s> ^parameter <p>)
}

sp {convert-parsed-format*elaborate*learning-predicate
   (state <s> ^name convert-parsed-format
              ^top-state.dialog-context <dc>)
   (<dc> ^learn-link <ll> ^learning-predicate <np>)
-->
   (<s> ^learning-predicate <np> ^learn-link <ll>)
}

sp {convert-parsed-format*elaborate*input-object
   (state <s> ^name convert-parsed-format
              ^top-state.dialog-context.input-object-1 <np>)
-->
   (<s> ^input-object-1 <np>)
}

sp {convert-parsed-format*elaborate*output-object-1
   (state <s> ^name convert-parsed-format
              ^top-state.dialog-context.output-object-1 <np>)
-->
   (<s> ^output-object-1 <np>)
}

sp {convert-parsed-format*elaborate*input-object-2
   (state <s> ^name convert-parsed-format
              ^top-state.dialog-context.input-object-2 <np>)
-->
   (<s> ^input-object-2 <np>)
}

sp {convert-parsed-format*elaborate*action-count*nlp-set
   (state <s> ^name convert-parsed-format)
-->
   (<s> ^action-count 1
        ^nlp-set <nps>)
   (<nps> ^verb-structure <vs>)
}

sp {convert-parsed-format*elaborate*object-count*output-object-1
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^output-object-1 <pp>)
    (<pp> ^handle of1 ^item-type predicate)
-->
   (<s> ^object-count 2)
}
sp {convert-parsed-format*elaborate*object-count*default
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>)
  -{(<s> ^output-object-1 <pp>)
    (<pp> ^handle of1 ^item-type predicate)}
-->
   (<s> ^object-count 1)
}

sp {convert-parsed-format*elaborate*sentence*subclause
   (state <s> ^name convert-parsed-format
              ^sentence <s2>)
-->
   (<s> ^clause <s2>)
}

sp {convert-parsed-format*elaborate*clause*prefer1
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action.handle << prefer1 prefer >> ^subclause1 <sb> -^subclause2)
   (<sb> ^action <act> ^arg1 <a1> ^arg2 <a2>)
-->
   (<s> ^pref-action <sb> ^clause <a2> ^parameter <a1>)
   (<sb> ^prefer single)
   (<s> ^preference-rule true)
}

sp {convert-parsed-format*elaborate*clause*avoid1
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action.handle << avoid1 avoid >> ^subclause1 <sb> -^subclause2)
   (<sb> ^action <act> ^arg1 <a1> ^arg2 <a2>)
-->
   (<s> ^pref-action <sb> ^clause <a2> ^parameter <a1>)
   (<sb> ^avoid single)
   (<s> ^preference-rule true)
}

sp {convert-parsed-format*elaborate*clause*prefer1onearg
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action.handle << prefer1 prefer >> ^subclause1 <sb> -^subclause2)
   (<sb> ^action <act> ^arg1 <a1> -^arg2)
-->
   (<s> ^pref-action <sb> ^clause <a1> ^parameter <a1>)
   (<sb> ^prefer single)
   (<s> ^preference-rule true)
}

sp {convert-parsed-format*elaborate*clause*avoid1onearg
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action.handle << avoid1 avoid >> ^subclause1 <sb> -^subclause2)
   (<sb> ^action <act> ^arg1 <a1> -^arg2)
-->
   (<s> ^pref-action <sb> ^clause <a1> ^parameter <a1>)
   (<sb> ^avoid single)
   (<s> ^preference-rule true)
}

sp {convert-parsed-format*elaborate*clause*consider1
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action.handle << consider consider1 >> ^subclause1 <sb> -^subclause2)
   (<sb> ^action <act> ^arg1 <a1> ^arg2 <a2>)
-->
   (<s> ^pref-action <sb> ^clause <a2> ^parameter <a1>)
   (<sb> ^consider single)
   (<s> ^preference-rule true)
}

sp {convert-parsed-format*elaborate*clause*prefer2
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action.handle << prefer1 prefer >> ^subclause1 <sb> ^subclause2 <sb2>)
   (<sb> ^action <act> ^arg1 <a1> ^arg2 <a2>)
   (<sb2> ^action <act2> ^arg1 <a3> ^arg2 <a4>)
-->
   (<s> ^pref-action <sz> ^clause <a2> <a4> ^parameter <a1> <a3>)
   (<sz> ^prefer 2 ^1 <sb> ^2 <sb2>)
   (<s> ^preference-rule true)
}

sp {convert-parsed-format*elaborate*clause*prefer2arg1
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action.handle << prefer1 prefer >> ^subclause1 <sb> ^subclause2 <sb2>)
   (<sb> ^action <act> ^arg1 <a1> -^arg2)# <a2>)
   (<sb2> ^action <act2> ^arg1 <a3> -^arg2)# <a4>)
-->
   (<s> ^pref-action <sz> ^parameter <a1> <a3>) #^clause <a2> <a4>
   (<sz> ^prefer 2 ^1 <sb> ^2 <sb2>)
   (<s> ^preference-rule true)
}

sp {convert-parsed-format*elaborate*clause*consider2
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action.handle << consider consider1 >> ^subclause1 <sb> ^subclause2 <sb2>)
   (<sb> ^action <act> ^arg1 <a1> ^arg2 <a2>)
   (<sb2> ^action <act2> ^arg1 <a3> ^arg2 <a4>)
-->
   (<s> ^pref-action <sz> ^clause <a2> <a4> ^parameter <a1> <a3>)
   (<sz> ^consider 2 ^1 <sb> ^2 <sb2>)
   (<s> ^preference-rule true)
}

sp {convert-parsed-format*elaborate*clause*subclause
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^<< if-subclause subclause then-subclause >> <s1>) #then-subclause >> TODO check doesn't break anything why should this be a clause?
-->
   (<s> ^clause <s1>)
}

#sp {convert-parsed-format*elaborate*clause*thensubclause
#   (state <s> ^name convert-parsed-format
#              ^clause <c>)
#   (<c> ^<< then-subclause >> <s1>) #then-subclause >> TODO check doesn't break anything why should this be a clause?
#-->
#   #(<s> ^clause <s1>)
#}

sp {convert-parsed-format*elaborate*arg1*parameter
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^<< arg1 arg2 2 >> <p>)
   (<p> ^predicates.category <type>)#<< location block object >>) ^item-type <type> 
-->
   (<s> ^parameter <p>)
}


sp {convert-parsed-format*elaborate*arg1*agent*has
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^agent <p> ^action.handle << has has1 >>)
   (<p> ^predicates.category <type>) #<< location block object >>) ^item-type <type> 
-->
   (<s> ^parameter <p>)
}

#stranger version
sp {convert-parsed-format*elaborate*arg1*relation*parameterfg
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^arg1 <p> ^arg1.handle number1)
   (<p> ^relation <type>)
-->
   (<s> ^numeric-predicate <p>)
}

sp {convert-parsed-format*elaborate*arg1*relation*parameter*write1
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^arg1 <p> ^action.handle write1)
   (<p> ^relation <type>)
-->
   (<s> ^numeric-predicate <p>)
}

#sp {convert-parsed-format*elaborate*arg1*relation*parameter*numeric-predicate
#   (state <s> ^name convert-parsed-format
#              ^clause <c>)
#   (<c> ^arg1 <p> -^arg1.handle number1)
#   (<p> ^relation <type>)
#   (<type> ^2 <t2> ^3 <t3>)
#   (<t2> ^number )
#   (<t3> ^number )
#-->
#   (<s> ^numeric-predicate <p>)
#}

sp {convert-parsed-format*elaborate*predicate-is-predicate
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^arg1 <p> ^predicate <pp> -^predicate.handle << equal more-than1 less-than1 >>)
   (<p> ^item-type predicate -^handle equal -^handle more-than1 -^handle less-than1)
   (<pp> ^item-type predicate -^handle equal -^handle more-than1 -^handle less-than1)
-->
   (<c> ^formatted true)
   (<s> ^predicate <p> <pp>)
   (<p> ^equal-to <pp>)
   (<pp> ^equal-to <p>)
}

sp {convert-parsed-format*elaborate*predicate-is*equal-to-predicate
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^arg1 <p> ^predicate <pp> -^predicate.handle << more-than1 less-than1 >>)
   (<p> ^item-type predicate -^handle more-than1 -^handle less-than1)
   (<pp> ^item-type predicate ^handle equal ^2 <ppp>)
-->
   (<c> ^formatted true)
   (<s> ^predicate <p> <ppp>)
   (<p> ^equal-to <ppp>)
   (<ppp> ^equal-to <p>)
}

#TODO language fix "is not" ..on
sp {convert-parsed-format*elaborate*predicate*modifier
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^arg1 <p> ^predicate <pp> ^modifier <m>)
-->
   (<pp> ^modifier <m>)
}

sp {convert-parsed-format*elaborate*predicate-is-predicate*moreless-than
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^arg1 <p> ^predicate <pp>)
   (<p> ^item-type predicate)
   (<pp> ^item-type predicate ^handle << less-than1 more-than1 >>)
-{(<c> ^predicate {<p1> <> <pp>})
  (<p1> ^property <ppr>)
  (<ppr> ^handle number)}
-->
   (<c> ^formatted true)
   (<s> ^predicate <pp>)
   (<pp> ^1 <p>)
}


sp {convert-parsed-format*elaborate*predicate-is-predicate*number*moreless-than
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^arg1 <p> ^predicate <pp>)
   (<p> ^item-type predicate)
   (<pp> ^item-type predicate ^handle << less-than1 more-than1 >>)
   (<c> ^predicate {<p1> <> <pp>})
   (<p1> ^property <ppr>)
   (<ppr> ^handle number)
-->
   (<c> ^formatted true)
   (<s> ^predicate <pp>)
   (<pp> ^1 <p> ^number-mod <p1>)
}

sp {convert-parsed-format*elaborate*predicate*number*attribute
   (state <s> ^name convert-parsed-format
              ^parameter <c>)
   (<c> ^predicates.number <num> ^formatted <f2> ^parameter-index <id2>)
-->
   (<s> ^predicate <p> <pp>)
   (<p> ^property.handle number ^handle <num> ^equal-to <pp>)
   (<pp> ^handle of1 ^2 <p2> ^equal-to <p>)
   (<p2> ^2 <c> ^handle number1)
   #(<c2> ^formatted <f2> ^parameter-index <id2>)
}

sp {convert-parsed-format*elaborate*predicate-objects
   (state <s> ^name convert-parsed-format
              ^predicate <c>)
   (<c> ^handle of1 ^2 <p2>)
   (<p2> ^2 <pp>)
   (<pp> ^predicates.category <type>)#<< location block object >>)^item-type <type> 
-->
   (<s> ^parameter <pp>)
}

sp {convert-parsed-format*elaborate*predicate-objects*of*first
   (state <s> ^name convert-parsed-format
              ^predicate <c>)
   (<c> ^handle <name> ^property ^relation <r>)
   (<r> ^handle of1 ^2 <pp>)
   (<pp>  ^predicates.category <type>)#<< location block object >>) ^item-type <type>
-->
   (<s> ^parameter <pp>)
}

sp {convert-parsed-format*elaborate*predicate-objects*of*second
   (state <s> ^name convert-parsed-format
              ^predicate <c>)
   (<c> ^handle of1 ^2 <r>)
   (<r> ^handle <name> ^2 <pp>)
   (<pp> ^predicates.category <type>)#<< location block object >>) ^item-type <type>
-->
   (<s> ^parameter <pp>)
}

sp {convert-parsed-format*elaborate*predicate-objects*more
   (state <s> ^name convert-parsed-format
              ^predicate <c>)
   (<c> ^handle << less-than1 more-than1 >> ^1 <p1> ^2 <p2>)
-->
   (<s> ^predicate <p1> <p2>)
}

sp {convert-parsed-format*elaborate*predicate*of*predicate
   (state <s> ^name convert-parsed-format
              ^predicate <c>)
   (<c> ^handle of1 ^2 <pr> ^item-type predicate)
   (<pr> ^handle <ha> ^2 <c2> -^1 )
   (<c2> ^handle <h4> ^relation <r5>)
-->
   (<s> ^predicate <c2>)
}

sp {convert-parsed-format*elaborate*predicate*of*relation*predicate
   (state <s> ^name convert-parsed-format
              ^predicate.relation <c>)
   (<c> ^handle of1 ^2 <c2>)
   (<c2> ^handle <h4> ^property)
-->
   (<s> ^predicate <c2>)
}

sp {convert-parsed-format*elaborate*arg1*relation*parameter
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^<< arg1 arg2 >> <a>)
   (<a> ^2 <p>)
   (<p> ^predicates.category <type>)
-->
   (<s> ^parameter <p>)
}

sp {convert-parsed-format*elaborate*arg1*of-concept*parameter
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^<< arg1 arg2 >> <a>)
   (<a> ^handle of1 ^2 <p>)
-->
   (<s> ^predicate <a>)
}

sp {convert-parsed-format*elaborate*parameter*relation*parameter
   (state <s> ^name convert-parsed-format
              ^parameter <p>)
   (<p> ^relation <r>)
   (<r> ^<< 2 3 >> <pp>)
   (<pp> ^predicates.category <type>)
  -{(<r> ^handle in1)
    (<s> -^superstate.world.predicates.predicate.handle in1)}
-->
   (<s> ^parameter <pp>)
}

sp {convert-parsed-format*elaborate*arg2*parameter
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^predicate <p>)
   (<p> ^<< 2 3 >> <pp>)
   (<pp> ^predicates <pred>)
   (<pred> ^category <type>)
 -{(<s> ^learning-predicate <lp>) #in set
   (<lp> ^name <name>)
   (<pred> ^property <name>)
    (<p> ^handle in1)}
 -{(<pred> ^property) #bit hacky
   (<s> -^superstate.world.predicates.predicate.handle in1)
    (<p> ^handle in1)}
-->
   (<s> ^parameter <pp>)
}

sp {convert-parsed-format*elaborate*arg2*parameter*name
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^predicate <p>)
   (<p> ^<< 2 3 >> <pp>)
   (<pp> ^category <type> ^item-type object ^name)
-->
   (<s> ^parameter <pp>)
}

#ok test for now but need to be better
#TODO but not if mentioned in another test
sp {convert-parsed-format*elaborate*arg2*parameter*indef
   (state <s> ^name convert-parsed-format
              -^<< input-object-1 input-object-2 output-object-1 >> <p>
              ^clause <c>)
   (<c> ^predicate.{2} <p>)
   (<p> ^predicates.category <type> -^predicates.number)
  -{(<s> ^pref-action.<< 1 2 >> <cz8>)
     (<cz8> ^<< arg1 arg2 >> <p>)}
  -{(<s> ^pref-action.<< 1 2 >> <cz9>)
     (<cz9> ^arg2.{2} <p>)}
  -{(<s> ^pref-action <cx8>)
     (<cx8> ^<< arg1 arg2 >> <p>)}
  -{(<s> ^pref-action <cx9>)
     (<cx9> ^arg2.{2} <p>)}
   -{(<s> ^clause <c2>)
     (<c2> ^<< arg1 arg2 >> <p>)}
  -{(<s> ^parameter <pp>)
    (<pp> ^relation <r>)
    (<r> ^2 <p>)}
-{(<s> ^parameter <pp>)
    (<pp> ^relation <r>)
    (<r> ^3 <p>)}
  -{(<p> ^relation <rr>)
    (<rr> ^2)}
 -{(<s> ^predicate {<pp3> <> <c>})
    (<pp3> ^{2}.{2} <p>)}
  -{(<s> ^clause {<c3> <> <c>})
    (<c3> ^predicate.{2} <p>)}
   -{(<s> ^clause {<c3> <> <c>})
    (<c3> ^predicate.{3} <p>)}
  -{(<s> ^clause {<c4> <> <c>})
    (<c4> ^action <act> ^arg2.{2} <p>)}
  -{(<s> ^clause {<c4> <> <c>})
    (<c4> ^action <act> ^arg1 <p>)}
-->
   (<s> ^indef <p>)
}

sp {convert-parsed-format*elaborate*arg2*parameter*indef2
   (state <s> ^name convert-parsed-format
              -^<< input-object-1 input-object-2 output-object-1 >> <p>
              ^parameter <c>)
   (<c> ^relation <rel1>)
   (<rel1> ^2 <p>)
   (<p> ^predicates.category <type> -^predicates.number)
-{(<rel1> ^handle of1)
  (<c> ^predicates.number)}
   -{(<s> ^pref-action <cx8>)
     (<cx8> ^<< arg1 arg2 >> <p>)}
  -{(<s> ^pref-action <cx9>)
     (<cx9> ^arg2.{2} <p>)}
  -{(<s> ^pref-action.<< 1 2 >> <cz8>)
     (<cz8> ^<< arg1 arg2 >> <p>)}
  -{(<s> ^pref-action.<< 1 2 >> <cz9>)
     (<cz9> ^arg2.{2} <p>)}
   -{(<s> ^clause <c2>)
     (<c2> ^<< arg1 arg2 >> <p>)}
   -{(<s> ^clause <c2>)
     (<c2> ^<< arg1 arg2 >> <p>)}
  -{(<s> ^parameter {<por> <> <c>})
    (<por> ^relation <r>)
    (<r> ^2 <p>)}
-{(<s> ^parameter {<por2> <> <c>})
    (<por2> ^relation <r>)
    (<r> ^3 <p>)}
  -{(<p> ^relation <rr>)
    (<rr> ^2)}
  -{(<s> ^predicate {<pp3> <> <c>})
    (<pp3> ^{2}.{2} <p>)}
  -{(<s> ^clause {<c3> <> <c>})
    (<c3> ^predicate.{2} <p>)}
   -{(<s> ^clause {<c3> <> <c>})
    (<c3> ^predicate.{3} <p>)}
  -{(<s> ^clause {<c4> <> <c>})
    (<c4> ^action <act> ^arg2.{2} <p>)}
  -{(<s> ^clause {<c4> <> <c>})
    (<c4> ^action <act> ^arg1 <p>)}
-->
   (<s> ^indef <p>)
}

sp {convert-parsed-format*propose*create-object
   (state <s> ^name convert-parsed-format
              ^parameter <c>)
   (<c> -^formatted)
  -{(<s> ^parameter <c2>)
    (<c2> ^relation <r>)
    (<r> ^2 <c> ^handle in1)
    (<s> -^superstate.world.predicates.predicate.handle in1)}
-{(<c> ^predicates.number <n> ^relation.handle of1 )} #subset
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-object
        ^parameter <c>)
}

sp {convert-parsed-format*apply*handle-subset*interrupt
   (state <s> ^name convert-parsed-format
              #^parameter <c>
			  ^operator <o2>)
			  #^operator <o2> +
			  #^operator {<o> <> <o2>})
   #(<o> ^name handle-subset)
   (<o2> ^name handle-predicate)
-->
(write (cmd matches))
(write (cmd print <o2> -d 6))
#(write (cmd print <o2> -d 6))
#(interrupt)
}


sp {convert-parsed-format*propose*handle-subset
   (state <s> ^name convert-parsed-format
              ^parameter <c>)
   (<c> -^formatted ^predicates.number <n> ^relation <r>)
   (<r> ^handle of1 ^2 <r2>) 
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-subset
   		^parameter <c>
   		^number <n>
        ^arg1 <r2>)
}

sp {convert-parsed-format*apply*handle-subset
   (state <s> ^name convert-parsed-format
   		  	  ^object-count <oc>
   		  	  ^operator <o>)
   (<o> ^name handle-subset
   		^number <num>
		^parameter <c>
        ^arg1 <r2>)
   (<r2> ^formatted <p2> ^parameter-index <id2>)
   (<p2> ^rtype set)
-->
(<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <num> ^args <a> ^parameter <para> ^type function ^function subset-of ^rtype set)
   (<a> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type set)
   (<para2> ^param-id <id2> ^type set)
}


sp {convert-parsed-format*apply*create-object*increment-object-count
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^indef <c>
              ^operator <o>)
   (<o> ^name create-object ^parameter <c>)
   (<c> -^parameter-index)
-->
   (<c> ^parameter-index <oc>)
   (<s> ^object-count (+ 1 <oc>))
   (<s> ^object-count <oc> -) 
}

sp {convert-parsed-format*propose*handle-action
   (state <s> ^name convert-parsed-format
             -^clause.if-subclause <c> #then action used as predicate
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2>)
   (<a> -^formatted)
  -{(<c> ^arg1 {<a3> <> <a1>})}
#-{(<s> ^clause.action {<a4> <> <a>})  #JK removed order is indifferent
#  (<a4> -^handle is1 -^formatted)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
}
sp {convert-parsed-format*propose*handle-action-predicate
   (state <s> ^name convert-parsed-format
              ^clause.if-subclause <c> #then action used as predicate
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2>)
   (<a> -^formatted)
  -{(<c> ^arg1 {<a3> <> <a1>})}
#-{(<s> ^clause.action {<a4> <> <a>}) #JK wrong duplicate level
#  (<a4> -^handle is1)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action-predicate
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
}



sp {convert-parsed-format*propose*handle-pref-action2
   (state <s> ^name convert-parsed-format
              ^pref-action <c>)
   (<c> ^1 <c1> ^2 <c2> ^prefer 2)
   (<c1> ^action <a> ^arg1 <a1> ^arg2 <a2>)
   (<c2> ^action <ab> ^arg1 <a3> ^arg2 <a4>)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-pref-action
        ^action <a>
        ^action2 <ab> #so far the same?
        ^prefer 2
        ^arg1 <a1>
        ^arg2 <a2>
        ^arg1b <a3>
        ^arg2b <a4>)
}

sp {convert-parsed-format*propose*handle-pref-action2*noarg2
   (state <s> ^name convert-parsed-format
              ^pref-action <c>)
   (<c> ^1 <c1> ^2 <c2> ^prefer 2)
   (<c1> ^action <a> ^arg1 <a1> -^arg2)
   (<c2> ^action <ab> ^arg1 <a3> -^arg2)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-pref-action
        ^action <a>
        ^action2 <ab> #so far the same?
        ^prefer 2
        ^arg1 <a1>
        ^arg1b <a3>)
}
sp {convert-parsed-format*propose*handle-pref-action
   (state <s> ^name convert-parsed-format
              ^pref-action <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2> ^prefer single)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-pref-action
        ^action <a>
        ^prefer single
        ^arg1 <a1>
        ^arg2 <a2>)
}

sp {convert-parsed-format*propose*handle-pref-action*avoid
   (state <s> ^name convert-parsed-format
              ^pref-action <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2> ^avoid single)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-pref-action
        ^action <a>
        ^avoid single
        ^arg1 <a1>
        ^arg2 <a2>)
}

sp {convert-parsed-format*propose*handle-pref-action*avoid*arg1
   (state <s> ^name convert-parsed-format
              ^pref-action <c>)
   (<c> ^action <a> ^arg1 <a1> -^arg2 <a2> ^avoid single)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-pref-action
        ^action <a>
        ^avoid single
        ^arg1 <a1>)
}

sp {convert-parsed-format*propose*handle-pref-action*arg1
   (state <s> ^name convert-parsed-format
              ^pref-action <c>)
   (<c> ^action <a> ^arg1 <a1> -^arg2 <a2> ^prefer single)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-pref-action
        ^action <a>
        ^prefer single
        ^arg1 <a1>)
}

sp {convert-parsed-format*apply*handle-action-predicate
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action-predicate ^action <c> ^arg1 <a1> ^arg2 <a2>)
   (<c> ^handle <name>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-pref-action
   (state <s> ^name convert-parsed-format
              -^modifier previously
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c> ^arg1 <a1> ^arg2 <a2> ^prefer single)
   (<c> ^handle <name>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^prefer <n12> ^nlp <n>)
   (<n12> ^1 <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-pref-action*avoid
   (state <s> ^name convert-parsed-format
              -^modifier previously
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c> ^arg1 <a1> ^arg2 <a2> ^avoid single)
   (<c> ^handle <name>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^avoid <n12> ^nlp <n>)
   (<n12> ^1 <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-pref-action*arg1*previously
   (state <s> ^name convert-parsed-format
              ^modifier previously
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c> ^arg1 <a1> -^arg2 <a2> ^prefer single)
   (<c> ^handle <name>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<p> ^rtype <rtype>)
-->
   (<c> ^formatted true)
   (<s> ^prefer <n12>)
   (<n12> ^1 <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>) 
}

sp {convert-parsed-format*apply*handle-pref-action*avoid*arg1*previously
   (state <s> ^name convert-parsed-format
              ^modifier previously
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c> ^arg1 <a1> -^arg2 <a2> ^avoid single)
   (<c> ^handle <name>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<p> ^rtype <rtype>)
-->
   (<c> ^formatted true)
   (<s> ^avoid <n12>)
   (<n12> ^1 <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>) 
}

sp {convert-parsed-format*apply*handle-pref-action*avoid*arg1
   (state <s> ^name convert-parsed-format
             -^modifier previously
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c> ^arg1 <a1> -^arg2 <a2> ^avoid single)
   (<c> ^handle <name>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<p> ^rtype <rtype>)
-->
   (<c> ^formatted true)
   (<s> ^avoid <n12> ^nlp <n>)
   (<n12> ^1 <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>) 
}

sp {convert-parsed-format*apply*handle-pref-action*arg1
   (state <s> ^name convert-parsed-format
             -^modifier previously
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c> ^arg1 <a1> -^arg2 <a2> ^prefer single)
   (<c> ^handle <name>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<p> ^rtype <rtype>)
-->
   (<c> ^formatted true)
   (<s> ^prefer <n12> ^nlp <n>)
   (<n12> ^1 <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>) 
}
sp {convert-parsed-format*elaborate*numeric-action
   (state <s> ^name convert-parsed-format
              ^nlp <n>
              ^operator <o>)
   (<n> ^attribute action ^type concept ^name write1)
-->
   (<n> ^return-type number)
}

sp {convert-parsed-format*apply*handle-pref-action2
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c>
        ^action2 <c2> #so far the same?
        ^prefer 2
        ^arg1 <a1>
        ^arg2 <a2>
        ^arg1b <a3>
        ^arg2b <a4>)
   (<c> ^handle <name>)
   (<c2> ^handle <name2>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a3> ^formatted <p3> ^parameter-index <id3>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^formatted <p2> -^new-formatted ^parameter-index <id2>)
   (<a4> ^handle <prep2> ^item-type predicate ^2 <a44>)
   (<a44> ^formatted <p4> -^new-formatted ^parameter-index <id4>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
   (<p4> ^rtype <rtype4>)
-->
   (<c> ^formatted true)
   (<s> ^prefer <n12> ^nlp <n> <n2>)
   (<n12> ^1 <n> ^2 <n2>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<n2> ^name <name2> ^args <ab> ^parameter <parab> ^type concept ^attribute action ^rtype <rtype3> ^verb <prep2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<parab> ^1 <para3> ^2 <para4>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   (<para4> ^param-id <id4> ^type <rtype4>)
}

sp {convert-parsed-format*apply*handle-pref-action2*new4
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c>
        ^action2 <c2> #so far the same?
        ^prefer 2
        ^arg1 <a1>
        ^arg2 <a2>
        ^arg1b <a3>
        ^arg2b <a4>)
   (<c> ^handle <name>)
   (<c2> ^handle <name2>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a3> ^formatted <p3> ^parameter-index <id3>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^formatted <p2> -^new-formatted ^parameter-index <id2>)
   (<a4> ^handle <prep2> ^item-type predicate ^2 <a44>)
   (<a44> ^new-formatted <p4> ^parameter-index <id4>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
   (<p4> ^rtype <rtype4>)
-->
   (<c> ^formatted true)
   (<s> ^prefer <n12> ^nlp <n> <n2>)
   (<n12> ^1 <n> ^2 <n2>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<n2> ^name <name2> ^args <ab> ^parameter <parab> ^type concept ^attribute action ^rtype <rtype3> ^verb <prep2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<parab> ^1 <para3> ^2 <para4>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   (<para4> ^param-id <id4> ^type <rtype4>)
}


sp {convert-parsed-format*apply*handle-pref-action2*new
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c>
        ^action2 <c2> #so far the same?
        ^prefer 2
        ^arg1 <a1>
        ^arg2 <a2>
        ^arg1b <a3>
        ^arg2b <a4>)
   (<c> ^handle <name>)
   (<c2> ^handle <name2>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a3> ^formatted <p3> ^parameter-index <id3>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^new-formatted <p2> ^parameter-index <id2>)
   (<a4> ^handle <prep2> ^item-type predicate ^2 <a44>)
   (<a44> ^formatted <p4> -^new-formatted ^parameter-index <id4>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
   (<p4> ^rtype <rtype4>)
-->
   (<c> ^formatted true)
   (<s> ^prefer <n12> ^nlp <n> <n2>)
   (<n12> ^1 <n> ^2 <n2>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<n2> ^name <name2> ^args <ab> ^parameter <parab> ^type concept ^attribute action ^rtype <rtype3> ^verb <prep2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<parab> ^1 <para3> ^2 <para4>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   (<para4> ^param-id <id4> ^type <rtype4>)
}
sp {convert-parsed-format*apply*handle-pref-action2*new2
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c>
        ^action2 <c2> #so far the same?
        ^prefer 2
        ^arg1 <a1>
        ^arg2 <a2>
        ^arg1b <a3>
        ^arg2b <a4>)
   (<c> ^handle <name>)
   (<c2> ^handle <name2>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a3> ^formatted <p3> ^parameter-index <id3>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^new-formatted <p2> ^parameter-index <id2>)
   (<a4> ^handle <prep2> ^item-type predicate ^2 <a44>)
   (<a44> ^new-formatted <p4> ^parameter-index <id4>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
   (<p4> ^rtype <rtype4>)
-->
   (<c> ^formatted true)
   (<s> ^prefer <n12> ^nlp <n> <n2>)
   (<n12> ^1 <n> ^2 <n2>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<n2> ^name <name2> ^args <ab> ^parameter <parab> ^type concept ^attribute action ^rtype <rtype3> ^verb <prep2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<parab> ^1 <para3> ^2 <para4>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   (<para4> ^param-id <id4> ^type <rtype4>)
}


sp {convert-parsed-format*apply*handle-pref-action2*noarg2
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c>
        ^action2 <c2> #so far the same?
        ^prefer 2
        ^arg1 <a1>
        -^arg2 
        ^arg1b <a3>
        -^arg2b)
   (<c> ^handle <name>)
   (<c2> ^handle <name2>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^prefer <n12> ^nlp <n> <n2>)
   (<n12> ^1 <n> ^2 <n2>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype>)# ^verb <prep>)
   (<n2> ^name <name2> ^args <ab> ^parameter <parab> ^type concept ^attribute action ^rtype <rtype3>)# ^verb <prep2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<parab> ^1 <para3>)
   (<para3> ^param-id <id3> ^type <rtype3>)
}

#consider versions
sp {convert-parsed-format*propose*handle-pref-action2*consider
   (state <s> ^name convert-parsed-format
              ^pref-action <c>)
   (<c> ^1 <c1> ^2 <c2> ^consider 2)
   (<c1> ^action <a> ^arg1 <a1> ^arg2 <a2>)
   (<c2> ^action <ab> ^arg1 <a3> ^arg2 <a4>)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-pref-action
        ^action <a>
        ^action2 <ab> #so far the same?
        ^consider 2
        ^arg1 <a1>
        ^arg2 <a2>
        ^arg1b <a3>
        ^arg2b <a4>)
}

sp {convert-parsed-format*propose*handle-pref-action*consider
   (state <s> ^name convert-parsed-format
              ^pref-action <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2> ^consider single)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-pref-action
        ^action <a>
        ^consider single
        ^arg1 <a1>
        ^arg2 <a2>)
}

sp {convert-parsed-format*apply*handle-pref-action*consider
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c> ^arg1 <a1> ^arg2 <a2> ^consider single)
   (<c> ^handle <name>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^consider <n12> ^nlp <n>)
   (<n12> ^1 <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-pref-action2*consider
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-pref-action ^action <c>
        ^action2 <c2> #so far the same?
        ^consider 2
        ^arg1 <a1>
        ^arg2 <a2>
        ^arg1b <a3>
        ^arg2b <a4>)
   (<c> ^handle <name>)
   (<c2> ^handle <name2>)
   (<a1> ^formatted <p> ^parameter-index <id>)
   (<a3> ^formatted <p3> ^parameter-index <id3>)
   (<a2> ^handle <prep> ^item-type predicate ^2 <a22>)
   (<a22> ^formatted <p2> ^parameter-index <id2>)
   (<a4> ^handle <prep2> ^item-type predicate ^2 <a44>)
   (<a44> ^formatted <p4> ^parameter-index <id4>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
   (<p4> ^rtype <rtype4>)
-->
   (<c> ^formatted true)
   (<s> ^consider <n12> ^nlp <n> <n2>)
   (<n12> ^1 <n> ^2 <n2>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute action ^rtype <rtype> ^verb <prep>)
   (<n2> ^name <name2> ^args <ab> ^parameter <parab> ^type concept ^attribute action ^rtype <rtype3> ^verb <prep2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<parab> ^1 <para3> ^2 <para4>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   (<para4> ^param-id <id4> ^type <rtype4>)
}

#actions
#JK remove should do peacemeal dont handle two clauses at once
#sp {convert-parsed-format*propose*handle-action*2clause
#   (state <s> ^name convert-parsed-format
#              ^clause {<c2> > <c>}
#              ^clause <c>)
#   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2>)
#   (<c2> ^action <af> ^arg1 <a1b> ^arg2 <a2b>)
#   (<a> -^formatted)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name handle-action
#        ^action <a>
#        ^arg1 <a1b>
#        ^arg2 <a2b>
#        ^arg1b <a1>
#        ^arg2b <a2>)
#}
###############REMOVE JK recent 1/8

sp {convert-parsed-format*propose*handle-action*2actions
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2>)
   (<a> -^formatted)
   (<c> ^arg1 {<a1b> < <a1>} ^arg2 {<a2b> < <a2>})
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1b>
        ^arg2 <a2b>
        ^arg1b <a1>
        ^arg2b <a2>)
}
sp {convert-parsed-format*propose*handle-action*2actions*1arg2
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2> -^arg1.handle number1)
   (<a> -^formatted)
   (<c> ^arg1 {<a1b> < <a1>})
   -{(<c> ^arg1 {<a1c> <> <a1b> <> <a1>})}
  -{(<c> ^arg2 <> <a2>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1b>
        ^arg2 <a2>
        ^arg1b <a1>
        ^arg2b <a2>)
}
sp {convert-parsed-format*propose*handle-action*2actions*1arg1number
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2>)
   (<a> -^formatted)
   (<c> ^arg1 {<a1b> <> <a1>})
   (<a1b> ^handle number1)
   -{(<c> ^arg1 {<a1c> <> <a1b> <> <a1>})}
  -{(<c> ^arg2 <> <a2>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
}
sp {convert-parsed-format*propose*handle-action*2actions*1arg3
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2>)
   (<a> -^formatted)
   (<c> ^arg1 {<a1b> < <a1>} ^arg1 {<a1c> < <a1b>})
  -{(<c> ^arg2 <> <a2>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1b>
        ^arg2 <a2>
        ^arg1b <a1>
        ^arg2b <a2>
        ^arg1c <a1c>
        ^arg2c <a2>)
}


sp {convert-parsed-format*propose*handle-action*one-arg
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> -^arg2)
   (<a> -^formatted -^handle is1)
  -{(<c> ^arg1 <> <a1>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action
        ^clause <c>
        ^action <a>
        ^arg1 <a1>)
#		^arg1b <a1>) #why ever do this?
}
sp {convert-parsed-format*propose*handle-action*2one-arg
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> -^arg2)
   (<a> -^formatted -^handle is1)
   (<c> ^arg1 {<a4> < <a1>})
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action
        ^clause <c>
        ^action <a>
        ^arg1 <a4>
		^arg1b <a1>)
}

#TODO not general
#TODO hacky change for set usage of input object need to think more general solution
sp {convert-parsed-format*apply*handle-action*has*same
#:interrupt
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action ^action <ac> ^clause <cc>)
   (<ac> ^handle << has1 has >>)
   (<cc> ^arg1.handle << same1 same >> ^arg1 <a2> ^agent <c2>)
   (<a2> -^handle same -^handle same1 ^handle <name>)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2> -^rtype)
   (<f2> ^rtype <rtype2> ^parameter <p>)
   (<p> -^1)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
#hmmmm
   (<ac> ^formatted yes)
   (<f2> ^rtype <rtype2> -) 
   (<f2> ^parameter <p> -)
   (<f2> ^rtype single)
   (<c2> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type same-attribute ^rtype <rtype2>)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-action*has*same*rtype
#:interrupt
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action ^action <ac> ^clause <cc>)
   (<ac> ^handle << has1 has >>)
   (<cc> ^arg1.handle << same1 same >> ^arg1 <a2> ^agent <c2>)
   (<a2> -^handle same -^handle same1 ^handle <name>)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2> ^rtype <rtype2>)
   (<f2> ^parameter <p> ^rtype <rtype3>) 
   (<p> -^1)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
#hmmmm
   (<ac> ^formatted yes)
   (<f2> ^rtype <rtype3> -) 
   (<f2> ^parameter <p> -)
   (<f2> ^rtype single)
   (<c2> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type same-attribute ^rtype <rtype2>)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-action*has*same*parameter
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action ^action <ac> ^clause <cc>)
   (<ac> ^handle << has1 has >>)
   (<cc> ^arg1.handle << same1 same >> ^arg1 <a2> ^agent <c2>)
   (<a2> -^handle same -^handle same1 ^handle <name>)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2> ^parameter <p>)
   (<p> ^1)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<ac> ^formatted yes)
   #(<f2> ^rtype <rtype2> -) 
   #(<f2> ^parameter <p> -)
   #(<f2> ^rtype single)
   (<c2> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type same-attribute ^rtype <rtype2>)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-action*has*same*noparameter-index
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action ^action <ac> ^clause <cc>)
   (<ac> ^handle << has1 has >>)
   (<cc> ^arg1.handle << same1 same >> ^arg1 <a2> ^agent <c2>)
   (<a2> -^handle same -^handle same1 ^handle <name>)
   (<c2> -^new-formatted ^formatted <f2> -^parameter-index)
   (<f2> ^rtype <rtype2> ^parameter <p> -^type function)
   (<p> ^{1}.param-id <id2>)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<ac> ^formatted yes)
   (<f2> ^rtype <rtype2> -) 
   (<f2> ^parameter <p> -)
   (<f2> ^rtype single)
   (<c2> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type same-attribute ^rtype <rtype2>)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}


#todo better system that formatted and new-formatted
sp {convert-parsed-format*apply*handle-action*has*same*noparameter-index*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action ^action <ac> ^clause <cc>)
   (<ac> ^handle << has1 has >>)
   (<cc> ^arg1.handle << same1 same >> ^arg1 <a2> ^agent <c2>)
   (<a2> -^handle same -^handle same1 ^handle <name>)
   (<c2> ^new-formatted <f2> -^parameter-index)
   (<f2> ^rtype <rtype2> ^parameter <p> )#-^type function)
   (<p> ^{1}.param-id <id2>)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<ac> ^formatted yes)
#   (<f2> ^rtype <rtype2> -) 
#   (<f2> ^parameter <p> -)
#   (<f2> ^rtype single)
#   (<c2> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type same-attribute ^rtype <rtype2>)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-action*has*same*noparameter-index*function
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action ^action <ac> ^clause <cc>)
   (<ac> ^handle << has1 has >>)
   (<cc> ^arg1.handle << same1 same >> ^arg1 <a2> ^agent <c2>)
   (<a2> -^handle same -^handle same1 ^handle <name>)
   (<c2> -^new-formatted ^formatted <f2> -^parameter-index)
   (<f2> ^rtype <rtype2> ^parameter <p> ^type function)
   (<p> ^{1}.param-id <id2>)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<ac> ^formatted yes)
   (<c2> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type same-attribute ^rtype <rtype2>)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}


sp {convert-parsed-format*apply*handle-action*has*same*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action ^action <ac> ^clause <cc>)
   (<ac> ^handle << has1 has >>)
   (<cc> ^arg1.handle << same1 same >> ^arg1 <a2> ^agent <c2>)
   (<a2> -^handle same -^handle same1 ^handle <name>)
   (<c2> ^new-formatted <f2> ^parameter-index <id2> -^rtype)
   (<f2> ^rtype <rtype2> ^parameter <p>)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<ac> ^formatted yes)
   (<f2> ^rtype <rtype2> -) 
   (<f2> ^parameter <p> -)
   (<f2> ^rtype single)
   (<c2> ^new-formatted <n>)
   (<c2> ^new-formatted <f2> -)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type same-attribute ^rtype <rtype2>)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-action*has*same*new-formatted*rtype
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-action ^action <ac> ^clause <cc>)
   (<ac> ^handle << has1 has >>)
   (<cc> ^arg1.handle << same1 same >> ^arg1 <a2> ^agent <c2>)
   (<a2> -^handle same -^handle same1 ^handle <name>)
   (<c2> ^new-formatted <f2> ^parameter-index <id2> ^rtype <rtype2>)
   (<f2> ^rtype <rtype3> ^parameter <p>)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<ac> ^formatted yes)
   (<f2> ^rtype <rtype3> -) 
   (<f2> ^parameter <p> -)
   (<f2> ^rtype single)
   (<c2> ^new-formatted <n>)
   (<c2> ^new-formatted <f2> -)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type same-attribute ^rtype <rtype2>)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}


sp {convert-parsed-format*apply*handle-action*number*new
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^action-count <an>
			  ^object-count <oc>
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
       -^arg1b
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
(<a> ^handle <name>)
(<a1> ^number <num> -^parameter-index -^formatted )
(<a2> ^2 <obj2> ^handle <rname>)
   (<obj2> ^parameter-index <pa2>)
   (<nps> ^verb-structure <va2>)
-->
   (<s> ^action-count <an> -)
   (<s> ^action-count (+ <an> 1))
   (<ss> ^verb-structure <va2>)
   (<va2> ^<an> <va>)
   (<va> ^verb-name <name> ^verb-prep <rname> ^1 <oc> ^2 <pa2>)
   (<a> ^formatted true)  
  #(<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name number ^result.set.instance <i> ^args <ax> ^parameter <para> ^rtype single ^return-type number)
   (<i> ^1 <num>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <oc> ^type single)
}



sp {convert-parsed-format*apply*handle-action
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^action-count <an>
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
       -^arg1b
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
   (<a> ^handle <name>)
   (<a1> ^parameter-index <pa>)
   (<a2> ^2 <obj2> ^handle <rname>)
   (<obj2> ^parameter-index <pa2>)
   (<nps> ^verb-structure <va2>)
-->
   (<s> ^action-count <an> -)
   (<s> ^action-count (+ <an> 1))
   (<ss> ^verb-structure <va2>)
   (<va2> ^<an> <va>)
   (<va> ^verb-name <name> ^verb-prep <rname> ^1 <pa> ^2 <pa2>)
   (<a> ^formatted true)  
}

sp {convert-parsed-format*apply*handle-action*one-arg
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^action-count <an>
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1>
        -^arg1b
        -^arg2)
   (<a> ^handle <name>)
   (<a1> ^parameter-index <pa>)
   (<nps> ^verb-structure <va>)
-->
   (<s> ^action-count <an> -)
   (<s> ^action-count (+ <an> 1))
   (<ss> ^verb-structure <va>)  
   (<va> ^<an> <va1>)
   (<va1> ^verb-name <name> ^verb-prep <name> ^1 <pa>)
   (<a> ^formatted true)
}

sp {convert-parsed-format*apply*handle-action*2one-arg
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^action-count <an>
			  ^action-count 1 #jk dumb hack for now
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1>
        ^arg1b <a1b>
        -^arg2)
   (<a> ^handle <name>)
   (<a1> ^parameter-index <pa>)
   (<a1b> ^parameter-index <pab>)
   (<nps> ^verb-structure <va>)
-->
   (<s> ^action-count <an> -)
   (<s> ^action-count (+ <an> 2))
   (<ss> ^verb-structure <va>)  
#didnt work need to bias this one first?
   #(<va> ^<an> <va1> ^{(+ <an> 1)} <va2>) 
   (<va> ^1 <va1> ^2 <va2>) 
   (<va1> ^verb-name <name> ^verb-prep <name> ^1 <pa>)
   (<a> ^formatted true)
   (<va2> ^verb-name <name> ^verb-prep <name> ^1 <pab>)
}

sp {convert-parsed-format*apply*handle-action*2one-arg*dumbsecondactionhack
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^action-count <an>
			  ^action-count 2 #jk dumb hack for now
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1>
        ^arg1b <a1b>
        -^arg2)
   (<a> ^handle <name>)
   (<a1> ^parameter-index <pa>)
   (<a1b> ^parameter-index <pab>)
   (<nps> ^verb-structure <va>)
-->
   (<s> ^action-count <an> -)
   (<s> ^action-count (+ <an> 2))
   (<ss> ^verb-structure <va>)  
#didnt work need to bias this one first?
   #(<va> ^<an> <va1> ^{(+ <an> 1)} <va2>) 
   (<va> ^2 <va1> ^3 <va2>) 
   (<va1> ^verb-name <name> ^verb-prep <name> ^1 <pa>)
   (<a> ^formatted true)
   (<va2> ^verb-name <name> ^verb-prep <name> ^1 <pab>)
}


sp {convert-parsed-format*apply*handle-action*first-argof
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^action-count <an>
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
       -^arg1b
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
   (<a> ^handle <name>)
   (<a1> -^parameter-index ^formatted.parameter.{1}.param-id <pa>)
   (<a2> ^2 <obj2> ^handle <rname>)
   (<obj2> ^parameter-index <pa2>)
   (<nps> ^verb-structure <va2>)
-->
   (<s> ^action-count <an> -)
   (<s> ^action-count (+ <an> 1))
   (<ss> ^verb-structure <va2>)
   (<va2> ^<an> <va>)
   (<va> ^verb-name <name> ^verb-prep <rname> ^1 <pa> ^2 <pa2>)
   (<a> ^formatted true)  
}

sp {convert-parsed-format*apply*handle-action*2verbs
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
        ^arg1b <a1b>
        ^arg2b <a2b>
       -^arg1c
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
   (<a> ^handle <name>)
   (<a1> ^parameter-index <pa>)
   (<a2> ^2 <obj2> ^handle <rname>)
   (<obj2> ^parameter-index <pa2>)
   (<nps> ^verb-structure <va2>)
   (<a1b> ^parameter-index <pab>)
   (<a2b> ^2 <obj2b> ^handle <rnameb>)
   (<obj2b> ^parameter-index <pa2b>)
-->
    (<ss> ^verb-structure <va2>)
    (<va2> ^1 <va> ^2 <vab>)
   (<va> ^verb-name <name> ^verb-prep <rname> ^1 <pa> ^2 <pa2>)
   (<a> ^formatted true)
   (<vab> ^verb-name <name> ^verb-prep <rnameb> ^1 <pab> ^2 <pa2b>)
}

sp {convert-parsed-format*apply*handle-action*3verbs
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
        ^arg1b <a1b>
        ^arg2b <a2b>
        ^arg1c <a1c>
        ^arg2c <a2c>
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
   (<a> ^handle <name>)
   (<nps> ^verb-structure <va2>)
   
   (<a1> ^parameter-index <pa>)
   (<a2> ^2 <obj2> ^handle <rname>)
   (<obj2> ^parameter-index <pa2>)
   (<a1b> ^parameter-index <pab>)
   (<a2b> ^2 <obj2b> ^handle <rnameb>)
   (<obj2b> ^parameter-index <pa2b>)
   (<a1c> ^parameter-index <pac>)
   (<a2c> ^2 <obj2c> ^handle <rnamec>)
   (<obj2c> ^parameter-index <pa2c>)
-->
   (<ss> ^verb-structure <va2>)
   (<va2> ^1 <va> ^2 <vab> ^3 <vac>)
   (<va> ^verb-name <name> ^verb-prep <rname> ^1 <pa> ^2 <pa2>)
   (<a> ^formatted true)
   (<vab> ^verb-name <name> ^verb-prep <rnameb> ^1 <pab> ^2 <pa2b>)
   (<vac> ^verb-name <name> ^verb-prep <rnamec> ^1 <pac> ^2 <pa2c>)
}

sp {convert-parsed-format*propose*handle-predicate*parameter
   (state <s> ^name convert-parsed-format
              -^learn-link.handle <name>
              -^learning-predicate.spelling <name>
              ^predicate <p>)
   (<p> ^handle <name> -^formatted -^handle of1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-predicate
        ^predicate <p>)
}

sp {convert-parsed-format*propose*handle-predicate*numeric-predicate
   (state <s> ^name convert-parsed-format
              ^numeric-predicate <p>)
   (<p> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-predicate
        ^numeric-predicate <p>)
}

sp {convert-parsed-format*propose*handle-predicate*attribute-of
   (state <s> ^name convert-parsed-format
              -^learn-link.handle <name>
               -^learning-predicate.spelling <name>
              ^predicate <p>)
   (<p> ^handle of1 -^formatted ^{2}.handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-predicate
        ^predicate <p>)
}
#(<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)
sp {convert-parsed-format*apply*handle-predicate*reverseorder-of
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^relation <p2> -^equal-to.formatted -^handle number1)
   (<p2> ^handle of1 ^2 <c2>)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}
sp {convert-parsed-format*apply*handle-predicate*reverseorder-of*no-param
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^relation <p2> -^equal-to.formatted -^handle number1)
   (<p2> ^handle of1 ^2 <c2>)
   (<c2> ^formatted <f2> -^parameter-index)
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
 -{(state <s>)
   (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}
sp {convert-parsed-format*apply*handle-predicate*reverseorder-of*concept
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^relation <p2> -^equal-to.formatted -^handle number1)
   (<p2> ^handle of1 ^2 <c2>)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}
sp {convert-parsed-format*apply*handle-predicate*reverseorder-of*concept*no-param
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^relation <p2> -^equal-to.formatted -^handle number1)
   (<p2> ^handle of1 ^2 <c2>)
   (<c2> ^formatted <f2> -^parameter-index )
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}

sp {convert-parsed-format*apply*handle-predicate*reverseorder-of*output
  (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^relation <p2> -^equal-to.formatted -^handle number1)
   (<p2> ^handle of1 ^2 <c2>)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}
sp {convert-parsed-format*apply*handle-predicate*reverseorder-of*output*concept
  (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^relation <p2> -^equal-to.formatted -^handle number1)
   (<p2> ^handle of1 ^2 <c2>)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}

sp {convert-parsed-format*apply*handle-predicate*equal-exists*state-pair
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^2 <p> ^equal-to <eq> -^handle number1 -^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p> ^formatted <oc2> ^parameter-index <id2>)
   (<oc> ^rtype <rtype> ^parameter.{1}.param-id <id1>)
   (<oc2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <oc> ^2 <oc2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#sp {convert-parsed-format*apply*handle-predicate*equal-exists*attribute
#   (state <s> ^name convert-parsed-format
#              ^superstate.world.predicates.predicate.handle <name>
#              ^operator <o>)
#   (<o> ^name handle-predicate ^predicate <c>)
#   (<c> ^handle <name> ^2 <p> ^equal-to <eq> -^handle number1 -^modifier.handle negation)
#   (<eq> ^formatted <oc>)
#   (<p> ^formatted <oc2> ^parameter-index <id2>)
#   (<oc> ^rtype <rtype> ^parameter.{1}.param-id <id1>)
#   (<oc2> ^rtype <rtype2>)
#-->
#   (<c> ^formatted true)
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
#   (<a> ^1 <oc> ^2 <oc2>)
#   (<para> ^1 <para1> ^2 <para2>)
#   (<para1> ^param-id <id1> ^type <rtype>)
#   (<para2> ^param-id <id2> ^type <rtype2>)
#}



sp {convert-parsed-format*apply*handle-predicate*equal-exists*state-pair*negative
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^2 <p> ^equal-to <eq> -^handle number1 ^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p> ^formatted <oc2> ^parameter-index <id2>)
   (<oc> ^rtype <rtype> ^parameter.{1}.param-id <id1>)
   (<oc2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^negative true ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <oc> ^2 <oc2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}

sp {convert-parsed-format*apply*handle-predicate*equal-exists*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^relation <p2> ^equal-to <eq> -^handle number1)
   (<eq> ^formatted <oc>)
   (<p2> ^handle of1 ^2 <c2>)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#in general need smem to determine learned or primitive
sp {convert-parsed-format*apply*handle-predicate
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#sp {convert-parsed-format*apply*handle-predicate*no-param
#   (state <s> ^name convert-parsed-format
#             -^output-object-1 <c>
#              ^object-count <oc>
#              ^operator <o>)
#   (<o> ^name handle-predicate ^predicate <c>)
#   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent)
#   (<p2> ^handle <name> ^2 <c2> -^handle number1)
#   (<c2> ^formatted <f2> -^parameter-index)
#   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
#  -{(state <s>)
#     (<s> -^superstate.world.objects.object.predicates.<name>)}  
#-->
#   (<c> ^formatted <n>)
#   (<s> ^object-count <oc> -)
#   (<s> ^object-count (+ <oc> 1))
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
#   (<a> ^2 <f2>)
#   (<para> ^1 <para1> ^2 <para2>)
#   (<para1> ^param-id <oc> ^type <rtype2>)
#   (<para2> ^param-id <id2> ^type <rtype2>)
#}

sp {convert-parsed-format*apply*handle-predicate*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
  -{(state <s>)
     (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned
  (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent -^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-{(state <s>)
   (<s> ^clause <ca>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single) #TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*new-formatted
  (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent -^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-{(state <s>)
   (<c> ^equal-to <eq>)
   (<eq> ^handle of1 ^2 <eq2>)
   (<eq2> ^handle value)}  
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-{(state <s>)
   (<s> ^clause <ca>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single) #TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*new-formatted*return-number
  (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> -^equal-to.formatted -^equal-to.handle absent -^equal-to.property.handle number)
   (<eq> ^handle of1 ^2 <eq2>)
   (<eq2> ^handle value)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-{(state <s>)
   (<s> ^clause <ca>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number) #TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*formatted*return-number*no-param
  (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> -^equal-to.formatted -^equal-to.handle absent -^equal-to.property.handle number)
   (<eq> ^handle of1 ^2 <eq2>)
   (<eq2> ^handle value)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> -^new-formatted ^formatted <f2> -^parameter-index)
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-{(state <s>)
   (<s> ^clause <ca>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number) #TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*return-number
 (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent ^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-{(state <s>)
   (<s> ^clause <ca>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)#TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*return-number*no-param
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent ^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> -^new-formatted ^formatted <f2> -^parameter-index)
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-{(state <s>)
   (<s> ^clause <ca>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)#TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*return-number*new-formatted
  (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent ^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-{(state <s>)
   (<s> ^clause <ca>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)#TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#duplicate rule above, how to determine if numeric result? parent usage?
#sp {convert-parsed-format*apply*handle-predicate*concept*DEPRICATED
#   (state <s> ^name convert-parsed-format
#             -^output-object-1 <c>
#              ^object-count <oc>
#              ^operator <o>)
#   (<o> ^name handle-predicate ^predicate <c>)
#   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent) #^equal-to.property.handle number)
#   (<p2> ^handle <name> ^2 <c2> -^handle number1)
#   (<c2> ^formatted <f2> ^parameter-index <id2>)
#   (<f2> ^rtype <rtype2>)
#  -{(state <s>)
#     (<s> ^superstate.world.objects.object.predicates.<name>)}  
#-->
#   (<c> ^formatted <n>)
#   (<s> ^object-count <oc> -)
#   (<s> ^object-count (+ <oc> 1))
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)
#   (<a> ^2 <f2>)
#   (<para> ^1 <para1> ^2 <para2>)
#   (<para1> ^param-id <oc> ^type single)
#   (<para2> ^param-id <id2> ^type <rtype2>)
#}

sp {convert-parsed-format*apply*handle-predicate*output*concept
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent) #^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
  -{(state <s>)
     (<s> ^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#TODO need smem checks are terms primitive vs non not checking topstate
#TODO fold into create-object so no duplicate test of param-id
sp {convert-parsed-format*apply*handle-predicate*attribute*absent
   (state <s> ^name convert-parsed-format
              #^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq>)
   (<eq> ^handle absent)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 # -{(state <s>)
  #   (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<eq> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type has-attribute ^rtype <rtype2> ^negative true)
   (<a> ^1 <f2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent -^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-{(state <s>)
   (<s> ^clause <ca>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single)#TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*number
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^clause <ca>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent -^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)#TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned*number*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^clause <ca>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent -^equal-to.property.handle number)
   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<ca> ^arg1 <c> ^predicate.handle << more-than1 less-than1 >>)
 -{(state <s>)
   (<s> ^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)#TODO verify always single when of#^rtype <rtype2>) #sometimes return-type number... need to look at concept
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)#^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#sp {convert-parsed-format*apply*handle-predicate*of*learned*single-number
#   (state <s> ^name convert-parsed-format
#              ^object-count <oc>
#             -^output-object-1 <c>
#              ^operator <o>)
#   (<o> ^name handle-predicate ^predicate <c>)
#   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent ^equal-to.property.handle number)
#   (<p2> ^handle <name> ^2 <c2> -^handle number1)
#   (<c2> ^formatted <f2> ^parameter-index <id2>)
#   (<f2> ^rtype <rtype2>)
# -{(state <s>)
#   (<s> ^superstate.world.objects.object.predicates.<name>)}  
#-->
#   (<c> ^formatted <n>)
#   (<s> ^object-count <oc> -)
#   (<s> ^object-count (+ <oc> 1))
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)
#   (<a> ^2 <f2>)
#   (<para> ^1 <para1> ^2 <para2>)
#   (<para1> ^param-id <oc> ^type single)
#   (<para2> ^param-id <id2> ^type <rtype2>)
#}
#sp {convert-parsed-format*apply*handle-predicate*of*learned*single-number*output
#   (state <s> ^name convert-parsed-format
#              ^output-object-1 <c>
#              ^operator <o>)
#   (<o> ^name handle-predicate ^predicate <c>)
#   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted -^equal-to.handle absent ^equal-to.property.handle number)
#   (<p2> ^handle <name> ^2 <c2> -^handle number1 -^handle sum -^handle product -^handle difference)
#   (<c2> ^formatted <f2> ^parameter-index <id2>)
#   (<f2> ^rtype <rtype2>)
# -{(state <s>)
#   (<s> ^superstate.world.objects.object.predicates.<name>)}  
#-->
#   (<c> ^formatted <n>)
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype single ^return-type number)
#   (<a> ^2 <f2>)
#   (<para> ^1 <para1> ^2 <para2>)
#   (<para1> ^param-id 1 ^type single)
#   (<para2> ^param-id <id2> ^type <rtype2>)
#}


sp {convert-parsed-format*apply*handle-predicate*equal-exists
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> -^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
 -{(state <s>)
   (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*equal-exists*negative
   (state <s> ^name convert-parsed-format
              ^object-count <ic>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> ^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1} <p11>)
   (<p11> ^type <rtype1> ^param-id <id1>)
 -{(state <s>)
   (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <f1>)
   (<s> ^object-count <ic> -)
   (<s> ^object-count (+ <ic> 1))
   (<s> ^nlp <n>)
   (<n> ^name not-equal ^args <ar> ^parameter <para2> ^rtype single ^return-type number ^type function ^function soar-not-equal)
   (<ar> ^1 <oc> ^2 <f1>)
   (<para2> ^1 <para21> ^2 <para22>)
   (<para21> ^param-id <id1> ^type <rtype1>) 
   (<para22> ^param-id <ic> ^type <rtype2>) 
   (<f1> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <ic> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*equal-exists*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> -^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
 -{(state <s>)
   (<s> -^superstate.world.objects.object.predicates.<name>)}  
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*equal-exists*new-formatted*negative
   (state <s> ^name convert-parsed-format
              ^object-count <ic>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> ^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1} <p11>)
   (<p11> ^type <rtype1> ^param-id <id1>)
 -{(state <s>)
   (<s> -^superstate.world.objects.object.predicates.<name>)}
-->
   (<c> ^formatted <f1>)
   (<s> ^object-count <ic> -)
   (<s> ^object-count (+ <ic> 1))
   (<s> ^nlp <n>)
   (<n> ^name not-equal ^args <ar> ^parameter <para2x> ^rtype single ^return-type number ^type function ^function soar-not-equal)
   (<ar> ^1 <oc> ^2 <f1>)
   (<para2x> ^1 <para21> ^2 <para22>)
   (<para21> ^param-id <id1> ^type <rtype1>) 
   (<para22> ^param-id <ic> ^type <rtype2>) 
   (<f1> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <ic> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*equal-exists*concept*no-num
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle <name> ^2 <p> ^equal-to <eq> -^handle number1 -^handle of1 -^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p> ^formatted <oc2> ^parameter-index <id2>)
   (<oc> ^rtype <rtype> ^parameter.{1}.param-id <id1>)
   (<oc2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <oc> ^2 <oc2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#for concepts
sp {convert-parsed-format*apply*handle-predicate*equal-exists*concept
   (state <s> ^name convert-parsed-format
             -^superstate.world.objects.object.predicates.<name>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> -^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1> ^return-type number)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*equal-exists*negative*concept
   (state <s> ^name convert-parsed-format
              ^object-count <ic>
             -^superstate.world.objects.object.predicates.<name>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> ^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1} <p11> ^return-type number)
   (<p11> ^type <rtype1> ^param-id <id1>) 
-->
   (<c> ^formatted <f1>)
   (<s> ^object-count <ic> -)
   (<s> ^object-count (+ <ic> 1))
   (<s> ^nlp <n>)
   (<n> ^name not-equal ^args <ar> ^parameter <para2> ^rtype single ^return-type number ^type function ^function soar-not-equal)
   (<ar> ^1 <oc> ^2 <f1>)
   (<para2> ^1 <para21> ^2 <para22>)
   (<para21> ^param-id <id1> ^type <rtype1>) 
   (<para22> ^param-id <ic> ^type <rtype2>) 
   (<f1> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <ic> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*equal-exists*new-formatted*concept
   (state <s> ^name convert-parsed-format
             -^superstate.world.objects.object.predicates.<name>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> -^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1> ^return-type number)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*equal-exists*new-formatted*negative*concept
   (state <s> ^name convert-parsed-format
              ^object-count <ic>
             -^superstate.world.objects.object.predicates.<name>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq> ^modifier.handle negation)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1} <p11> ^return-type number)
   (<p11> ^type <rtype1> ^param-id <id1>)
-->
   (<c> ^formatted <f1>)
   (<s> ^object-count <ic> -)
   (<s> ^object-count (+ <ic> 1))
   (<s> ^nlp <n>)
   (<n> ^name not-equal ^args <ar> ^parameter <para2x> ^rtype single ^return-type number ^type function ^function soar-not-equal)
   (<ar> ^1 <oc> ^2 <f1>)
   (<para2x> ^1 <para21> ^2 <para22>)
   (<para21> ^param-id <id1> ^type <rtype1>) 
   (<para22> ^param-id <ic> ^type <rtype2>) 
   (<f1> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <ic> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}


#TODOHERE
sp {convert-parsed-format*apply*handle-predicate*between*numbers
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^numeric-predicate <c>)
   (<c> ^relation <r>)# ^arg1 <num>)
   (<r> ^2 <r2> ^3 <r3> ^handle between)
   (<r2> ^number <num1>)
   (<r3> ^number <num2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 3))
   (<s> ^nlp <n>)
   (<n> ^name between ^args <a> ^parameter <para> ^type function ^function numeric-between ^rtype single ^return-type number)
   (<a> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id (+ <oc> 1) ^type single)
   (<para3> ^param-id (+ <oc> 2) ^type single)  
   (<p2> ^name number ^result.set.instance <i> ^args <ax> ^parameter <parap> ^rtype single ^return-type number)
   (<i> ^1 <num1>)
   (<parap> ^1 <parag>)
   (<parag> ^param-id (+ <oc> 1) ^type single)
   (<p3> ^name number ^result.set.instance <i2> ^args <ax2> ^parameter <par2> ^rtype single ^return-type number)
   (<i2> ^1 <num2>)
   (<par2> ^1 <para2g>)
   (<para2g> ^param-id (+ <oc> 2) ^type single)
   
}
#(<n> ^name <name> ^args <a> ^parameter <para> ^type function ^function board-between ^rtype <rtype>)
#   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
#   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
#   (<para1> ^param-id <id> ^type <rtype>)
#   (<para2> ^param-id <id2> ^type <rtype2>)
#   (<para3> ^param-id <id3> ^type <rtype3>)

#number
sp {convert-parsed-format*apply*handle-predicate*number
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^property.handle number ^handle <name> -^2 -^equal-to.formatted)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name number ^result.set.instance <i> ^args <a> ^parameter <para> ^rtype single ^return-type number)
   (<i> ^1 <name>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <oc> ^type single)
   
}

sp {convert-parsed-format*apply*handle-predicate*number*equal
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^property.handle number ^handle <name> -^2 ^equal-to.formatted <oc> -^modifier.handle negation)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name number ^result.set.instance <i> ^args <a> ^parameter <para> ^rtype single ^return-type number)
   (<i> ^1 <name>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id1> ^type single)
   
}

sp {convert-parsed-format*apply*handle-predicate*number*not*equal
   (state <s> ^name convert-parsed-format
   		  	  ^object-count <ic>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^property.handle number ^handle <name> -^2 ^equal-to.formatted <f1> ^modifier.handle negation)
   (<f1> ^parameter.{1}.param-id <id1> ^rtype <rtype1>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <ic> -)
   (<s> ^object-count (+ <ic> 1))
   (<s> ^nlp <n>)
   (<n> ^name not-equal ^args <a> ^parameter <para> ^rtype <rtype1> ^return-type number ^type function ^function soar-not-equal)
   (<a> ^1 <f1> ^2 <f2>)
   (<f2> ^name number ^result.set.instance <i> ^args <ax> ^parameter <paraf> ^rtype single ^return-type number)
   (<i> ^1 <name>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype1>) 
   (<para2> ^param-id <ic> ^type single) 
}

sp {convert-parsed-format*apply*handle-predicate*unary-property*equal
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^property <cp> ^handle <name> -^2 ^equal-to.formatted <oc>)
   (<cp> -^handle property -^handle property1 ^item-type property ^type visual) 
   (<oc> ^parameter.{1}.param-id <id1> ^type attribute-of)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name number ^result.set.instance <i> ^args <a> ^parameter <para> ^rtype single ^return-type number)
   (<i> ^1 <name>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id1> ^type single)
   
}


#for now store predifine number-of to count
sp {convert-parsed-format*apply*handle-predicate*count
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
    (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}
sp {convert-parsed-format*apply*handle-predicate*count*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
    (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}

sp {convert-parsed-format*apply*handle-predicate*sum
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle sum)
   (<c2> -^new-formatted ^formatted <f2>)# ^parameter-index <id2>)
   (<f2> ^rtype <rtype2> ^parameter <par>)
   (<par> ^1 <par1>)
   (<par1> ^param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}
sp {convert-parsed-format*apply*handle-predicate*product
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle product)
   (<c2> -^new-formatted ^formatted <f2>)# ^parameter-index <id2>)
   (<f2> ^rtype <rtype2> ^parameter <par>)
   (<par> ^1 <par1>)
   (<par1> ^param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}
sp {convert-parsed-format*apply*handle-predicate*difference
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle difference)
   (<c2> -^new-formatted ^formatted <f2>)# ^parameter-index <id2>)
   (<f2> ^rtype <rtype2> ^parameter <par>)
   (<par> ^1 <par1>)
   (<par1> ^param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}

sp {convert-parsed-format*apply*handle-predicate*sum*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle sum)
   (<c2> -^new-formatted ^formatted <f2>)# ^parameter-index <id2>)
   (<f2> ^rtype <rtype2> ^parameter <par>)
   (<par> ^1 <par1>)
   (<par1> ^param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}

sp {convert-parsed-format*apply*handle-predicate*product*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle product)
   (<c2> -^new-formatted ^formatted <f2>)# ^parameter-index <id2>)
   (<f2> ^rtype <rtype2> ^parameter <par>)
   (<par> ^1 <par1>)
   (<par1> ^param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}
sp {convert-parsed-format*apply*handle-predicate*difference*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle difference)
   (<c2> -^new-formatted ^formatted <f2>)# ^parameter-index <id2>)
   (<f2> ^rtype <rtype2> ^parameter <par>)
   (<par> ^1 <par1>)
   (<par1> ^param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}

sp {convert-parsed-format*apply*handle-predicate*count*reverse
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle number1 ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}
sp {convert-parsed-format*apply*handle-predicate*count*reverse*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle number1 ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}

sp {convert-parsed-format*apply*handle-predicate*sum*reverse
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle sum ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}
sp {convert-parsed-format*apply*handle-predicate*sum*reverse*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle sum ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}

sp {convert-parsed-format*apply*handle-predicate*product*reverse
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle product ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}
sp {convert-parsed-format*apply*handle-predicate*product*reverse*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle product ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}

sp {convert-parsed-format*apply*handle-predicate*difference*reverse
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle difference ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}
sp {convert-parsed-format*apply*handle-predicate*difference*reverse*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle difference ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)   
}

sp {convert-parsed-format*apply*handle-predicate*count*equal*new-formatted*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle number1 ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}
sp {convert-parsed-format*apply*handle-predicate*sum*equal*new-formatted*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle sum ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-predicate*product*equal*new-formatted*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle product ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-predicate*difference*equal*new-formatted*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle difference ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

#greater=more-than
sp {convert-parsed-format*apply*handle-predicate*more-than
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle more-than1 ^1 <p1> ^2 <p2> -^number-mod)
   (<p1> ^formatted <f1>)
   (<p2> ^formatted <f2>)
   (<f1> ^rtype <rtype1> ^parameter.{1}.param-id <id1>)
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name greater ^args <a> ^parameter <para> ^rtype single ^return-type number ^type function ^function soar-greater)
   (<a> ^1 <f1> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype1>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*x-more-than
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle more-than1 ^1 <p1> ^2 <p2> ^number-mod.handle <num>)
   (<p1> ^formatted <f1>)
   (<p2> ^formatted <f2>)
   (<f1> ^rtype <rtype1> ^parameter.{1}.param-id <id1>)
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <num> ^args <a> ^parameter <para> ^rtype single ^return-type number ^type function ^function soar-x-greater)
   (<a> ^1 <f1> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype1>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*less-than
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle less-than1 ^1 <p1> ^2 <p2> -^number-mod)
   (<p1> ^formatted <f1>)
   (<p2> ^formatted <f2>)
   (<f1> ^rtype <rtype1> ^parameter.{1}.param-id <id1>)
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name less ^args <a> ^parameter <para> ^rtype single ^return-type number ^type function ^function soar-less)
   (<a> ^1 <f1> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype1>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*x-less-than
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle less-than1 ^1 <p1> ^2 <p2> ^number-mod.handle <num>)
   (<p1> ^formatted <f1>)
   (<p2> ^formatted <f2>)
   (<f1> ^rtype <rtype1> ^parameter.{1}.param-id <id1>)
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
-->
#(interrupt)
#(write (cmd print <c> -d 5))
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <num> ^args <a> ^parameter <para> ^rtype single ^return-type number ^type function ^function soar-x-less)
   (<a> ^1 <f1> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type <rtype1>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#more-than constant number
sp {convert-parsed-format*apply*handle-predicate*more-than*constant
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle more-than1 ^1 <p1> ^2 <p2> -^number-mod)
   (<p1> ^formatted <f1>)
   (<p2> -^formatted ^number <num>)
   (<f1> ^rtype <rtype1> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name greater ^args <a> ^parameter <para> ^rtype single ^return-type number ^type function ^function soar-greater)
   (<a> ^1 <f1> ^2 <f2>)
   (<f2> ^name number ^result.set.instance <i> ^args <a> ^parameter <paraf> ^rtype single ^return-type number)
   (<i> ^1 <num>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id1> ^type <rtype1>) 
}

sp {convert-parsed-format*apply*handle-predicate*less-than*constant
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle less-than1 ^1 <p1> ^2 <p2> -^number-mod)
   (<p1> ^formatted <f1>)
   (<p2> -^formatted ^number <num>)
   (<f1> ^rtype <rtype1> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name less ^args <a> ^parameter <para> ^rtype single ^return-type number ^type function ^function soar-less)
   (<a> ^1 <f1> ^2 <f2>)
   (<f2> ^name number ^result.set.instance <i> ^args <ax> ^parameter <paraf> ^rtype single ^return-type number)
   (<i> ^1 <num>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id1> ^type <rtype1>) 
}

sp {convert-parsed-format*apply*handle-predicate*count*equal*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-predicate*sum*equal*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle sum)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}
sp {convert-parsed-format*apply*handle-predicate*product*equal*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle product)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}
sp {convert-parsed-format*apply*handle-predicate*difference*equal*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle difference)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-predicate*count*new-formatted
   (state <s> ^name convert-parsed-format
             -^output-object-1 <c>
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*count*new-formatted*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*sum*new-formatted
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle sum)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-predicate*sum*new-formatted*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle sum)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}
sp {convert-parsed-format*apply*handle-predicate*product*new-formatted
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle product)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}
sp {convert-parsed-format*apply*handle-predicate*product*new-formatted*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle product)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-predicate*difference*new-formatted
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle difference)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}
sp {convert-parsed-format*apply*handle-predicate*difference*new-formatted*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle difference)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-predicate*count*new-formatted*reversed
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle number1 ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*count*new-formatted*reversed*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle number1 ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*sum*new-formatted*reversed
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle sum ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*sum*new-formatted*reversed*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle sum ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*product*new-formatted*reversed
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle product ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*product*new-formatted*reversed*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle product ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*difference*new-formatted*reversed
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle difference ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*difference*new-formatted*reversed*output
   (state <s> ^name convert-parsed-format
              ^output-object-1 <c>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle difference ^relation <p2> -^equal-to.formatted ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id 1 ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*count*equal
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*sum*equal
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle sum)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*product*equal
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle product)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*difference*equal
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle difference)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*count*equal*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle number1 ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*sum*equal*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle sum ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name sum ^args <a> ^parameter <para> ^type function ^function soar-sum ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-predicate*product*equal*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle product ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name product ^args <a> ^parameter <para> ^type function ^function soar-product ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*difference*equal*reverse
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle difference ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-predicate*difference*equal*reverse*no-param
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle difference ^relation <p2> ^equal-to.formatted <oc> ^property)
   (<p2> ^2 <c2> ^handle of1)
   (<c2> -^new-formatted ^formatted <f2> -^parameter-index)
   (<f2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
   (<oc> ^parameter.{1}.param-id <id1>)
-->
   (<c> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name difference ^args <a> ^parameter <para> ^type function ^function soar-difference ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id1> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*propose*handle-clause*parameter
   (state <s> ^name convert-parsed-format
              -^learn-link.handle <name>
               -^learning-predicate.spelling <name>
              ^parameter <p>)
   (<p> ^relation <r>)
   (<r> -^formatted ^handle <name> -^handle of1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-clause
        ^parameter <p>)
}

sp {convert-parsed-format*propose*handle-clause
   (state <s> ^name convert-parsed-format
             -^learn-link.handle <name>
              -^learning-predicate.spelling <name> #todo check spelling DEPRICATED?
              ^clause <c>)
   (<c> ^arg1 ^predicate <p> -^formatted)
   (<p> ^2 <p2> ^handle <name> -^handle of1)
 -{(<s> ^learn-link <ll>) #in set
   (<ll> ^handle <name2>)
   (<s> ^learning-predicate <lp>)
   (<lp> ^spelling <name3> ^name <name2>)
    (<p> ^handle in1)
    (<p2> ^predicates <ppp>)
    (<ppp> ^property <name3>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-clause
        ^clause <c>)
}

sp {convert-parsed-format*propose*handle-clause*set*relation
   (state <s> ^name convert-parsed-format
             -^learn-link.handle <name>
              -^learning-predicate.spelling <name> #todo check spelling DEPRICATED?
              ^clause <c>)
   (<c> ^arg1 ^predicate <p> -^formatted)
   (<p> -^2 ^handle <name> ^item-type relation -^handle of1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-clause
        ^clause <c>)
}

sp {convert-parsed-format*propose*handle-clause*attribute-of
   (state <s> ^name convert-parsed-format
             -^learn-link.handle <name>
              -^learning-predicate.spelling <name>
              ^clause <c>)
   (<c> ^arg1 ^predicate <p> -^formatted)
   (<p> ^{2}.handle <name> ^handle of1)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-clause
        ^clause <c>)
}

sp {convert-parsed-format*apply*handle-clause*interrupt
   (state <s> ^name convert-parsed-formatQQ
   		  	 # ^operator <o2> +
              ^operator <o>)
	(<o> ^name handle-clause -^parameter.relation.handle in1)
#(<o2> ^name handle-clause)
-->
#(write (cmd matches convert-parsed-format*apply*handle-clause*parameter*concept))
#(write (cmd matches convert-parsed-format*apply*handle-clause*parameter*concept*no*rtype*indef))
#(write (cmd matches convert-parsed-format*apply*handle-clause*parameter*concept*no*rtype))
#(write (cmd matches convert-parsed-format*apply*handle-clause*parameter*concept))
#(write (cmd print <o> -d 6))
#(write (cmd pref <s>))
#(interrupt)
}



#TODO bias towards category first
#TODO handle direct not as unary predicate?
sp {convert-parsed-format*propose*handle-property-predicate
   (state <s> ^name convert-parsed-format
             -^learn-link.handle <name>
              -^learning-predicate.spelling <name>
              ^clause <c>)
   (<c> ^arg1 <p> ^predicate <pred>)# -^formatted)
   (<pred> -^formatted)
   (<p> ^formatted ^predicates.category <type> ^predicates <ps>) #^item-type <type> object?
   (<pred> ^handle <name> ^item-type predicate ^property.handle <prop>)# <> category
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-property-predicate
        ^param <p>
        ^property <prop>
        ^pred-name <name>
        ^pred-clause <c>)
}


#sp {convert-parsed-format*apply*handle-property-predicate*concept-property*no*parameter-index*interrupt
#   (state <s> ^name convert-parsed-format
#              ^operator <o>)
#   (<o> ^name handle-predicate)
#-->
#(write (cmd print <o> -d 7))
#(write (cmd pref <s>))
#(write (cmd ))
#}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*no*parameter-index
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> -^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> -^new-formatted ^formatted <p1> -^parameter-index)
   (<p1> ^rtype <rtype> ^parameter.{1}.param-id <id>)
  -{(<p1> ^rtype set ^attribute input-arg)}
-->
   (<pred> ^formatted true) #<c>
   (<p> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*no*parameter-index*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> -^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> ^new-formatted <p1> -^parameter-index)
   (<p1> ^rtype <rtype> ^parameter.{1}.param-id <id>)
  -{(<p1> ^rtype set ^attribute input-arg)}
-->
   (<pred> ^formatted true) #<c>
   (<p> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*notnew
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> -^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> -^new-formatted ^formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
  -{(<p1> ^rtype set ^attribute input-arg)}
-->
   (<pred> ^formatted true) #<c>
   (<p> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*notnew*input-arg
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> -^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> -^new-formatted ^formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype> ^parameter <para> ^rtype set ^attribute input-arg)
-->
   (<p1> ^rtype <rtype> -) 
   (<p1> ^parameter <para> -)
   (<p1> ^rtype single)
   (<pred> ^formatted true) #<c>
   (<p> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*notnew*negated
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> ^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> -^new-formatted ^formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   (<pred> ^formatted true) #<c>
   (<p> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype> ^negative true)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}


#JK hardcode fix color size shape
sp {convert-parsed-format*apply*handle-property-predicate*concept-property*primitive*notnew
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property <prop> ^pred-clause <c> -^property property) #{<prop> << color size shape >>}
   (<c> -^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> -^new-formatted ^formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   #(<c> ^formatted true)
    (<pred> ^formatted true)
   (<p> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute ^attribute <prop> ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*primitive*notnew*negated
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property <prop> ^pred-clause <c> -^property property) #{<prop> << color size shape >>}
   (<c> ^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> -^new-formatted ^formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   #(<c> ^formatted true)
    (<pred> ^formatted true)
   (<p> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute ^attribute <prop> ^rtype <rtype> ^negative true)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>) 
}

#TODO consider new-new-formatted (better layering)
sp {convert-parsed-format*apply*handle-property-predicate*concept-property*primitive
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property <prop> ^pred-clause <c> -^property property) #{<prop> << color size shape >>}
   (<c> -^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> ^new-formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   (<pred> ^formatted true)
   #(<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute ^attribute <prop> ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)   
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*primitive*negated
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property <prop> ^pred-clause <c> -^property property) #{<prop> << color size shape >>}
   (<c> ^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> ^new-formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   (<pred> ^formatted true)
   #(<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute ^attribute <prop> ^rtype <rtype> ^negative true)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> -^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> ^new-formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   #(<c> ^formatted true)
   (<pred> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*negated
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> ^modifier.handle negation ^predicate <pred>)
   (<pred> ^handle <name>)
   (<p> ^new-formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   #(<c> ^formatted true)
   (<pred> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype> ^negative true)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

#TODO for now assume all none world state predicates are concepts
sp {convert-parsed-format*apply*handle-clause
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> ^parameter-index <id2> -^rtype)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

#TODO close to fixing
sp {convert-parsed-format*apply*handle-clause*rtype
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> ^rtype <rtype>)
   (<c2> ^formatted <p2> ^parameter-index <id2> -^rtype)
   #(<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-clause*relation*setnoargs
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> -^2 ^item-type relation)
   (<c1> ^formatted <p> ^parameter-index <id> -^new-formatted)
   (<p> ^rtype set)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype set)
   (<a> ^1 <p>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type set) 
}


sp {convert-parsed-format*apply*handle-clause*arg3
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)  
}

sp {convert-parsed-format*apply*handle-clause*concepts
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>  #hacky test
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}

sp {convert-parsed-format*apply*handle-clause*concepts*no*param-index
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>  #hacky test
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> -^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index <id2>)
   (<p> ^parameter.{1}.param-id <id> ^rtype <rtype>)
   (<p2> ^parameter.{1}.param-id <i2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-clause*concepts*no*param-index*in*set
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle in1  #hacky test
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle in1 ^2 <c2> -^3)
   (<c1> ^formatted <p> -^parameter-index <id> -^new-formatted)
   (<c2> -^formatted ^predicates.property <name>)
   (<p> ^parameter.{1}.param-id <id> ^rtype <rtype>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-clause*concepts*in*set
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle in1  #hacky test
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle in1 ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> -^new-formatted)
   (<c2> -^formatted ^predicates.property <name>)
   (<p> ^rtype <rtype>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}


#need list of functions
sp {convert-parsed-format*apply*handle-clause*concept*arg3*between
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3> ^handle between)
   (<c1> ^formatted <p> ^parameter-index <id> -^new-formatted)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type function ^function board-between ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
}

sp {convert-parsed-format*apply*handle-clause*concept*arg3*between*new-format
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3> ^handle between)
   (<c1> ^new-formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type function ^function board-between ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
}

sp {convert-parsed-format*apply*handle-clause*concept*arg3
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3> -^handle between)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   
}

sp {convert-parsed-format*apply*handle-clause*indef
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-clause*indef*arg3
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<c3> ^formatted <p3> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-clause*indef2*arg3
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}

##does this even work??
##no not yet
#sp {convert-parsed-format*apply*handle-clause*indef3*arg3
#   (state <s> ^name convert-parsed-format
#              ^superstate.world.predicates.predicate.handle <name>
#              ^operator <o>)
#   (<o> ^name handle-clause ^clause <c>)
#   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
#   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
#   (<c1> ^formatted <p> ^parameter-index <id>)
#   (<c2> ^formatted <p2> -^parameter-index)
#   (<c3> ^formatted <p3> ^parameter-index <id3>)
#   (<p> ^rtype <rtype>)
#   (<p2> ^rtype <rtype2>)
#   (<p3> ^rtype <rtype3>)
#-->
#   (<c> ^formatted true)
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
#   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
#   (<para> ^1 <para1> ^3 <para3>) #NOT YET
#   (<para1> ^param-id <id> ^type <rtype>)
#   (<para3> ^param-id <id3> ^type <rtype3>) 
#}


sp {convert-parsed-format*apply*handle-clause*indef*concept*negative
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> ^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype> ^negative true)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-clause*indef*concept
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-clause*indef*concept*arg3
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<c3> ^formatted <p3> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-clause*indef2*concept*arg3
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}

sp {convert-parsed-format*apply*handle-clause*negative
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> ^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^negative true ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)  
}

sp {convert-parsed-format*apply*handle-clause*negative*arg3
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> ^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c2> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^negative true ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)   
}

sp {convert-parsed-format*apply*handle-clause*negative*indef
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> ^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^negative true ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-clause*parameter*nortype
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3 -^predicates.handle negation)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*nortype*no-param
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3 -^predicates.handle negation)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*no-param
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3 -^predicates.handle negation)
   (<c1> ^formatted <p> ^parameter-index <id> ^rtype <rtype>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}


sp {convert-parsed-format*apply*handle-clause*parameter*nortype*negative
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3 ^predicates.handle negation)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^negative true ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*nortype*negative*indef
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3 ^predicates.handle negation)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^negative true ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}
sp {convert-parsed-format*apply*handle-clause*parameter*nortype*indef
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3 -^predicates.handle negation -^modifier.handle negation)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2> -^parameter.<something>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*indef
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> ^rtype <rtype>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p2> ^rtype <rtype2> -^parameter.<something>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-clause*parameter
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> ^rtype <rtype>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p2> ^rtype <rtype2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*arg3
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
(<c1> ^new-formatted <n>)
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
}

#todo need to lookup type,function
sp {convert-parsed-format*apply*handle-clause*parameter*concept
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> ^rtype <rtype>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
  # (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*concept*no*rtype*indef
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^indef <c2> 
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*concept*no*rtype*2noparam
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2> ^parameter.{1}.param-id <id2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*concept*no*rtype
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#in1
#-^superstate.world.predicates.predicate.handle in1
sp {convert-parsed-format*apply*handle-clause*parameter*indef*concept
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle in1
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> -^handle in1 ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> ^rtype <rtype>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p2> ^rtype <rtype2>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

sp {convert-parsed-format*apply*handle-clause*parameter*indef*concept*in*set
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle in1
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle in1 ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id> ^rtype <rtype> -^new-formatted)
   (<c2> -^formatted ^predicates.property <name>)
-->
   (<c1> ^new-formatted <n>)
   (<r> ^formatted true)
   (<c2> ^formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
}

#todo fix generality


#hmmm here
sp {convert-parsed-format*apply*handle-clause*parameter*concept*arg3
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id> -^rtype)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type function ^function board-between ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
}
sp {convert-parsed-format*apply*handle-clause*parameter*concept*arg3*rtype
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relation <r>)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id> ^rtype <rtype>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
  # (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type function ^function board-between ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
}

#todo
#indifferent handling
#better ordering of param ids
#more concat
#handle negation
#ok if not optimal... with fewer args
#3 argument predicates

#elaborate subclauses
#first version dont order predicates
#first go through and add parameter tags?
#create temp ref to last mentioned nlp that mentions that?
#first bare bones
#then add type, attribute function information lookup smem?


sp {convert-parsed-format*propose*complete
   (state <s> ^name convert-parsed-format)
-->
   (<s> ^operator <op> + <)
   (<op> ^name complete)
}

sp {convert-parsed-format*apply*complete-flag
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^nlp <nlp>
              ^operator.name complete)
-->
    (<s> ^complete-flag true)
}

sp {convert-parsed-format*apply*complete*printsome
   (state <s> ^name convert-parsed-formatq
              ^nlp-set <nps>
              #^nlp <nlp>
              ^operator.name complete)
(<nps> ^nlp <nlp>)
(<nlp> ^name sum)
-->
#(write (cmd pref <nlp> -w))
#(write (cmd print <nps> -d 10))
#(interrupt)
}

sp {convert-parsed-format*apply*complete
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^nlp <nlp>
              ^operator.name complete)
-->
   (<nps> ^nlp <nlp>)
}

sp {convert-parsed-format*apply*complete*only-objects
   (state <s> ^name convert-parsed-format
              ^operator.name complete
             -^indef <pp>
             -^input-object-1 <pp>
             -^input-object-2 <pp>
              ^parameter <pp>)
   (<pp> ^formatted <p> ^parameter-index <id>)
   (<p> ^parameter <para>)
   -{(<s> ^nlp <nlp>)
     (<nlp> ^args.<num> <p> ^parameter.<num>.param-id <id>)}
-->
   (<s> ^nlp <p>)
   (<para> ^1 <p2>)
   (<p2> ^param-id <id>)
}

sp {convert-parsed-format*apply*complete*only-input-objects
   (state <s> ^name convert-parsed-format
              ^operator.name complete
             -^indef <pp>
              ^<< input-object-1 input-object-2 >> <pp>)
   (<pp> ^formatted <p> ^parameter-index <id>)
   (<p> ^attribute input-arg)
   -{(<s> ^nlp <nlp>)
     (<nlp> ^args.<num> <p> ^parameter.<num>.param-id <id>)}
-->
   (<s> ^nlp <p>)
}

sp {convert-parsed-format*apply*complete*superstate*copy
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
             -^prefer
             -^avoid
             -^consider
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
   (<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name>)
   (<nps> ^aname <name>)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
              ^prefer <pref>
             -^modifier <m>
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
    (<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name> ^prefer <pref>)
   (<nps> ^aname <name>)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*avoid
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
              ^avoid <pref>
             -^modifier <m>
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
    (<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name> ^avoid <pref>)
   (<nps> ^aname <name>)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*avoid*modifier*moved
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
              ^avoid <pref>
              ^moved <mov>
              ^modifier <m>
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
    (<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name> ^avoid <pref> ^modifier <m> ^moved <mov>)
   (<nps> ^aname <name>)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*modifier*moved
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
              ^prefer <pref>
              ^moved <mov>
              ^modifier <m>
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
(<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name> ^prefer <pref> ^modifier <m> ^moved <mov>)
   (<nps> ^aname <name>)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*modifier
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
              ^prefer <pref>
             -^moved
              ^modifier <m>
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
    (<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name> ^prefer <pref> ^modifier <m>)
   (<nps> ^aname <name>)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*avoid*modifier
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
              ^avoid <pref>
             -^moved
              ^modifier <m>
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
    (<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name> ^avoid <pref> ^modifier <m>)
   (<nps> ^aname <name>)
}

sp {convert-parsed-format*apply*complete*superstate*copy*considererence
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
              ^consider <pref>
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
    (<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name> ^consider <pref>)
   (<nps> ^aname <name>)
}