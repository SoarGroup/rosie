#TODO RECODE
# similar of code here to has-attribute and attribute-of indicates same for generalization
# even name indicates all options, need to make list of all possible options when redesigning
sp {same-attribute*elaborate*results*instance*positive*single*2param
   (state <s> ^name same-attribute
              ^superstate.condition.rtype single
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter.num 2 ^negative false ^type <name>)
   (<args> ^1 <a1> ^2 <a2>)
   (<a1> -^rtype set ^result.set <s3>)
   (<s3> ^instance <i5>)
   (<i5> ^1 <obja>)
   (<a2> -^rtype set ^result.set <s35>)
   (<s35> ^instance <i55>)
   (<i55> ^1 <objb>)
   (<obja> ^predicates <pred>)
   (<objb> ^predicates <pred2>)
   (<pred> ^<name> <x>)
   (<pred2> ^<name> <x>)
 -{(<s3> ^instance {<i8> < <i5>})
   (<i8> ^1 <obja>)} #bias only create one per object
 -{(<s35> ^instance {<i9> < <i55>})
   (<i9> ^1 <objb>)} #bias only create one per object
-->
   (<s> ^instance <instance>)
   (<instance> ^1 <obja> ^2 <objb>)
}

sp {same-attribute*elaborate*results*instance*positive*single*1param
   (state <s> ^name same-attribute
              ^superstate.condition.rtype single
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter.num < 2 ^negative false ^type <name>)
   (<args> ^1 <a1> ^2 <a2>)
   (<a1> -^rtype set ^result.set <s3>)
   (<s3> ^instance <i5>)
   (<i5> ^1 <obja>)
   (<a2> -^rtype set ^result.set <s35>)
   (<s35> ^instance <i55>)
   (<i55> ^1 <objb>)
   (<obja> ^predicates <pred>)
   (<objb> ^predicates <pred2>)
   (<pred> ^<name> <x>)
   (<pred2> ^<name> <x>)
 -{(<s3> ^instance {<i8> < <i5>})
   (<i8> ^1 <obja>)} #bias only create one per object
 -{(<s35> ^instance {<i9> < <i55>})
   (<i9> ^1 <objb>)} #bias only create one per object
-->
   (<s> ^instance <instance>)
   (<instance> ^1 <obja>)
}

sp {same-attribute*elaborate*results*instance*positive*set*set
   (state <s> ^name same-attribute
              ^linkstate <ls>
              ^superstate.condition.rtype set
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter.num 1 ^negative false ^type <name>)
   (<args> ^1 <a1> ^num 1)
   (<a1> ^rtype set ^result.set <s3>)
   (<s3> ^instance <i5>)
   (<i5> ^1 <obja>)
  -{(<obja> ^<o1> <obja1> ^<o2> {<obja2> > <obja1>})
  	(<obja1> ^predicates <pred>)
   (<obja2> ^predicates <pred2>)
   (<pred> ^<name> <x>)
   (<pred2> -^<name> <x>)}
 -{(<obja> ^<o3> <obja3>)
   (<obja3> ^predicates <pred3>)
   (<pred3> -^<name>)}
 -{(<s3> ^instance {<i8> < <i5>})
   (<i8> ^1 <obja>)} #bias only create one per object
-->
   (<s> ^instance <instance>)
   (<instance> ^1 <obja>)
}

sp {same-attribute*elaborate*results*instance*negative
   (state <s> ^name same-attribute
              ^superstate.condition.rtype single
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter <p> ^negative true ^type <name>)
   (<args> ^1 <a1>)
   (<a1> -^rtype set ^result.set <s3>)
   (<s3> ^instance <i5>)
   (<i5> ^1 <obja>)
   (<obja> ^predicates <pred>)
   (<pred> -^<name>)
 -{(<s3> ^instance {<i8> < <i5>})
   (<i8> ^1 <obja>)} #bias only create one per object
-->
   (<s> ^instance <instance>)
   (<instance> ^1 <obja>)
}

#TODO CHUNK BUG
#### prestore chunks , inccorect learned
sp {chunkx4*same-attribute*elaborate*results*instance*sets*object*OpNoChange*t2714-2
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r3> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i5>)
    (<i5> ^1 <i6>)
    (<i6> ^predicates <p2>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i7>)
    (<i7> ^2 <i8> ^1 <i11>)
    (<p2> ^<n2> <i8>)
-->
    (<i11> ^object <i6> +)
}

sp {chunkx4*same-attribute*apply*complete*instance*OpNoChange*t2714-1
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r1> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
   -{ (<i1> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i4>)
      (<i4> ^1 { <i5> > <i3> })
      (<i5> ^predicates <p3>)
      (<p3> ^<n2> <n3>)}
 -{(<s3> ^instance {<i8> < <i2>})
   (<i8> ^1 <i3>)} #bias only create one per object
-->
    (<s2> ^instance <i6> +)
    (<i6> ^2 <n3> + ^1 <i7> +)
}

#comment out above
#broken create perfrect versions
#similar to chunks from 

#TODO weird affect of create a same set of size one, where only one object has that attribute, might be ok
#could ad test to illiminate creating a set where there is not another result
#first one
sp {same-attribute*elaborate*results*sets
   (state <s> ^name same-attribute
              ^superstate.condition.rtype set
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter <pn> ^type <name>)
   (<args> ^num 1
           ^1 <a1>)
   (<a1> -^rtype set ^result.set <s3>)
   (<s3> ^instance <ins1>)
   (<ins1> ^1 <obj>)
   (<obj> ^predicates <pred>)
   (<pred> ^<name> <x>)
-{(<a1> ^result <rr>)
  (<rr> ^set <rrset>)
  (<rrset> ^instance <ins2>)
  (<ins2> ^1 {<obj2> > <obj>}) #to prevent duplicates
  (<obj2> ^predicates <pr>)
  (<pr> ^<name> <x>)}
 -{(<s3> ^instance {<i8> < <ins1>})
   (<i8> ^1 <obj>)} #bias only create one per object
-->
   (<s> ^instance <instance>)
   (<instance> ^1 <set2> ^2 <x>)
   #(<set2> ^object <obj>)
}

#TODO the fact that results with have 2 of attribute suggest should do it like with-attribute where gets set to argument implictly?
sp {same-attribute*elaborate*results*instance*sets*object
   (state <s> ^name same-attribute
   		  	  ^operator <op>
			  ^superstate.condition.result.set.instance <aa1> #need?
              ^superstate.condition.rtype set
              ^superstate.operator <o>)
   (<op> ^name complete ^instance <aa1>) #JAMES UNCHUNKED VERSION
   (<o> ^args <args> ^parameter <pn> ^type <name>)
   (<args> ^num 1
           ^1 <a1>)
   (<a1> -^rtype set ^result <rr>)
   (<rr> ^set <rrset>)
   (<rrset> ^instance <ins1>)
   (<ins1> ^1 <obj>)
   (<obj> ^predicates <pred>)
   (<pred> ^<name> <x>)
   (<aa1> ^1 <set2> ^2 <x>)
-->
	(<set2> ^object <obj>)
}


sp {same-attribute*propose*complete
   (state <s> ^name same-attribute
              ^instance <e>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete
        ^instance <e>)
}
sp {same-attribute*apply*complete*instance
   (state <s> ^name same-attribute
              ^operator <op>
              ^instance <o> #TODO JAMES CHECK IF NECESSARY sometimes defined sometimes not
              ^superstate.condition.result.set <res>)
   (<op> ^name complete ^instance <o>) #JAMES UNCHUNKED VERSION
-->
   (<res> ^instance <o>)
}
