################### elaborate-world ############################
# Rules that elaborate extra information onto the top-state world

######## ROBOT ########

sp {top-state*world*elaborate*robot*arm*holding-object*true
   (state <s> ^superstate nil
              ^world <w>)
   (<w> ^robot.arm <arm>
        ^objects.object.predicates.is-grabbed1 grabbed1)
-->
   (<arm> ^holding-object true)
}

sp {top-state*world*elaborate*robot*arm*holding-object*false
   (state <s> ^superstate nil
              ^world <w>)
   (<w> ^robot.arm <arm>
       -^objects.object.predicates.is-grabbed1 grabbed1)
-->
   (<arm> ^holding-object false)
}

######## OBJECTS ########

# svs-obj: the belief object in svs for this world object
sp {top-state*world*elaborate*object*svs-obj
   (state <s> ^top-state <s>
              ^world.objects <objs>
              ^perception-monitor.object-monitor.object-info <obj-info>)
   (<obj-info> ^world-obj <world-obj>
               ^belief-obj <bel-obj>)
-->
   (<world-obj> ^svs-obj <bel-obj>)
}

# perception-id: the id that perception has for this object
sp {top-state*world*elaborate*object*perception-id
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <info>)
   (<info> ^world-obj <world-obj>
           ^perception-id <id>)
-->
   (<world-obj> ^perception-id <id>)
}

###### OBJECT PREDICATES ######


# Elaborate the pointed to object
sp {top-state*world*object*predicates*elaborate*indicated*pointed
   (state <s> ^superstate nil
              ^perception-monitor.input-link.pointed-object <h>
              ^world.objects.object <obj>)
   (<obj> ^handle <h>
          ^predicates <preds>)
-->
   (<preds> ^indicated pointed)
}

# Elaborate modifier1 current1 on the current location
sp {top-state*world*elaborate*current-location*modifier1*current1
   (state <s> ^superstate nil
              ^world <w>)
   (<w> ^robot.current-location.predicates <preds>)
-->
   (<preds> ^modifier1 current1)
}

# If the room has no people, elaborate empty
sp {top-state*world*elaborate*current-location*contents1*empty1
   (state <s> ^superstate nil
              ^world <w>)
   (<w> ^robot.current-location <loc>
        ^predicates.predicate <in>)
   (<loc> ^predicates <preds>)

   (<in> ^handle in1)
  -{(<in> ^instance <i>)
    (<i> ^{1}.predicates.category person
         ^{2} <loc>)}
-->
   (<preds> ^contents1 empty1)
}

### If simulate-perception is false:

# elaborate other status predicates visible and reachable
#   Only if not a hypothetical object - PL 9/3/2020
sp {top-state*world*object*predicates*elaborate*is-visible*internal
   (state <s> ^superstate nil
              ^agent-params.domain internal
             -^agent-params.simulate-perception true
              ^world.objects.object.predicates <preds>)
   #    Skip hypothetical objects
  -(<preds> ^dialog-object true)
-->
   (<preds> ^is-confirmed confirmed1
            ^is-visible1 visible1
            ^is-reachable1 reachable1)
}

# for blocks: elaborate arm status predicates grabbable and not-grabbed
#   Only if not a hypothetical object - PL 9/3/2020
sp {top-state*world*object*predicates*elaborate*not-grabbed1*internal
   (state <s> ^superstate nil
              ^agent-params.domain internal
             -^agent-params.simulate-perception true
              ^world.objects.object.predicates <preds>)
   (<preds> ^category block)
   #    Skip hypothetical objects
  -(<preds> ^dialog-object true)
-->
   (<preds> ^affordance1 grabbable1
            ^is-grabbed1 not-grabbed1)
}

######### PREDICATES (relations) ########

# Elaborate predicate root identifier and handle
sp {top-state*world*predicates*elaborate*predicate
   (state <s> ^superstate nil
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor.predicate-info <pred-info>)
   (<pred-info> ^predicate-handle <pred-handle>)
-->
   (<preds> ^predicate <pred>)
   (<pred> ^handle <pred-handle>)
}

# Elaborate predicate instances from the predicate-monitor
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor
   (state <s> ^superstate nil
              ^perception-monitor.predicate-monitor.predicate-info <pred-info>
              ^world.predicates.predicate <pred>)
   (<pred-info> ^predicate-handle <pred-handle>
                ^object-test <test>)
   (<test> ^object <obj1>
           ^match <obj2>)
   (<pred> ^handle <pred-handle>)
-->
   (<pred> ^instance <args>)
   (<args> ^1 <obj1> ^2 <obj2>)
}

### Elaborate in(object, current-location)

# Any physical objects that are not grabbable are in the current location
sp {top-state*world*predicates*elaborate*object*in*current-location
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^world <w>)
   (<w> ^objects.object <obj>
        ^robot.current-location { <loc> <> none }
        ^predicates.predicate <in-pred>)
   (<in-pred> ^handle in1)
   (<obj> ^predicates <preds>)
   (<preds> -^affordance1 grabbable1)
   (<obj-info> ^world-obj <obj>
               ^belief-obj <bel-obj>)
-->
   (<in-pred> ^instance <i>)
   (<i> ^1 <obj> ^2 <loc>)
}

# for internal world, the object just has to be on the input-link
sp {top-state*world*predicates*elaborate*object*in*current-location*internal
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^world <w>)
   (<w> ^objects.object <obj>
        ^robot.current-location { <loc> <> none }
        ^predicates.predicate <in-pred>)
   (<in-pred> ^handle in1)
   (<obj> ^predicates <preds>)
   (<preds> -^affordance1 grabbable1)
   (<obj-info> ^world-obj <obj>
               ^input-link-obj <il-obj>)
-->
   (<in-pred> ^instance <i>)
   (<i> ^1 <obj> ^2 <loc>)
}

# Any physical objects that are not grabbed are in the current location
sp {top-state*world*predicates*elaborate*object*in*current-location*not-grabbed
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^world <w>)
   (<w> ^objects.object <obj>
        ^robot.current-location { <loc> <> none }
        ^predicates.predicate <in-pred>)
   (<in-pred> ^handle in1)
   (<obj> ^predicates.is-grabbed1 not-grabbed1)
   (<obj-info> ^world-obj <obj>
               ^belief-obj <bel-obj>)
-->
   (<in-pred> ^instance <i>)
   (<i> ^1 <obj> ^2 <loc>)
}

# For the internal domain, add in predicate for objects on the input-link
sp {top-state*world*predicates*elaborate*object*in*current-location*not-grabbed*internal
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^world <w>)
   (<w> ^objects.object <obj>
        ^robot.current-location { <loc> <> none }
        ^predicates.predicate <in-pred>)
   (<in-pred> ^handle in1)
   (<obj> ^predicates.is-grabbed1 not-grabbed1)
   (<obj-info> ^world-obj <obj>
               ^input-link-obj <il-obj>)
-->
   (<in-pred> ^instance <i>)
   (<i> ^1 <obj> ^2 <loc>)
}


### Receptacle

# If the input-link says a receptacle contains another object, add an in relation
sp {top-state*world*predicates*elaborate*in*from*contains*info*in1*receptacle1
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^world <w>)
   (<obj-info> ^input-link-obj.contains <obj1-h>
               ^world-obj <obj2>)
   (<obj2> ^predicates.affordance1 receptacle1)
   (<w> ^objects.object <obj1>
        ^predicates.predicate <in-pred>)
   (<obj1> ^handle <obj1-h>)
   (<in-pred> ^handle in1)
-->
   (<in-pred> ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
}

# If the input-link says a surface contains another object, add an on relation
sp {top-state*world*predicates*elaborate*in*from*contains*info*on1*surface1
   (state <s> ^superstate nil
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^world <w>)
   (<obj-info> ^input-link-obj.contains <obj1-h>
               ^world-obj <obj2>)
   (<obj2> ^predicates.affordance1 surface1)
   (<w> ^objects.object <obj1>
        ^predicates.predicate <on-pred>)
   (<obj1> ^handle <obj1-h>)
   (<on-pred> ^handle on1)
-->
   (<on-pred> ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
}

