### Rules for simulating environment dynamics in the internal domain

# For appliances with a timer (e.g. microwave)
#   If the clock is after the turn-off-time, 
#     set the activation to off

sp {top-state*apply*any-op*simulate-dynamics*turn-off*activation
   (state <s> ^superstate nil
              ^operator <o>
              ^agent-params.domain internal
              ^perception-monitor.object-monitor.object-info <obj-info>
              ^io.input-link.time.clock.elapsed-seconds <secs>)
   (<obj-info> ^input-link-obj.property <prop>)
   (<prop> ^property-handle is-activated1
           ^turn-off-time <= <secs>
           ^values <vals>)
   (<vals> ^activated1 1.00)
-->
   (<prop> ^turn-off-time <secs> -)
   (<vals> ^activated1 1.00 -
           ^not-activated1 1.00)
}


# If a switch is tied to a light, then set the light's activation to mirror the switch's
sp {top-state*apply*any-op*simulate-dynamics*set*light*activation*from*switch
   (state <s> ^superstate nil
              ^operator <o>
              ^agent-params.domain internal
              ^perception-monitor.input-link.objects <il-objs>)
   (<il-objs> ^object <switch>
              ^object <light>)
   (<switch> ^property <switch-prop>
             ^source-obj.activates <light-src>)
   (<light> ^property <light-prop>
             ^source-obj <light-src>)
   (<switch-prop> ^property-handle is-activated1 
                  ^predicate-handle <act>)
   (<light-prop> ^property-handle is-activated1
                 ^predicate-handle { <light-act> <> <act> })
-->
   (<light-prop> ^predicate-handle <light-act> -
                 ^predicate-handle <act>)
}

# If a button targets a certain object then add an 'in' relation
sp {top-state*elaborate*world*button*target*in*relation
   (state <s> ^superstate nil
              ^internal-world.objects <objs>
              ^perception-monitor.object-monitor <obj-mon>
              ^world.predicates.predicate <in-pred>)
   (<obj-mon> ^object-info <info1> <info2>)
   (<info1> ^world-obj <obj1>
            ^input-link-obj.source-obj.target <src2>)
   (<info2> ^world-obj <obj2>
            ^input-link-obj.source-obj <src2>)
   (<in-pred> ^handle in1)
-->
   (<in-pred> ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
}

