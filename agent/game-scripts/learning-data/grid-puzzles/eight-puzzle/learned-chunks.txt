sp {chunkx2*__task__goal__elaboration__*complete-learn-desired-elaboration-rule*OpNoChange*t4504-1
    :chunk
    (state <s1> ^world <w1> -^copy-task-goal <c1> ^task-operator <t1>
          ^name <n1> ^problem-space <p1>)
    (<t1> ^current-subgoal put-down1sg1 ^task-handle put-down1 ^arg2 <a1>
          ^arg2 <a2> ^arg1 <a3> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^handle <h1>)
    (<a2> ^arg-type partial-predicate ^2 <i2>)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired I11056 +)
    (I11056 ^pred-count 1 + ^1 <i3> + ^handle put-down1sg1 +)
    (<i3> ^type relation + ^handle <h1> + ^1 <i1> + ^2 <i2> +)
}

sp {chunk*__copy__task__operator__application__*complete-copy-task-operator*OpNoChange*t4482-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^perform <p1> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i2>)
    -->
    (<d1> ^<c1> <c2> +)
    (<c2> ^perform <p1> + ^task-handle <t2> + ^item-type task-operator +
           ^name <n1> + ^<a1> <a8> + ^<a3> <a9> +)
    (<a8> ^2 <i1> + ^handle <h1> + ^arg-type partial-predicate +)
    (<a9> ^id <i2> + ^arg-type object +)
}

sp {chunkx3*__task__propose__subtask__operator__*search-for-next-subtask*return-successful-operator*OpNoChange*t4474-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^world <w1>
          ^task-operator <t1> ^name <n1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^handle <h2> ^2 <i2> ^1 <i3>)
    (<p1> ^name action)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h2>)
    (<o1> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p4> ^item-type <i4>)
    (<p4> -^dont-copy arm-status ^arm-status grabbed)
    (<i2> ^item-type <i5>)
    (<t1> ^name <n1>)
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^arg1 <a1> + ^arg2 <a2> + ^name op_put-down1 +
           ^item-type task-operator + ^task-handle put-down1 +
           ^perform multiple +)
    (<a1> ^arg-type object + ^id <i3> +)
    (<a2> ^arg-type partial-predicate + ^handle <h2> + ^2 <i2> +)
}

sp {chunk*selection*select*success-evaluation-becomes-best-preference*OpNoChange*t4473-2
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^perform <p3>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i2> ^predicates <p1> ^item-type <i4>)
    (<p1> -^dont-copy arm-status ^arm-status grabbed)
    (<p2> ^name action)
    (<i3> ^item-type <i5>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle <h1>)
    -->
    (<s1> ^operator <o1> > ^operator <o1> = 0.900000 ^best-pref-eval <o1> +)
}

sp {chunk*subproblem*search*selection*success*evaluation*mark*search-succeeded*true*OpNoChange*t4473-1
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^handle <h1> ^1 <i2> ^2 <i3>)
   -{ (<o1> ^{ <a1> <> arg2 <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_put-down1 ^arg2 <a4> ^arg1 <a5> ^perform <p3>
          ^task-handle <t1>)
    (<a4> ^arg-type partial-predicate ^handle <h1> ^2 <i3>)
    (<a5> ^arg-type object ^id <i2>)
    (<i2> ^predicates <p1> ^item-type <i4>)
    (<p1> -^dont-copy arm-status ^arm-status grabbed)
    (<p2> ^subproblem search ^name action)
    (<i3> ^item-type <i5>)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i3>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle <h1>)
    -->
    (<s1> ^successful-operator <o1> +)
}

sp {chunkx2*__task__goal__elaboration__*complete-learn-desired-elaboration-rule*OpNoChange*t4450-1
    :chunk
    (state <s1> ^world <w1> -^copy-task-goal <c1> ^task-operator <t1>
          ^name <n1> ^problem-space <p1>)
    (<t1> ^current-subgoal pick-up1sg1 ^task-handle pick-up1 ^arg1 <a1>
          ^name <n1>)
    (<a1> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1> +)
    (<d1> ^1 <i2> + ^pred-count 1 + ^handle pick-up1sg1 +)
    (<i2> ^1 <i1> + ^property-handle arm-status + ^handle grabbed +
           ^type state +)
}

sp {chunk*__instantiate__task__goal__application__*complete-instantiate-task-goal*OpNoChange*t4449-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> ^name instantiate-task-goal ^general-goal-rep <g1>
          ^reference-tcn-proc <r1> ^reference-task-op <r2> ^destination <d1>
          ^world <w1>)
    (<g1> ^pred-count 1 ^1 <i1>)
    (<i1> ^type state ^id <i2> ^1 <i3>)
    (<i2> ^default <d2>)
    (<d2> ^predicate-handle <p1> ^property-handle <p2>)
    (<r2> ^<a1> <a2>)
    (<a2> ^arg-type object ^id <i4>)
    (<r1> ^<a1> <a3>)
    (<a3> ^arg-type object ^id <i3>)
    -->
    (<d1> ^instantiation <i5> +)
    (<i5> ^1 <i6> + ^pred-count 1 +)
    (<i6> ^1 <i4> + ^property-handle <p2> + ^handle <p1> + ^type state +)
}

sp {chunk*__copy__task__operator__application__*complete-copy-task-operator*OpNoChange*t4424-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> -^object-map <o2> ^name copy-task-operator ^copy-name <c1>
          ^destination <d1> ^task-operator <t1>)
    (<t1> ^perform <p1> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    -->
    (<d1> ^<c1> <c2> +)
    (<c2> ^perform <p1> + ^task-handle <t2> + ^item-type task-operator +
           ^name <n1> + ^<a1> <a6> +)
    (<a6> ^id <i1> + ^arg-type object +)
}

sp {chunkx3*__task__propose__subtask__operator__*search-for-next-subtask*return-successful-operator*OpNoChange*t4418-1
    :chunk
    (state <s1> ^desired <d1> ^problem-space <p1> ^world <w1>
          ^task-operator <t1> ^name <n1> ^agent-params <a1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^handle <h2> ^2 <i2> ^1 <i3>)
    (<p1> ^name action)
    (<w1> ^predicates <p2> ^objects <o1>)
    (<p2> ^predicate <p3>)
    (<p3> ^handle <h2>)
    (<o1> ^object <i2> ^object <i3>)
    (<i3> ^predicates <p4> ^item-type <i4>)
    (<p4> -^dont-copy arm-status -^dont-copy is-grabbable1
          ^is-grabbable1 grabbable1 ^arm-status not-grabbed)
    (<i2> ^item-type <i5>)
    (<t1> ^name <n1>)
    (<a1> ^domain { <d2> << internal >> })
    -->
    (<s1> ^operator <o2> +)
    (<o2> ^arg1 <a2> + ^name op_pick-up1 + ^item-type task-operator +
           ^task-handle pick-up1 + ^perform multiple +)
    (<a2> ^arg-type object + ^id <i3> +)
}

sp {chunk*selection*select*success-evaluation-becomes-best-preference*OpNoChange*t4417-2
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^1 <i2> ^handle <h1> ^2 <i4>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_pick-up1 ^arg1 <a4> ^perform <p3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^predicates <p1> ^item-type <i3>)
    (<p1> -^dont-copy arm-status ^arm-status not-grabbed)
    (<p2> ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<i4> ^item-type <i5>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle <h1>)
    -->
    (<s1> ^operator <o1> > ^operator <o1> = 0.900000 ^best-pref-eval <o1> +)
}

sp {chunk*subproblem*search*selection*success*evaluation*mark*search-succeeded*true*OpNoChange*t4417-1
    :chunk
    (state <s1> ^desired <d1> ^operator <o1> + ^problem-space <p2> ^world <w1>)
    (<d1> ^pred-count 1 ^1 <i1> ^handle <h2>)
    (<i1> ^type relation ^1 <i2> ^handle <h1> ^2 <i4>)
   -{ (<o1> ^{ <a1> <> arg1 } <a2>)
      (<a2> ^arg-type <a3>)}
    (<o1> ^name op_pick-up1 ^arg1 <a4> ^perform <p3> ^task-handle <t1>)
    (<a4> ^arg-type object ^id <i2>)
    (<i2> ^predicates <p1> ^item-type <i3>)
    (<p1> -^dont-copy arm-status ^arm-status not-grabbed)
    (<p2> ^subproblem search ^name action ^learning <l1>)
    (<l1> ^type exploration)
    (<w1> ^objects <o2> ^predicates <p4>)
    (<o2> ^object <i2> ^object <i4>)
    (<i4> ^item-type <i5>)
    (<p4> ^predicate <p5>)
    (<p5> ^handle <h1>)
    -->
    (<s1> ^successful-operator <o1> +)
}

sp {chunk*__copy__task__operator__elaboration__*complete-copy-task-operator*OpNoChange*t4405-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^perform <p1> ^task-handle <t2> ^name <n1> ^<a1> <a2>)
   -{ (<t1> ^{ <a3> <> <a1> } <a4>)
      (<a4> ^arg-type <a5>)}
    (<a2> ^arg-type object ^id <i1>)
    (<o1> ^<i1> <i2>)
    -->
    (<d1> ^<c2> <c3> +)
    (<c3> ^perform <p1> + ^task-handle <t2> + ^item-type task-operator +
           ^name <n1> + ^<a1> <a6> +)
    (<a6> ^id <i2> + ^arg-type object +)
}

sp {chunk*__copy__task__operator__elaboration__*complete-copy-task-operator*OpNoChange*t4396-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^object-map <o1> ^copy-name <c2> ^destination <d1>
          ^task-operator <t1>)
    (<t1> ^perform <p1> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3> +)
    (<c3> ^perform <p1> + ^task-handle <t2> + ^item-type task-operator +
           ^name <n1> + ^<a1> <a8> + ^<a3> <a9> +)
    (<a8> ^2 <i2> + ^handle <h1> + ^arg-type partial-predicate +)
    (<a9> ^id <i4> + ^arg-type object +)
}

sp {chunk*__copy__task__operator__elaboration__*complete-copy-task-operator*OpNoChange*t4378-1
    :chunk
    (state <s1> ^copy-task-operator <c1>)
    (<c1> ^task-operator <t1> ^object-map <o1> ^copy-name <c2>
          ^destination <d1>)
    (<t1> -^perform <p1> ^task-handle <t2> ^name <n1> ^<a1> <a2>
          ^{ <a3> < <a1> } <a4>)
    (<a2> ^arg-type partial-predicate ^handle <h1> ^2 <i1>)
    (<o1> ^<i1> <i2> ^<i3> <i4>)
   -{ (<t1> ^{ <a5> <> <a1> <> <a3> } <a6>)
      (<a6> ^arg-type <a7>)}
    (<a4> ^arg-type object ^id <i3>)
    -->
    (<d1> ^<c2> <c3> +)
    (<c3> ^perform multiple + ^task-handle <t2> + ^item-type task-operator +
           ^name <n1> + ^<a1> <a8> + ^<a3> <a9> +)
    (<a8> ^2 <i2> + ^handle <h1> + ^arg-type partial-predicate +)
    (<a9> ^id <i4> + ^arg-type object +)
}

sp {chunk*__copy__task__goal__elaboration__*complete-copy-task-goal*OpNoChange*t4369-1
    :chunk
    (state <s1> ^copy-task-goal <c1> ^deep-copy-world <d1>)
    (<c1> ^pred-count 1 ^1 <i1> ^handle <h1>)
    (<i1> ^type relation ^handle <h2> ^2 <i2> ^1 <i3>)
    (<d1> ^copy-objects-map <c2>)
    (<c2> ^<i3> <i4> ^<i2> <i5>)
    -->
    (<s1> ^desired <d2> +)
    (<d2> ^duplicate-of <c1> + ^handle <h1> + ^1 <i6> + ^pred-count 1 +)
    (<i6> ^2 <i5> + ^1 <i4> + ^handle <h2> + ^type relation +)
}

sp {chunkx2*__task__goal__elaboration__*complete-learn-desired-elaboration-rule*OpNoChange*t4356-1
    :chunk
    (state <s1> ^world <w1> -^copy-task-goal <c1> ^task-operator <t1>
          ^name <n1> ^problem-space <p1>)
    (<t1> ^current-subgoal move1sg1 ^task-handle move1 ^arg2 <a1> ^arg2 <a2>
          ^arg1 <a3> ^name <n1>)
    (<a1> ^arg-type partial-predicate ^handle <h1>)
    (<a2> ^arg-type partial-predicate ^2 <i2>)
    (<a3> ^arg-type object ^id <i1>)
    (<p1> ^name action)
    -->
    (<s1> ^desired <d1> +)
    (<d1> ^1 <i3> + ^pred-count 1 + ^handle move1sg1 +)
    (<i3> ^2 <i2> + ^1 <i1> + ^handle <h1> + ^type relation +)
}

sp {chunk*__instantiate__task__goal__application__*complete-instantiate-task-goal*OpNoChange*t4355-1
    :chunk
    (state <s1> ^operator <o1>)
    (<o1> ^name instantiate-task-goal ^general-goal-rep <g1>
          ^reference-tcn-proc <r1> ^reference-task-op <r2> ^destination <d1>
          ^world <w1>)
    (<g1> ^pred-count 1 ^1 <i1>)
    (<i1> ^type relation ^id <i2> ^2 <i3> ^1 <i4>)
    (<r2> ^<a1> <a2> ^<a4> <a5> ^<a7> <a8>)
    (<a2> ^arg-type object ^id <i5>)
    (<r1> ^<a1> <a3> ^<a4> <a6> ^<a7> <a9>)
    (<a3> ^arg-type object ^id <i4>)
    (<a5> ^arg-type partial-predicate ^2 <i6>)
    (<a6> ^arg-type partial-predicate ^2 <i3>)
    (<a8> ^arg-type partial-predicate ^handle <h1>)
    (<a9> ^arg-type partial-predicate ^id <i2>)
    -->
    (<d1> ^instantiation <i7> +)
    (<i7> ^1 <i8> + ^pred-count 1 +)
    (<i8> ^2 <i6> + ^1 <i5> + ^handle <h1> + ^type relation +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t3974-2
    :chunk
    (state <s1> ^retrieve-game eight-puzzle1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle slide-block3 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t3974-1
    :chunk
    (state <s1> ^retrieve-game eight-puzzle1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle goal-default14 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t3864-1
    :chunk
    (state <s1> ^retrieve-handle goal-default14 ^gtype goal)
    -->
    (<s1> ^goal <g1> +)
    (<g1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <n1> + ^aname goal-default14 +
           ^handle goal-default14 +)
    (<p2> ^argnum 2 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^aname goal-default14 +)
    (<c1> ^return-type number + ^negative false + ^parameter <p3> +
           ^rtype single + ^args <a1> + ^result <r1> + ^attribute predicate +
           ^name number + ^type concept +)
    (<p3> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 2 + ^type single +)
    (<r1> ^set <s2> +)
    (<s2> ^instance <i2> +)
    (<i2> ^1 8 +)
    (<c2> ^return-type number + ^negative false + ^parameter <p4> +
           ^rtype single + ^args <a2> + ^result <r5> + ^function soar-count +
           ^name count + ^type function +)
    (<p4> ^num 2 + ^2 <i3> + ^1 <i4> +)
    (<i3> ^param-id 1 + ^type set +)
    (<i4> ^param-id 2 + ^type single +)
    (<a2> ^num 1 + ^2 <i5> +)
    (<i5> ^negative false + ^parameter <p5> + ^rtype set + ^args <a3> +
           ^result <r4> + ^attribute predicate + ^name matched15 +
           ^type concept +)
    (<p5> ^num 1 + ^1 <i6> +)
    (<i6> ^param-id 1 + ^type set +)
    (<a3> ^num 1 + ^1 <i7> +)
    (<i7> ^negative false + ^parameter <p6> + ^rtype single + ^args <a4> +
           ^result <r3> + ^attribute category + ^name location +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<a4> ^num 1 + ^1 <i8> +)
    (<i8> ^negative false + ^parameter <p7> + ^rtype single + ^args <a5> +
           ^result <r2> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t3753-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name matched15 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^secondary-rtype single +
           ^primary-rtype single + ^nlp-set <n1> + ^aname matched15 +
           ^handle matched15 +)
    (<p3> ^argnum 3 +)
    (<n1> ^conditions <c2> + ^conditions <i5> + ^conditions <c3> +
           ^aname matched15 +)
    (<c2> ^return-type number + ^negative false + ^parameter <p4> +
           ^rtype single + ^args <a1> + ^result <r2> + ^name color +
           ^type attribute-of +)
    (<p4> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^param-id 1 + ^type single +)
    (<i2> ^param-id 3 + ^type single +)
    (<a1> ^num 1 + ^2 <i3> +)
    (<i3> ^negative false + ^parameter <p5> + ^rtype single + ^args <a2> +
           ^result <r1> + ^attribute 2 + ^name argument +)
    (<p5> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 1 + ^type single +)
    (<a2> ^num 1 + ^1 <i5> +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<i5> ^negative false + ^parameter <p6> + ^rtype single + ^args <a3> +
           ^result <r6> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<p6> ^num 2 + ^2 <i6> + ^1 <i7> +)
    (<i6> ^param-id 1 + ^type single +)
    (<i7> ^param-id 2 + ^type single +)
    (<a3> ^num 2 + ^2 <i8> + ^1 <i9> +)
    (<i8> ^input 1 + ^negative false + ^parameter <p7> + ^rtype single +
           ^args <a4> + ^result <r3> + ^attribute input-arg + ^name object +)
    (<p7> ^num 0 +)
    (<r3> ^set <s4> +)
    (<i9> ^negative false + ^parameter <p8> + ^rtype single + ^args <a5> +
           ^result <r5> + ^attribute category + ^name block +
           ^type attribute +)
    (<p8> ^num 0 +)
    (<a5> ^num 1 + ^1 <i10> +)
    (<i10> ^negative false + ^parameter <p9> + ^rtype single + ^args <a6> +
           ^result <r4> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p9> ^num 0 +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
    (<r6> ^set <s7> +)
    (<c3> ^return-type number + ^negative false + ^parameter <p10> +
           ^rtype single + ^args <a7> + ^result <r7> + ^name color +
           ^type attribute-of +)
    (<p10> ^num 2 + ^2 <i11> + ^1 <i12> +)
    (<i11> ^param-id 2 + ^type single +)
    (<i12> ^param-id 3 + ^type single +)
    (<a7> ^num 1 + ^2 <i5> +)
    (<r7> ^set <s8> +)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t3735-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute-of ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^2 <i3> + ^1 <n3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t2557-1
    :chunk
    (state <s1> ^retrieve-handle slide-block3 ^gtype action)
    -->
    (<s1> ^action <a1> +)
    (<a1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^verb-structure <v1> +
           ^aname slide-block3 + ^handle slide-block3 +)
    (<p2> ^argnum 2 +)
    (<n1> ^conditions <c1> + ^aname slide-block3 +)
    (<c1> ^negative false + ^parameter <p3> + ^rtype single + ^args <a2> +
           ^result <r6> + ^attribute predicate + ^name adjacent19 +
           ^type concept +)
    (<p3> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^param-id 2 + ^type single +)
    (<i2> ^param-id 1 + ^type single +)
    (<a2> ^num 2 + ^2 <i3> + ^1 <i7> +)
    (<i3> ^negative false + ^parameter <p4> + ^rtype single + ^args <a3> +
           ^result <r3> + ^attribute predicate + ^name clear6 +
           ^type concept +)
    (<p4> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 2 + ^type single +)
    (<a3> ^num 1 + ^1 <i5> +)
    (<i5> ^negative false + ^parameter <p5> + ^rtype single + ^args <a4> +
           ^result <r2> + ^attribute category + ^name location +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<a4> ^num 1 + ^1 <i6> +)
    (<i6> ^negative false + ^parameter <p6> + ^rtype single + ^args <a5> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<i7> ^negative false + ^parameter <p7> + ^rtype single + ^args <a6> +
           ^result <r5> + ^attribute category + ^name block +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<a6> ^num 1 + ^1 <i8> +)
    (<i8> ^negative false + ^parameter <p8> + ^rtype single + ^args <a7> +
           ^result <r4> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p8> ^num 0 +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
    (<r6> ^set <s7> +)
    (<v1> ^1 <i9> +)
    (<i9> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 1 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t2456-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name adjacent19 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^secondary-rtype single +
           ^primary-rtype single + ^nlp-set <n1> + ^aname adjacent19 +
           ^handle adjacent19 +)
    (<p3> ^argnum 2 +)
    (<n1> ^conditions <c2> + ^conditions <c3> + ^aname adjacent19 +)
    (<c2> ^negative false + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r3> + ^attribute prepositions + ^name near1 +
           ^type state-pair +)
    (<p4> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^param-id 2 + ^type single +)
    (<i2> ^param-id 1 + ^type single +)
    (<a1> ^num 2 + ^2 <i3> + ^1 <i5> +)
    (<i3> ^input 2 + ^negative false + ^parameter <p5> + ^rtype single +
           ^args <a2> + ^result <r1> + ^attribute input-arg + ^name object +)
    (<p5> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 2 + ^type single +)
    (<r1> ^set <s2> +)
    (<i5> ^input 1 + ^negative false + ^parameter <p6> + ^rtype single +
           ^args <a3> + ^result <r2> + ^attribute input-arg + ^name object +)
    (<p6> ^num 0 +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<c3> ^negative true + ^parameter <p7> + ^rtype single + ^args <a4> +
           ^result <r5> + ^attribute prepositions + ^name diagonal-with1 +
           ^type state-pair +)
    (<p7> ^num 2 + ^2 <i6> + ^1 <i7> +)
    (<i6> ^param-id 2 + ^type single +)
    (<i7> ^param-id 1 + ^type single +)
    (<a4> ^num 2 + ^2 <i8> + ^1 <c2> +)
    (<i8> ^negative false + ^parameter <p8> + ^rtype single + ^args <a5> +
           ^result <r4> + ^attribute 2 + ^name argument +)
    (<p8> ^num 1 + ^1 <i9> +)
    (<i9> ^param-id 2 + ^type single +)
    (<a5> ^num 1 + ^1 <c2> +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t2438-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^handle <h1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative true ^rtype single ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r1> ^attribute <a4>)
    (<p3> ^num 2)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> -^rtype set ^result <r3>)
    (<i2> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<s3> ^instance { <i5> < <i3> })
      (<i5> ^1 <i4>)}
    (<r3> ^set <s4>)
    (<s4> ^instance <i6>)
    (<i6> ^1 { <i7> <> <i4> })
   -{ (<p2> ^instance <i8>)
      (<i8> ^2 <i7> ^1 <i4>)}
   -{ (<s4> ^instance { <i9> < <i6> })
      (<i9> ^1 <i7>)}
    -->
    (<s2> ^instance <i10> +)
    (<i10> ^2 <i7> + ^1 <i4> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t2432-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r1> ^attribute <a4>)
    (<p3> ^num 2)
    (<a3> ^num 2 ^2 <i4> ^1 <i5>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i6>)
   -{ (<s3> ^instance { <i7> < <i6> })
      (<i7> ^1 <i3>)}
    (<i6> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i8>)
   -{ (<s4> ^instance { <i9> < <i8> })
      (<i9> ^1 <i2>)}
    (<i8> ^1 <i2>)
    -->
    (<s2> ^instance <i10> +)
    (<i10> ^2 <i2> + ^1 <i3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1668-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name clear6 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname clear6 + ^handle clear6 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname clear6 +)
    (<c2> ^negative true + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r3> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a1> ^num 2 + ^2 <i2> + ^1 <i3> +)
    (<i2> ^negative false + ^parameter <p5> + ^rtype single + ^args <a2> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<r1> ^set <s2> +)
    (<i3> ^input 1 + ^negative false + ^parameter <p6> + ^rtype single +
           ^args <a3> + ^result <r2> + ^attribute input-arg + ^name object +)
    (<p6> ^num 0 +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t1650-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^handle <h1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative true ^rtype single ^name <h1> ^type state-pair ^args <a3>
          ^parameter <p3> ^result <r1> ^attribute <a4>)
    (<a3> ^num 2 ^1 <i1> ^2 <i2>)
    (<i1> -^rtype set ^result <r2>)
    (<p3> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<p2> ^instance <i5>)
      (<i5> ^1 <i4> ^2 <i6>)
      (<i2> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i7>)
      (<i7> ^1 <i6>)}
   -{ (<s3> ^instance { <i8> < <i3> })
      (<i8> ^1 <i4>)}
    -->
    (<s2> ^instance <i9> +)
    (<i9> ^1 <i4> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1236-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n2> ^attribute <a4>)
    (<p1> ^num { <n1> < 2 })
    (<a3> ^1 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> ^<a4> <n2>)
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1230-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> -^handle self)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <i1>)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^1 <o2> +)
}

sp {chunkx4*same-attribute*apply*complete*instance*OpNoChange*t2714-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<p2> ^<n2> <n3>)
   -{ (<i1> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i5>)
      (<i5> ^1 { <i6> > <i3> })
      (<i6> ^predicates <p3>)
      (<p3> ^<n2> <n3>)}
    -->
    (<s3> ^instance <i7> +)
    (<i7> ^2 <n3> + ^1 <i8> +)
}

sp {chunkx4*same-attribute*elaborate*results*instance*sets*object*OpNoChange*t2714-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i5> ^1 <i6>)
    (<p2> ^<n2> <i5>)
    -->
    (<i6> ^object <i3> +)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t5077-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i5> +)
    (<i5> ^2 <i3> + ^1 <i6> +)
}

sp {chunkx4*attribute-of*apply*complete*sets*OpNoChange*t5077-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i3> ^1 <i5>)
    (<i3> ^object <o1>)
    (<o1> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<i5> ^<a4> <n3> +)
}

sp {chunkx4*board-between*elaborate*instances*straight*single*OpNoChange*t3343-2
    :chunk
    (state <s1> ^diff-table <d1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<d1> ^diff <d2> ^diff <d3>)
    (<d2> ^result 2 ^pair <p1>)
    (<d3> ^result 1 ^pair <p2> ^pair <p3>)
    (<p1> ^num <n1> ^num { <n2> <> <n1> })
    (<p2> ^num <n1> ^num { <n3> <> <n2> <> <n1> })
    (<p3> ^num <n2> ^num <n3>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype single ^name between-exclusive
          ^type function ^args <a3> ^negative <n4> ^parameter <p4>
          ^result <r4>)
    (<a3> ^num 3 ^1 <i1> ^3 <i2> ^2 <i3>)
    (<i1> ^rtype single ^result <r3>)
    (<i2> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> > <i4> })
      (<i6> ^1 <i5>)}
    (<i5> ^predicates <p5>)
    (<i3> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 <i8>)
   -{ (<s3> ^instance { <i9> > <i7> })
      (<i9> ^1 <i8>)}
    (<i8> ^predicates <p6>)
    (<p5> ^{ <a4> << x y >> } <n1> ^{ <a5> << x y >> <> <a4> } <a6>)
    (<p6> ^<a4> <n2> ^<a5> <a6>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i10>)
    (<i10> ^1 <i11>)
   -{ (<s4> ^instance { <i12> > <i10> })
      (<i12> ^1 <i11>)}
    (<i11> ^predicates <p7>)
    (<p7> ^<a4> <n3> ^<a5> <a6>)
    (<r4> ^set <s5>)
    -->
    (<s5> ^instance <i13> +)
    (<i13> ^2 <i8> + ^3 <i5> + ^1 <i11> +)
}

sp {chunkx4*board-between*elaborate*object*instance*OpNoChange*t3035-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-exclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10> +)
    (<i10> ^1 <i11> + ^3 <i5> + ^2 <i8> +)
}

sp {chunkx4*board-between*elaborate*object*instance*inclusive*OpNoChange*t3015-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-inclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10> +)
    (<i10> ^1 <i11> + ^3 <i5> + ^2 <i8> +)
}

sp {chunkx4*soar-count*apply*complete*OpNoChange*t3021-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-count ^type function ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r2> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<i3> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i4> +)
    (<i4> ^1 (size <i3>) + ^2 <i3> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t57252-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type state-pair ^parameter <p1>
          ^args <a3> ^result <r2> ^name <n1> ^attribute <a4>)
    (<p1> ^num 2)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> -^rtype set ^result <r1>)
    (<i2> -^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<s2> ^instance { <i5> > <i3> })
      (<i5> ^1 <i4>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i6> +)
    (<i6> ^2 <i4> + ^1 <i7> +)
}

sp {chunkx4*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t57252-2
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r4> ^attribute <a4>)
    (<p3> ^num 2)
    (<a3> ^num 2 ^2 <i4> ^1 <i5> ^2 <i6> ^1 <i7>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<i6> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i8>)
    (<i8> ^1 <i9>)
   -{ (<s2> ^instance { <i10> > <i8> })
      (<i10> ^1 <i9>)}
    (<r2> ^set <s3>)
    (<s3> ^instance <i11>)
    (<i11> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i12>)
    (<i12> ^1 <i2>)
    (<r4> ^set <s5>)
    (<s5> ^instance <i13>)
    (<i13> ^2 <i2> ^1 <i14>)
    -->
    (<i14> ^object <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t10663-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n1> ^attribute <a4>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^2 <n1> + ^3 <a4> + ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*objects*OpNoChange*t10663-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r2> ^attribute <i5> ^name <i6>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^3 <i5> ^2 <i6> ^1 <i7>)
    (<p2> ^<i5> <i6>)
    -->
    (<i7> ^object <i3> +)
}



