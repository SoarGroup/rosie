sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t7889-6
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle write-1-to-43 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t7889-5
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle same-row-value12 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t7889-4
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle same-col-value17 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t7889-3
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle same-section-value20 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t7889-2
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle all-filled24 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*start-search-depth*OpNoChange*t7889-1
    :chunk
    (state <s1> ^retrieve-game mini-sudoku1 -^opponent <o1>)
    -->
    (<s1> ^start-search-depth 4 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t7770-1
    :chunk
    (state <s1> ^retrieve-handle all-filled24 ^gtype goal)
    -->
    (<s1> ^goal I10407 +)
    (I10407 ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <n1> + ^aname all-filled24 +
           ^handle all-filled24 +)
    (<p2> ^argnum 1 +)
    (<n1> ^conditions <c1> + ^aname all-filled24 +)
    (<c1> ^attribute predicate + ^negative false + ^parameter <p3> +
           ^rtype set + ^args <a1> + ^result <r3> + ^name filled26 +
           ^type concept +)
    (<p3> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type set +)
    (<a1> ^num 1 + ^1 <i2> +)
    (<i2> ^attribute category + ^negative false + ^parameter <p4> +
           ^rtype set + ^args <a2> + ^result <r2> + ^name location +
           ^type attribute +)
    (<p4> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type set +)
    (<a2> ^num 1 + ^1 <i4> +)
    (<i4> ^attribute primitive + ^negative false + ^parameter <p5> +
           ^rtype single + ^args <a3> + ^result <r1> + ^name object +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t7702-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name filled26 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^secondary-rtype single +
           ^primary-rtype single + ^nlp-set <n1> + ^aname filled26 +
           ^handle filled26 +)
    (<p3> ^argnum 3 +)
    (<n1> ^conditions <c2> + ^conditions <i4> + ^conditions <i3> +
           ^aname filled26 +)
    (<c2> ^return-type number + ^negative false + ^parameter <p4> +
           ^rtype single + ^args <a1> + ^result <r1> +
           ^function soar-greater + ^name greater + ^type function +)
    (<p4> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^param-id 2 + ^type single +)
    (<i2> ^param-id 3 + ^type single +)
    (<a1> ^num 2 + ^2 <i3> + ^1 <i4> +)
    (<r1> ^set <s2> +)
    (<i4> ^return-type number + ^negative false + ^parameter <p5> +
           ^rtype single + ^args <a2> + ^result <r3> + ^name value +
           ^type attribute-of +)
    (<p5> ^num 2 + ^2 <i5> + ^1 <i6> +)
    (<i5> ^param-id 1 + ^type single +)
    (<i6> ^param-id 3 + ^type single +)
    (<a2> ^num 1 + ^2 <i7> +)
    (<i7> ^input 1 + ^attribute input-arg + ^negative false +
           ^parameter <p6> + ^rtype single + ^args <a3> + ^result <r2> +
           ^name object +)
    (<p6> ^num 1 + ^1 <i8> +)
    (<i8> ^param-id 1 + ^type single +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<i3> ^return-type number + ^negative false + ^parameter <p7> +
           ^rtype single + ^args <a4> + ^result <r4> + ^name number +)
    (<p7> ^num 0 +)
    (<r4> ^set <s5> +)
    (<s5> ^instance <i9> +)
    (<i9> ^1 0 +)
}

sp {chunkx4*soar-compare*greater*param-2*OpNoChange*t7684-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-greater ^type function ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<r1> ^set <s2>)
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<s3> ^instance { <i5> < <i3> })
      (<i5> ^1 <i4>)}
    (<i1> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i6>)
    (<i6> ^1 { <i7> < <i4> })
   -{ (<s4> ^instance { <i8> < <i6> })
      (<i8> ^1 <i7>)}
    -->
    (<s2> ^instance <i9> +)
    (<i9> ^1 <i4> + ^2 <i7> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t6463-1
    :chunk
    (state <s1> ^retrieve-handle same-section-value20 ^gtype failure)
    -->
    (<s1> ^failure <f1> +)
    (<f1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> +
           ^aname same-section-value20 + ^handle same-section-value20 +)
    (<p2> ^argnum 4 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^conditions <c3> +
           ^conditions <i13> + ^aname same-section-value20 +)
    (<c1> ^return-type number + ^negative false + ^parameter <p3> +
           ^rtype single + ^args <a1> + ^result <r3> + ^name value +
           ^type attribute-of +)
    (<p3> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^param-id 1 + ^type single +)
    (<i2> ^param-id 3 + ^type single +)
    (<a1> ^num 1 + ^2 <i3> +)
    (<i3> ^attribute category + ^negative false + ^parameter <p4> +
           ^rtype single + ^args <a2> + ^result <r2> + ^name location +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<a2> ^num 1 + ^1 <i4> +)
    (<i4> ^attribute primitive + ^negative false + ^parameter <p5> +
           ^rtype single + ^args <a3> + ^result <r1> + ^name object +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<c2> ^return-type number + ^negative false + ^parameter <p6> +
           ^rtype single + ^args <a4> + ^result <r5> + ^name section +
           ^type attribute-of +)
    (<p6> ^num 2 + ^2 <i5> + ^1 <i6> +)
    (<i5> ^param-id 1 + ^type single +)
    (<i6> ^param-id 4 + ^type single +)
    (<a4> ^num 1 + ^2 <i7> +)
    (<i7> ^attribute 2 + ^negative false + ^parameter <p7> + ^rtype single +
           ^args <a5> + ^result <r4> + ^name argument +)
    (<p7> ^num 1 + ^1 <i8> +)
    (<i8> ^param-id 1 + ^type single +)
    (<a5> ^num 1 + ^1 <c1> +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
    (<c3> ^return-type number + ^negative false + ^parameter <p8> +
           ^rtype single + ^args <a6> + ^result <r7> + ^name section +
           ^type attribute-of +)
    (<p8> ^num 2 + ^2 <i9> + ^1 <i10> +)
    (<i9> ^param-id 2 + ^type single +)
    (<i10> ^param-id 4 + ^type single +)
    (<a6> ^num 1 + ^2 <i11> +)
    (<i11> ^attribute 2 + ^negative false + ^parameter <p9> + ^rtype single +
           ^args <a7> + ^result <r6> + ^name argument +)
    (<p9> ^num 1 + ^1 <i12> +)
    (<i12> ^param-id 2 + ^type single +)
    (<a7> ^num 1 + ^1 <i13> +)
    (<r6> ^set <s7> +)
    (<r7> ^set <s8> +)
    (<i13> ^return-type number + ^negative false + ^parameter <p10> +
           ^rtype single + ^args <a8> + ^result <r10> + ^name value +
           ^type attribute-of +)
    (<p10> ^num 2 + ^2 <i14> + ^1 <i15> +)
    (<i14> ^param-id 2 + ^type single +)
    (<i15> ^param-id 3 + ^type single +)
    (<a8> ^num 1 + ^2 <i16> +)
    (<i16> ^attribute category + ^negative false + ^parameter <p11> +
           ^rtype single + ^args <a9> + ^result <r9> + ^name location +
           ^type attribute +)
    (<p11> ^num 0 +)
    (<a9> ^num 1 + ^1 <i17> +)
    (<i17> ^attribute primitive + ^negative false + ^parameter <p12> +
           ^rtype single + ^args <a10> + ^result <r8> + ^name object +
           ^type attribute +)
    (<p12> ^num 0 +)
    (<r8> ^set <s9> +)
    (<r9> ^set <s10> +)
    (<r10> ^set <s11> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t5358-1
    :chunk
    (state <s1> ^retrieve-handle same-col-value17 ^gtype failure)
    -->
    (<s1> ^failure <f1> +)
    (<f1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^aname same-col-value17 +
           ^handle same-col-value17 +)
    (<p2> ^argnum 4 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^conditions <c3> +
           ^conditions <i13> + ^aname same-col-value17 +)
    (<c1> ^return-type number + ^negative false + ^parameter <p3> +
           ^rtype single + ^args <a1> + ^result <r3> + ^name value +
           ^type attribute-of +)
    (<p3> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^param-id 1 + ^type single +)
    (<i2> ^param-id 3 + ^type single +)
    (<a1> ^num 1 + ^2 <i3> +)
    (<i3> ^attribute category + ^negative false + ^parameter <p4> +
           ^rtype single + ^args <a2> + ^result <r2> + ^name location +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<a2> ^num 1 + ^1 <i4> +)
    (<i4> ^attribute primitive + ^negative false + ^parameter <p5> +
           ^rtype single + ^args <a3> + ^result <r1> + ^name object +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<c2> ^return-type number + ^negative false + ^parameter <p6> +
           ^rtype single + ^args <a4> + ^result <r5> + ^name column +
           ^type attribute-of +)
    (<p6> ^num 2 + ^2 <i5> + ^1 <i6> +)
    (<i5> ^param-id 1 + ^type single +)
    (<i6> ^param-id 4 + ^type single +)
    (<a4> ^num 1 + ^2 <i7> +)
    (<i7> ^attribute 2 + ^negative false + ^parameter <p7> + ^rtype single +
           ^args <a5> + ^result <r4> + ^name argument +)
    (<p7> ^num 1 + ^1 <i8> +)
    (<i8> ^param-id 1 + ^type single +)
    (<a5> ^num 1 + ^1 <c1> +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
    (<c3> ^return-type number + ^negative false + ^parameter <p8> +
           ^rtype single + ^args <a6> + ^result <r7> + ^name column +
           ^type attribute-of +)
    (<p8> ^num 2 + ^2 <i9> + ^1 <i10> +)
    (<i9> ^param-id 2 + ^type single +)
    (<i10> ^param-id 4 + ^type single +)
    (<a6> ^num 1 + ^2 <i11> +)
    (<i11> ^attribute 2 + ^negative false + ^parameter <p9> + ^rtype single +
           ^args <a7> + ^result <r6> + ^name argument +)
    (<p9> ^num 1 + ^1 <i12> +)
    (<i12> ^param-id 2 + ^type single +)
    (<a7> ^num 1 + ^1 <i13> +)
    (<r6> ^set <s7> +)
    (<r7> ^set <s8> +)
    (<i13> ^return-type number + ^negative false + ^parameter <p10> +
           ^rtype single + ^args <a8> + ^result <r10> + ^name value +
           ^type attribute-of +)
    (<p10> ^num 2 + ^2 <i14> + ^1 <i15> +)
    (<i14> ^param-id 2 + ^type single +)
    (<i15> ^param-id 3 + ^type single +)
    (<a8> ^num 1 + ^2 <i16> +)
    (<i16> ^attribute category + ^negative false + ^parameter <p11> +
           ^rtype single + ^args <a9> + ^result <r9> + ^name location +
           ^type attribute +)
    (<p11> ^num 0 +)
    (<a9> ^num 1 + ^1 <i17> +)
    (<i17> ^attribute primitive + ^negative false + ^parameter <p12> +
           ^rtype single + ^args <a10> + ^result <r8> + ^name object +
           ^type attribute +)
    (<p12> ^num 0 +)
    (<r8> ^set <s9> +)
    (<r9> ^set <s10> +)
    (<r10> ^set <s11> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t4253-1
    :chunk
    (state <s1> ^retrieve-handle same-row-value12 ^gtype failure)
    -->
    (<s1> ^failure <f1> +)
    (<f1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^aname same-row-value12 +
           ^handle same-row-value12 +)
    (<p2> ^argnum 4 +)
    (<n1> ^conditions <c1> + ^conditions <i5> + ^conditions <c2> +
           ^conditions <i14> + ^aname same-row-value12 +)
    (<c1> ^return-type number + ^negative false + ^parameter <p3> +
           ^rtype single + ^args <a1> + ^result <r2> + ^name value +
           ^type attribute-of +)
    (<p3> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^param-id 1 + ^type single +)
    (<i2> ^param-id 4 + ^type single +)
    (<a1> ^num 1 + ^2 <i3> +)
    (<i3> ^attribute 2 + ^negative false + ^parameter <p4> + ^rtype single +
           ^args <a2> + ^result <r1> + ^name argument +)
    (<p4> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 1 + ^type single +)
    (<a2> ^num 1 + ^1 <i5> +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<i5> ^return-type number + ^negative false + ^parameter <p5> +
           ^rtype single + ^args <a3> + ^result <r5> + ^name row +
           ^type attribute-of +)
    (<p5> ^num 2 + ^2 <i6> + ^1 <i7> +)
    (<i6> ^param-id 1 + ^type single +)
    (<i7> ^param-id 3 + ^type single +)
    (<a3> ^num 1 + ^2 <i8> +)
    (<i8> ^attribute category + ^negative false + ^parameter <p6> +
           ^rtype single + ^args <a4> + ^result <r4> + ^name location +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<a4> ^num 1 + ^1 <i9> +)
    (<i9> ^attribute primitive + ^negative false + ^parameter <p7> +
           ^rtype single + ^args <a5> + ^result <r3> + ^name object +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
    (<c2> ^return-type number + ^negative false + ^parameter <p8> +
           ^rtype single + ^args <a6> + ^result <r7> + ^name value +
           ^type attribute-of +)
    (<p8> ^num 2 + ^2 <i10> + ^1 <i11> +)
    (<i10> ^param-id 2 + ^type single +)
    (<i11> ^param-id 4 + ^type single +)
    (<a6> ^num 1 + ^2 <i12> +)
    (<i12> ^attribute 2 + ^negative false + ^parameter <p9> + ^rtype single +
           ^args <a7> + ^result <r6> + ^name argument +)
    (<p9> ^num 1 + ^1 <i13> +)
    (<i13> ^param-id 2 + ^type single +)
    (<a7> ^num 1 + ^1 <i14> +)
    (<r6> ^set <s7> +)
    (<r7> ^set <s8> +)
    (<i14> ^return-type number + ^negative false + ^parameter <p10> +
           ^rtype single + ^args <a8> + ^result <r10> + ^name row +
           ^type attribute-of +)
    (<p10> ^num 2 + ^2 <i15> + ^1 <i16> +)
    (<i15> ^param-id 2 + ^type single +)
    (<i16> ^param-id 3 + ^type single +)
    (<a8> ^num 1 + ^2 <i17> +)
    (<i17> ^attribute category + ^negative false + ^parameter <p11> +
           ^rtype single + ^args <a9> + ^result <r9> + ^name location +
           ^type attribute +)
    (<p11> ^num 0 +)
    (<a9> ^num 1 + ^1 <i18> +)
    (<i18> ^attribute primitive + ^negative false + ^parameter <p12> +
           ^rtype single + ^args <a10> + ^result <r8> + ^name object +
           ^type attribute +)
    (<p12> ^num 0 +)
    (<r8> ^set <s9> +)
    (<r9> ^set <s10> +)
    (<r10> ^set <s11> +)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t4238-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^type attribute-of ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r1> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^2 <i3> + ^1 <n3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t2182-1
    :chunk
    (state <s1> ^retrieve-handle write-1-to-43 ^gtype action)
    -->
    (<s1> ^action <a1> +)
    (<a1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^verb-structure <v1> +
           ^aname write-1-to-43 + ^handle write-1-to-43 +)
    (<p2> ^argnum 4 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^aname write-1-to-43 +)
    (<c1> ^attribute predicate + ^negative false + ^parameter <p3> +
           ^rtype single + ^args <a2> + ^result <r3> + ^name empty6 +
           ^type concept +)
    (<p3> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a2> ^num 1 + ^1 <i2> +)
    (<i2> ^attribute category + ^negative false + ^parameter <p4> +
           ^rtype single + ^args <a3> + ^result <r2> + ^name location +
           ^type attribute +)
    (<p4> ^num 0 +)
    (<a3> ^num 1 + ^1 <i3> +)
    (<i3> ^attribute primitive + ^negative false + ^parameter <p5> +
           ^rtype single + ^args <a4> + ^result <r1> + ^name object +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<c2> ^return-type number + ^negative false + ^parameter <p6> +
           ^rtype single + ^args <a5> + ^result <r6> +
           ^function numeric-between + ^name between-inclusive +
           ^type function +)
    (<p6> ^num 3 + ^3 <i4> + ^2 <i5> + ^1 <i6> +)
    (<i4> ^param-id 4 + ^type single +)
    (<i5> ^param-id 3 + ^type single +)
    (<i6> ^param-id 2 + ^type single +)
    (<a5> ^num 2 + ^3 <i7> + ^2 <i10> +)
    (<i7> ^return-type number + ^negative false + ^parameter <p7> +
           ^rtype single + ^args <a6> + ^result <r4> + ^name number +)
    (<p7> ^num 1 + ^1 <i8> +)
    (<i8> ^param-id 4 + ^type single +)
    (<r4> ^set <s5> +)
    (<s5> ^instance <i9> +)
    (<i9> ^1 4 +)
    (<i10> ^return-type number + ^negative false + ^parameter <p8> +
           ^rtype single + ^args <a7> + ^result <r5> + ^name number +)
    (<p8> ^num 1 + ^1 <i11> +)
    (<i11> ^param-id 3 + ^type single +)
    (<r5> ^set <s6> +)
    (<s6> ^instance <i12> +)
    (<i12> ^1 1 +)
    (<r6> ^set <s7> +)
    (<v1> ^1 <i13> +)
    (<i13> ^verb-prep on1 + ^verb-name write1 + ^2 1 + ^1 2 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1992-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name empty6 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname empty6 + ^handle empty6 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname empty6 +)
    (<c2> ^negative true + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r2> + ^name value + ^type has-attribute +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a1> ^num 1 + ^1 <i2> +)
    (<i2> ^input 1 + ^attribute input-arg + ^negative false +
           ^parameter <p5> + ^rtype single + ^args <a2> + ^result <r1> +
           ^name object +)
    (<p5> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
}

sp {chunkx4*has-attribute*apply*complete*instance*OpNoChange*t1974-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative true ^rtype single ^type has-attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n1>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> -^<n1> <n2>)
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1527-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n2> ^attribute <a4>)
    (<p1> ^num { <n1> < 2 })
    (<a3> ^1 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> ^<a4> <n2>)
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1521-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> -^handle self)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <i1>)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^1 <o2> +)
}

sp {chunkx4*numeric-between*elaborate*instances*inclusive*OpNoChange*t1507-1
    :chunk
    (state <s1> ^integer-list <i1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<i1> ^number <n1>)
    (<a2> ^condition <c1>)
    (<c1> ^function numeric-between ^rtype single ^name between-inclusive
          ^type function ^negative <n2> ^parameter <p1> ^args <a3>
          ^result <r1>)
    (<a3> ^3 <i2> ^2 <i3>)
    (<r1> ^set <s2>)
    (<i3> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^1 { <i5> <= <n1> })
   -{ (<s3> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i7>)
    (<i7> ^1 { <i8> >= <n1> })
   -{ (<s4> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    -->
    (<s2> ^instance <i10> +)
    (<i10> ^2 <i5> + ^3 <i8> + ^1 <n1> +)
}

sp {chunkx4*same-attribute*apply*complete*instance*OpNoChange*t2714-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<p2> ^<n2> <n3>)
   -{ (<i1> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i5>)
      (<i5> ^1 { <i6> > <i3> })
      (<i6> ^predicates <p3>)
      (<p3> ^<n2> <n3>)}
    -->
    (<s3> ^instance <i7> +)
    (<i7> ^2 <n3> + ^1 <i8> +)
}

sp {chunkx4*same-attribute*elaborate*results*instance*sets*object*OpNoChange*t2714-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i5> ^1 <i6>)
    (<p2> ^<n2> <i5>)
    -->
    (<i6> ^object <i3> +)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t5077-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i5> +)
    (<i5> ^2 <i3> + ^1 <i6> +)
}

sp {chunkx4*attribute-of*apply*complete*sets*OpNoChange*t5077-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i3> ^1 <i5>)
    (<i3> ^object <o1>)
    (<o1> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<i5> ^<a4> <n3> +)
}

sp {chunkx4*board-between*elaborate*instances*straight*single*OpNoChange*t3343-2
    :chunk
    (state <s1> ^diff-table <d1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<d1> ^diff <d2> ^diff <d3>)
    (<d2> ^result 2 ^pair <p1>)
    (<d3> ^result 1 ^pair <p2> ^pair <p3>)
    (<p1> ^num <n1> ^num { <n2> <> <n1> })
    (<p2> ^num <n1> ^num { <n3> <> <n2> <> <n1> })
    (<p3> ^num <n2> ^num <n3>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype single ^name between-exclusive
          ^type function ^args <a3> ^negative <n4> ^parameter <p4>
          ^result <r4>)
    (<a3> ^num 3 ^1 <i1> ^3 <i2> ^2 <i3>)
    (<i1> ^rtype single ^result <r3>)
    (<i2> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> > <i4> })
      (<i6> ^1 <i5>)}
    (<i5> ^predicates <p5>)
    (<i3> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 <i8>)
   -{ (<s3> ^instance { <i9> > <i7> })
      (<i9> ^1 <i8>)}
    (<i8> ^predicates <p6>)
    (<p5> ^{ <a4> << x y >> } <n1> ^{ <a5> << x y >> <> <a4> } <a6>)
    (<p6> ^<a4> <n2> ^<a5> <a6>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i10>)
    (<i10> ^1 <i11>)
   -{ (<s4> ^instance { <i12> > <i10> })
      (<i12> ^1 <i11>)}
    (<i11> ^predicates <p7>)
    (<p7> ^<a4> <n3> ^<a5> <a6>)
    (<r4> ^set <s5>)
    -->
    (<s5> ^instance <i13> +)
    (<i13> ^2 <i8> + ^3 <i5> + ^1 <i11> +)
}

sp {chunkx4*board-between*elaborate*object*instance*OpNoChange*t3035-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-exclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10> +)
    (<i10> ^1 <i11> + ^3 <i5> + ^2 <i8> +)
}

sp {chunkx4*board-between*elaborate*object*instance*inclusive*OpNoChange*t3015-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-inclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10> +)
    (<i10> ^1 <i11> + ^3 <i5> + ^2 <i8> +)
}

sp {chunkx4*soar-count*apply*complete*OpNoChange*t3021-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-count ^type function ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r2> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<i3> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i4> +)
    (<i4> ^1 (size <i3>) + ^2 <i3> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t57252-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type state-pair ^parameter <p1>
          ^args <a3> ^result <r2> ^name <n1> ^attribute <a4>)
    (<p1> ^num 2)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> -^rtype set ^result <r1>)
    (<i2> -^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<s2> ^instance { <i5> > <i3> })
      (<i5> ^1 <i4>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i6> +)
    (<i6> ^2 <i4> + ^1 <i7> +)
}

sp {chunkx4*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t57252-2
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r4> ^attribute <a4>)
    (<p3> ^num 2)
    (<a3> ^num 2 ^2 <i4> ^1 <i5> ^2 <i6> ^1 <i7>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<i6> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i8>)
    (<i8> ^1 <i9>)
   -{ (<s2> ^instance { <i10> > <i8> })
      (<i10> ^1 <i9>)}
    (<r2> ^set <s3>)
    (<s3> ^instance <i11>)
    (<i11> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i12>)
    (<i12> ^1 <i2>)
    (<r4> ^set <s5>)
    (<s5> ^instance <i13>)
    (<i13> ^2 <i2> ^1 <i14>)
    -->
    (<i14> ^object <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t10663-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n1> ^attribute <a4>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^2 <n1> + ^3 <a4> + ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*objects*OpNoChange*t10663-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r2> ^attribute <i5> ^name <i6>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^3 <i5> ^2 <i6> ^1 <i7>)
    (<p2> ^<i5> <i6>)
    -->
    (<i7> ^object <i3> +)
}



