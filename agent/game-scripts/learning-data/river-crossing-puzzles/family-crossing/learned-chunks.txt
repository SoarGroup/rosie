sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t5177-4
    :chunk
    (state <s1> ^retrieve-game family-cross1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle action-default10 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t5177-3
    :chunk
    (state <s1> ^retrieve-game family-cross1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle ferry-one17 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t5177-2
    :chunk
    (state <s1> ^retrieve-game family-cross1 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle all-crossed25 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*start-search-depth*OpNoChange*t5177-1
    :chunk
    (state <s1> ^retrieve-game family-cross1 -^opponent <o1>)
    -->
    (<s1> ^start-search-depth 9 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t5064-1
    :chunk
    (state <s1> ^retrieve-handle all-crossed25 ^gtype goal)
    -->
    (<s1> ^goal I1611 +)
    (I1611 ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <n1> + ^aname all-crossed25 +
           ^handle all-crossed25 +)
    (<p2> ^argnum 1 +)
    (<n1> ^conditions <c1> + ^aname all-crossed25 +)
    (<c1> ^negative false + ^parameter <p3> + ^rtype set + ^args <a1> +
           ^result <r6> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<p3> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type set +)
    (<a1> ^num 2 + ^2 <i2> + ^1 <i5> +)
    (<i2> ^negative false + ^parameter <p4> + ^rtype single + ^args <a2> +
           ^result <r3> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<p4> ^num 0 +)
    (<a2> ^num 1 + ^1 <i3> +)
    (<i3> ^negative false + ^parameter <p5> + ^rtype single + ^args <a3> +
           ^result <r2> + ^attribute name + ^name destination1 +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<a3> ^num 1 + ^1 <i4> +)
    (<i4> ^negative false + ^parameter <p6> + ^rtype single + ^args <a4> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<i5> ^negative false + ^parameter <p7> + ^rtype set + ^args <a5> +
           ^result <r5> + ^attribute category + ^name block +
           ^type attribute +)
    (<p7> ^num 1 + ^1 <i6> +)
    (<i6> ^param-id 1 + ^type set +)
    (<a5> ^num 1 + ^1 <i7> +)
    (<i7> ^negative false + ^parameter <p8> + ^rtype single + ^args <a6> +
           ^result <r4> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p8> ^num 0 +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
    (<r6> ^set <s7> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t5049-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^handle <h1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r1> ^attribute <a10>)
    (<p3> ^num 1)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> -^rtype set)
    (<i2> ^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<i4> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
   -{ (<i4> ^<a8> <a9>)
     -{ (<p2> ^instance <i5>)
        (<i5> ^1 <a9> ^2 <i6>)
        (<i1> ^result <r3>)
        (<r3> ^set <s4>)
        (<s4> ^instance <i7>)
        (<i7> ^1 <i6>)}}
   -{ (<s3> ^instance { <i8> < <i3> })
      (<i8> ^1 <i4>)}
    -->
    (<s2> ^instance <i9> +)
    (<i9> ^1 <i4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t4004-1
    :chunk
    (state <s1> ^retrieve-handle ferry-one17 ^gtype action)
    -->
    (<s1> ^action <a1> +)
    (<a1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^verb-structure <v1> +
           ^aname ferry-one17 + ^handle ferry-one17 +)
    (<p2> ^argnum 3 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^conditions <c3> +
           ^aname ferry-one17 +)
    (<c1> ^negative false + ^parameter <p3> + ^rtype single + ^args <a2> +
           ^result <r6> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<p3> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 2 + ^type single +)
    (<a2> ^num 2 + ^2 <i2> + ^1 <i5> +)
    (<i2> ^negative false + ^parameter <p4> + ^rtype single + ^args <a3> +
           ^result <r3> + ^attribute predicate + ^name current11 +
           ^type concept +)
    (<p4> ^num 0 +)
    (<a3> ^num 1 + ^1 <i3> +)
    (<i3> ^negative false + ^parameter <p5> + ^rtype single + ^args <a4> +
           ^result <r2> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<p5> ^num 0 +)
    (<a4> ^num 1 + ^1 <i4> +)
    (<i4> ^negative false + ^parameter <p6> + ^rtype single + ^args <a5> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<i5> ^negative false + ^parameter <p7> + ^rtype single + ^args <a6> +
           ^result <r5> + ^attribute category + ^name block +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<a6> ^num 1 + ^1 <i6> +)
    (<i6> ^negative false + ^parameter <p8> + ^rtype single + ^args <a7> +
           ^result <r4> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p8> ^num 0 +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
    (<r6> ^set <s7> +)
    (<c2> ^negative false + ^parameter <p9> + ^rtype single + ^args <a8> +
           ^result <r9> + ^attribute predicate + ^name opposite14 +
           ^type concept +)
    (<p9> ^num 1 + ^1 <i7> +)
    (<i7> ^param-id 3 + ^type single +)
    (<a8> ^num 1 + ^1 <i8> +)
    (<i8> ^negative false + ^parameter <p10> + ^rtype single + ^args <a9> +
           ^result <r8> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<p10> ^num 1 + ^1 <i9> +)
    (<i9> ^param-id 3 + ^type single +)
    (<a9> ^num 1 + ^1 <i10> +)
    (<i10> ^negative false + ^parameter <p11> + ^rtype single + ^args <a10> +
           ^result <r7> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p11> ^num 0 +)
    (<r7> ^set <s8> +)
    (<r8> ^set <s9> +)
    (<r9> ^set <s10> +)
    (<c3> ^negative false + ^parameter <p12> + ^rtype single + ^args <a11> +
           ^result <r11> + ^attribute shape + ^name boat1 + ^type attribute +)
    (<p12> ^num 1 + ^1 <i11> +)
    (<i11> ^param-id 1 + ^type single +)
    (<a11> ^num 1 + ^1 <i12> +)
    (<i12> ^negative false + ^parameter <p13> + ^rtype single + ^args <a12> +
           ^result <r10> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p13> ^num 0 +)
    (<r10> ^set <s11> +)
    (<r11> ^set <s12> +)
    (<v1> ^1 <i13> + ^1 <i14> +)
    (<i13> ^verb-prep on1 + ^verb-name move1 + ^2 3 + ^1 1 +)
    (<i14> ^verb-prep on1 + ^verb-name move1 + ^2 3 + ^1 2 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t3211-1
    :chunk
    (state <s1> ^retrieve-handle action-default10 ^gtype action)
    -->
    (<s1> ^action <a1> +)
    (<a1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^verb-structure <v1> +
           ^aname action-default10 + ^handle action-default10 +)
    (<p2> ^argnum 5 +)
    (<n1> ^conditions <c1> + ^conditions <i5> + ^conditions <c2> +
           ^conditions <c3> + ^aname action-default10 +)
    (<c1> ^negative false + ^parameter <p3> + ^rtype single + ^args <a2> +
           ^result <r4> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<p3> ^num 2 + ^2 <i1> + ^1 <i2> +)
    (<i1> ^param-id 1 + ^type single +)
    (<i2> ^param-id 4 + ^type single +)
    (<a2> ^num 2 + ^2 <i3> + ^1 <i6> +)
    (<i3> ^negative false + ^parameter <p4> + ^rtype single + ^args <a3> +
           ^result <r1> + ^attribute 2 + ^name argument +)
    (<p4> ^num 1 + ^1 <i4> +)
    (<i4> ^param-id 1 + ^type single +)
    (<a3> ^num 1 + ^1 <i5> +)
    (<r1> ^set <s2> +)
    (<i6> ^negative false + ^parameter <p5> + ^rtype single + ^args <a4> +
           ^result <r3> + ^attribute shape + ^name child1 + ^type attribute +)
    (<p5> ^num 0 +)
    (<a4> ^num 1 + ^1 <i7> +)
    (<i7> ^negative false + ^parameter <p6> + ^rtype single + ^args <a5> +
           ^result <r2> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
    (<i5> ^negative false + ^parameter <p7> + ^rtype single + ^args <a6> +
           ^result <r10> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<p7> ^num 2 + ^2 <i8> + ^1 <i9> +)
    (<i8> ^param-id 1 + ^type single +)
    (<i9> ^param-id 5 + ^type single +)
    (<a6> ^num 2 + ^2 <i10> + ^1 <i15> +)
    (<i10> ^negative false + ^parameter <p8> + ^rtype single + ^args <a7> +
           ^result <r7> + ^attribute predicate + ^name current11 +
           ^type concept +)
    (<p8> ^num 1 + ^1 <i11> +)
    (<i11> ^param-id 1 + ^type single +)
    (<a7> ^num 1 + ^1 <i12> +)
    (<i12> ^negative false + ^parameter <p9> + ^rtype single + ^args <a8> +
           ^result <r6> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<p9> ^num 1 + ^1 <i13> +)
    (<i13> ^param-id 1 + ^type single +)
    (<a8> ^num 1 + ^1 <i14> +)
    (<i14> ^negative false + ^parameter <p10> + ^rtype single + ^args <a9> +
           ^result <r5> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p10> ^num 0 +)
    (<r5> ^set <s6> +)
    (<r6> ^set <s7> +)
    (<r7> ^set <s8> +)
    (<i15> ^negative false + ^parameter <p11> + ^rtype single + ^args <a10> +
           ^result <r9> + ^attribute shape + ^name child1 + ^type attribute +)
    (<p11> ^num 0 +)
    (<a10> ^num 1 + ^1 <i16> +)
    (<i16> ^negative false + ^parameter <p12> + ^rtype single + ^args <a11> +
           ^result <r8> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p12> ^num 0 +)
    (<r8> ^set <s9> +)
    (<r9> ^set <s10> +)
    (<r10> ^set <s11> +)
    (<c2> ^negative false + ^parameter <p13> + ^rtype single + ^args <a12> +
           ^result <r13> + ^attribute predicate + ^name opposite14 +
           ^type concept +)
    (<p13> ^num 1 + ^1 <i17> +)
    (<i17> ^param-id 2 + ^type single +)
    (<a12> ^num 1 + ^1 <i18> +)
    (<i18> ^negative false + ^parameter <p14> + ^rtype single + ^args <a13> +
           ^result <r12> + ^attribute shape + ^name bank1 + ^type attribute +)
    (<p14> ^num 1 + ^1 <i19> +)
    (<i19> ^param-id 2 + ^type single +)
    (<a13> ^num 1 + ^1 <i20> +)
    (<i20> ^negative false + ^parameter <p15> + ^rtype single + ^args <a14> +
           ^result <r11> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p15> ^num 0 +)
    (<r11> ^set <s12> +)
    (<r12> ^set <s13> +)
    (<r13> ^set <s14> +)
    (<c3> ^negative false + ^parameter <p16> + ^rtype single + ^args <a15> +
           ^result <r15> + ^attribute shape + ^name boat1 + ^type attribute +)
    (<p16> ^num 1 + ^1 <i21> +)
    (<i21> ^param-id 3 + ^type single +)
    (<a15> ^num 1 + ^1 <i22> +)
    (<i22> ^negative false + ^parameter <p17> + ^rtype single + ^args <a16> +
           ^result <r14> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p17> ^num 0 +)
    (<r14> ^set <s15> +)
    (<r15> ^set <s16> +)
    (<v1> ^1 <i23> + ^1 <i24> + ^1 <i25> +)
    (<i23> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 4 +)
    (<i24> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 5 +)
    (<i25> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 3 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t2984-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name opposite14 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname opposite14 + ^handle opposite14 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname opposite14 +)
    (<c2> ^negative true + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r4> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a1> ^num 2 + ^2 <i2> + ^1 <i4> +)
    (<i2> ^negative false + ^parameter <p5> + ^rtype single + ^args <a2> +
           ^result <r2> + ^attribute shape + ^name boat1 + ^type attribute +)
    (<p5> ^num 0 +)
    (<a2> ^num 1 + ^1 <i3> +)
    (<i3> ^negative false + ^parameter <p6> + ^rtype single + ^args <a3> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<i4> ^input 1 + ^negative false + ^parameter <p7> + ^rtype single +
           ^args <a4> + ^result <r3> + ^attribute input-arg + ^name object +)
    (<p7> ^num 1 + ^1 <i5> +)
    (<i5> ^param-id 1 + ^type single +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t2966-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^handle <h1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative true ^rtype single ^name <h1> ^type state-pair ^args <a3>
          ^parameter <p3> ^result <r1> ^attribute <a4>)
    (<a3> ^num 2 ^1 <i1> ^2 <i2>)
    (<i1> -^rtype set ^result <r2>)
    (<p3> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<p2> ^instance <i5>)
      (<i5> ^1 <i4> ^2 <i6>)
      (<i2> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i7>)
      (<i7> ^1 <i6>)}
   -{ (<s3> ^instance { <i8> < <i3> })
      (<i8> ^1 <i4>)}
    -->
    (<s2> ^instance <i9> +)
    (<i9> ^1 <i4> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t2531-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r1> ^attribute <a4>)
    (<p3> ^num 2)
    (<a3> ^num 2 ^2 <i4> ^1 <i5>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i6>)
   -{ (<s3> ^instance { <i7> < <i6> })
      (<i7> ^1 <i3>)}
    (<i6> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i8>)
   -{ (<s4> ^instance { <i9> < <i8> })
      (<i9> ^1 <i2>)}
    (<i8> ^1 <i2>)
    -->
    (<s2> ^instance <i10> +)
    (<i10> ^2 <i2> + ^1 <i3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t2309-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name current11 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname current11 + ^handle current11 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname current11 +)
    (<c2> ^negative false + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r4> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a1> ^num 2 + ^2 <i2> + ^1 <i4> +)
    (<i2> ^negative false + ^parameter <p5> + ^rtype single + ^args <a2> +
           ^result <r2> + ^attribute shape + ^name boat1 + ^type attribute +)
    (<p5> ^num 0 +)
    (<a2> ^num 1 + ^1 <i3> +)
    (<i3> ^negative false + ^parameter <p6> + ^rtype single + ^args <a3> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<i4> ^input 1 + ^negative false + ^parameter <p7> + ^rtype single +
           ^args <a4> + ^result <r3> + ^attribute input-arg + ^name object +)
    (<p7> ^num 1 + ^1 <i5> +)
    (<i5> ^param-id 1 + ^type single +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t2291-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^name <h1> ^type state-pair ^args <a3>
          ^parameter <p3> ^result <r1> ^attribute <a4>)
    (<a3> ^num 2 ^2 <i4> ^1 <i5>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<p3> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i6>)
   -{ (<s3> ^instance { <i7> < <i6> })
      (<i7> ^1 <i3>)}
    (<i6> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i8>)
   -{ (<s4> ^instance { <i9> < <i8> })
      (<i9> ^1 <i2>)}
    (<i8> ^1 <i2>)
    -->
    (<s2> ^instance <i10> +)
    (<i10> ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1861-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n2> ^attribute <a4>)
    (<p1> ^num { <n1> < 2 })
    (<a3> ^1 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> ^<a4> <n2>)
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t1855-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> -^handle self)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <i1>)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^1 <o2> +)
}

sp {chunkx4*same-attribute*apply*complete*instance*OpNoChange*t2714-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<p2> ^<n2> <n3>)
   -{ (<i1> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i5>)
      (<i5> ^1 { <i6> > <i3> })
      (<i6> ^predicates <p3>)
      (<p3> ^<n2> <n3>)}
    -->
    (<s3> ^instance <i7> +)
    (<i7> ^2 <n3> + ^1 <i8> +)
}

sp {chunkx4*same-attribute*elaborate*results*instance*sets*object*OpNoChange*t2714-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i5> ^1 <i6>)
    (<p2> ^<n2> <i5>)
    -->
    (<i6> ^object <i3> +)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t5077-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i5> +)
    (<i5> ^2 <i3> + ^1 <i6> +)
}

sp {chunkx4*attribute-of*apply*complete*sets*OpNoChange*t5077-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i3> ^1 <i5>)
    (<i3> ^object <o1>)
    (<o1> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<i5> ^<a4> <n3> +)
}

sp {chunkx4*board-between*elaborate*instances*straight*single*OpNoChange*t3343-2
    :chunk
    (state <s1> ^diff-table <d1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<d1> ^diff <d2> ^diff <d3>)
    (<d2> ^result 2 ^pair <p1>)
    (<d3> ^result 1 ^pair <p2> ^pair <p3>)
    (<p1> ^num <n1> ^num { <n2> <> <n1> })
    (<p2> ^num <n1> ^num { <n3> <> <n2> <> <n1> })
    (<p3> ^num <n2> ^num <n3>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype single ^name between-exclusive
          ^type function ^args <a3> ^negative <n4> ^parameter <p4>
          ^result <r4>)
    (<a3> ^num 3 ^1 <i1> ^3 <i2> ^2 <i3>)
    (<i1> ^rtype single ^result <r3>)
    (<i2> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> > <i4> })
      (<i6> ^1 <i5>)}
    (<i5> ^predicates <p5>)
    (<i3> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 <i8>)
   -{ (<s3> ^instance { <i9> > <i7> })
      (<i9> ^1 <i8>)}
    (<i8> ^predicates <p6>)
    (<p5> ^{ <a4> << x y >> } <n1> ^{ <a5> << x y >> <> <a4> } <a6>)
    (<p6> ^<a4> <n2> ^<a5> <a6>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i10>)
    (<i10> ^1 <i11>)
   -{ (<s4> ^instance { <i12> > <i10> })
      (<i12> ^1 <i11>)}
    (<i11> ^predicates <p7>)
    (<p7> ^<a4> <n3> ^<a5> <a6>)
    (<r4> ^set <s5>)
    -->
    (<s5> ^instance <i13> +)
    (<i13> ^2 <i8> + ^3 <i5> + ^1 <i11> +)
}

sp {chunkx4*board-between*elaborate*object*instance*OpNoChange*t3035-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-exclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10> +)
    (<i10> ^1 <i11> + ^3 <i5> + ^2 <i8> +)
}

sp {chunkx4*board-between*elaborate*object*instance*inclusive*OpNoChange*t3015-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-inclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10> +)
    (<i10> ^1 <i11> + ^3 <i5> + ^2 <i8> +)
}

sp {chunkx4*soar-count*apply*complete*OpNoChange*t3021-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-count ^type function ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r2> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<i3> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i4> +)
    (<i4> ^1 (size <i3>) + ^2 <i3> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t57252-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type state-pair ^parameter <p1>
          ^args <a3> ^result <r2> ^name <n1> ^attribute <a4>)
    (<p1> ^num 2)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> -^rtype set ^result <r1>)
    (<i2> -^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<s2> ^instance { <i5> > <i3> })
      (<i5> ^1 <i4>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i6> +)
    (<i6> ^2 <i4> + ^1 <i7> +)
}

sp {chunkx4*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t57252-2
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r4> ^attribute <a4>)
    (<p3> ^num 2)
    (<a3> ^num 2 ^2 <i4> ^1 <i5> ^2 <i6> ^1 <i7>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<i6> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i8>)
    (<i8> ^1 <i9>)
   -{ (<s2> ^instance { <i10> > <i8> })
      (<i10> ^1 <i9>)}
    (<r2> ^set <s3>)
    (<s3> ^instance <i11>)
    (<i11> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i12>)
    (<i12> ^1 <i2>)
    (<r4> ^set <s5>)
    (<s5> ^instance <i13>)
    (<i13> ^2 <i2> ^1 <i14>)
    -->
    (<i14> ^object <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t10663-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n1> ^attribute <a4>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^2 <n1> + ^3 <a4> + ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*objects*OpNoChange*t10663-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r2> ^attribute <i5> ^name <i6>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^3 <i5> ^2 <i6> ^1 <i7>)
    (<p2> ^<i5> <i6>)
    -->
    (<i7> ^object <i3> +)
}



