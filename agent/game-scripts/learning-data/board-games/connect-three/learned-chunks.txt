sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t4966-3
    :chunk
    (state <s1> ^retrieve-game connect-x-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle action-default5 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t4966-2
    :chunk
    (state <s1> ^retrieve-game connect-x-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle goal-default16 +)
}

sp {chunk*chunk-puzzle-impasse*apply*complete*OpNoChange*t4966-1
    :chunk
    (state <s1> ^retrieve-game connect-x-31 -^opponent <o1>)
    -->
    (<s1> ^retrieve-handle failure-default27 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t4853-1
    :chunk
    (state <s1> ^retrieve-handle failure-default27 ^gtype failure)
    -->
    (<s1> ^failure I3180 +)
    (I3180 ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <n1> + ^aname failure-default27 +
           ^handle failure-default27 +)
    (<p2> ^argnum 2 +)
    (<n1> ^conditions <c1> + ^conditions <i2> + ^aname failure-default27 +)
    (<c1> ^negative false + ^parameter <p3> + ^rtype set + ^args <a1> +
           ^result <r1> + ^attribute predicate + ^name line20 +
           ^type concept +)
    (<p3> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 2 + ^type set +)
    (<a1> ^num 1 + ^1 <i2> +)
    (<r1> ^set <s2> +)
    (<i2> ^negative false + ^parameter <p4> + ^rtype set + ^args <a2> +
           ^result <r5> + ^function subset-of + ^name 3 + ^type function +)
    (<p4> ^num 2 + ^2 <i3> + ^1 <i4> +)
    (<i3> ^param-id 1 + ^type set +)
    (<i4> ^param-id 2 + ^type set +)
    (<a2> ^num 1 + ^2 <i5> +)
    (<i5> ^negative false + ^parameter <p5> + ^rtype set + ^args <a3> +
           ^result <r4> + ^attribute predicate + ^name occupied28 +
           ^type concept +)
    (<p5> ^num 1 + ^1 <i6> +)
    (<i6> ^param-id 1 + ^type set +)
    (<a3> ^num 1 + ^1 <i7> +)
    (<i7> ^negative false + ^parameter <p6> + ^rtype single + ^args <a4> +
           ^result <r3> + ^attribute category + ^name location +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<a4> ^num 1 + ^1 <i8> +)
    (<i8> ^negative false + ^parameter <p7> + ^rtype single + ^args <a5> +
           ^result <r2> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t4760-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name occupied28 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname occupied28 + ^handle occupied28 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname occupied28 +)
    (<c2> ^negative false + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r5> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a1> ^num 2 + ^2 <i2> + ^1 <i5> +)
    (<i2> ^negative false + ^parameter <p5> + ^rtype single + ^args <a2> +
           ^result <r3> + ^attribute color + ^name blue1 + ^type attribute +)
    (<p5> ^num 0 +)
    (<a2> ^num 1 + ^1 <i3> +)
    (<i3> ^negative false + ^parameter <p6> + ^rtype single + ^args <a3> +
           ^result <r2> + ^attribute category + ^name block +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<a3> ^num 1 + ^1 <i4> +)
    (<i4> ^negative false + ^parameter <p7> + ^rtype single + ^args <a4> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<i5> ^input 1 + ^negative false + ^parameter <p8> + ^rtype single +
           ^args <a5> + ^result <r4> + ^attribute input-arg + ^name object +)
    (<p8> ^num 0 +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t3680-1
    :chunk
    (state <s1> ^retrieve-handle goal-default16 ^gtype goal)
    -->
    (<s1> ^goal <g1> +)
    (<g1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype set + ^nlp-set <n1> + ^aname goal-default16 +
           ^handle goal-default16 +)
    (<p2> ^argnum 2 +)
    (<n1> ^conditions <c1> + ^conditions <i2> + ^aname goal-default16 +)
    (<c1> ^negative false + ^parameter <p3> + ^rtype set + ^args <a1> +
           ^result <r1> + ^attribute predicate + ^name line20 +
           ^type concept +)
    (<p3> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 2 + ^type set +)
    (<a1> ^num 1 + ^1 <i2> +)
    (<r1> ^set <s2> +)
    (<i2> ^negative false + ^parameter <p4> + ^rtype set + ^args <a2> +
           ^result <r5> + ^function subset-of + ^name 3 + ^type function +)
    (<p4> ^num 2 + ^2 <i3> + ^1 <i4> +)
    (<i3> ^param-id 1 + ^type set +)
    (<i4> ^param-id 2 + ^type set +)
    (<a2> ^num 1 + ^2 <i5> +)
    (<i5> ^negative false + ^parameter <p5> + ^rtype set + ^args <a3> +
           ^result <r4> + ^attribute predicate + ^name captured17 +
           ^type concept +)
    (<p5> ^num 1 + ^1 <i6> +)
    (<i6> ^param-id 1 + ^type set +)
    (<a3> ^num 1 + ^1 <i7> +)
    (<i7> ^negative false + ^parameter <p6> + ^rtype single + ^args <a4> +
           ^result <r3> + ^attribute category + ^name location +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<a4> ^num 1 + ^1 <i8> +)
    (<i8> ^negative false + ^parameter <p7> + ^rtype single + ^args <a5> +
           ^result <r2> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t3587-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name line20 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype set + ^nlp-set <n1> +
           ^aname line20 + ^handle line20 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname line20 +)
    (<c2> ^negative false + ^parameter <p4> + ^rtype set + ^args <a1> +
           ^result <r2> + ^attribute prepositions + ^name linear +
           ^type state-pair +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type set +)
    (<a1> ^num 1 + ^1 <i2> +)
    (<i2> ^input 1 + ^negative false + ^parameter <p5> + ^rtype set +
           ^args <a2> + ^result <r1> + ^attribute input-arg + ^name object +)
    (<p5> ^num 2 + ^1 <i3> + ^1 <i4> +)
    (<i3> ^param-id 1 + ^type set +)
    (<i4> ^param-id 1 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t3569-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^1 <i2>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^name <h1> ^type state-pair ^args <a3>
          ^parameter <p3> ^result <r1> ^attribute <a12>)
    (<a3> ^num 1 ^1 <i3>)
    (<i3> ^rtype set ^result <r2>)
    (<p3> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<i5> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
   -{ (<i5> ^<a8> <a9>)
      (<i2> -^<a8> <a9>)}
   -{ (<i2> ^<a10> <a11>)
      (<i5> -^<a10> <a11>)}
   -{ (<s3> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    -->
    (<s2> ^instance <i7> +)
    (<i7> ^1 <i5> +)
}

sp {chunkx4*subset-of*elaborate*object*instance*OpNoChange*t3170-1
    :chunk
    (state <s1> ^list <l1> ^top-state <t1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<t1> ^dialog-context <d1>)
    (<a2> ^condition <c1>)
    (<c1> ^function subset-of ^rtype set ^name 3 ^type function ^args <a3>
          ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> ^num 1 ^2 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^<a4> <a5> ^<a6> { <a7> > <a5> } ^<a8> { <a9> > <a7> })
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^2 <i3> + ^1 <i6> +)
    (<i6> ^object <a9> + ^object <a7> + ^object <a5> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t3080-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name captured17 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname captured17 + ^handle captured17 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname captured17 +)
    (<c2> ^negative false + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r5> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a1> ^num 2 + ^2 <i2> + ^1 <i5> +)
    (<i2> ^negative false + ^parameter <p5> + ^rtype single + ^args <a2> +
           ^result <r3> + ^attribute color + ^name red1 + ^type attribute +)
    (<p5> ^num 0 +)
    (<a2> ^num 1 + ^1 <i3> +)
    (<i3> ^negative false + ^parameter <p6> + ^rtype single + ^args <a3> +
           ^result <r2> + ^attribute category + ^name block +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<a3> ^num 1 + ^1 <i4> +)
    (<i4> ^negative false + ^parameter <p7> + ^rtype single + ^args <a4> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<i5> ^input 1 + ^negative false + ^parameter <p8> + ^rtype single +
           ^args <a5> + ^result <r4> + ^attribute input-arg + ^name object +)
    (<p8> ^num 0 +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t3062-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^name <h1> ^type state-pair ^args <a3>
          ^parameter <p3> ^result <r1> ^attribute <a4>)
    (<a3> ^num 2 ^2 <i4> ^1 <i5>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<p3> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i6>)
   -{ (<s3> ^instance { <i7> < <i6> })
      (<i7> ^1 <i3>)}
    (<i6> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i8>)
   -{ (<s4> ^instance { <i9> < <i8> })
      (<i9> ^1 <i2>)}
    (<i8> ^1 <i2>)
    -->
    (<s2> ^instance <i10> +)
    (<i10> ^1 <i3> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*action*OpNoChange*t1990-1
    :chunk
    (state <s1> ^retrieve-handle action-default5 ^gtype action)
    -->
    (<s1> ^action <a1> +)
    (<a1> ^potential-args <p1> + ^parameter-set <p2> + ^formated predicate +
           ^primary-rtype single + ^nlp-set <n1> + ^verb-structure <v1> +
           ^aname action-default5 + ^handle action-default5 +)
    (<p2> ^argnum 2 +)
    (<n1> ^conditions <c1> + ^conditions <c2> + ^aname action-default5 +)
    (<c1> ^negative false + ^parameter <p3> + ^rtype single + ^args <a2> +
           ^result <r5> + ^attribute predicate + ^name clear9 +
           ^type concept +)
    (<p3> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a2> ^num 1 + ^1 <i2> +)
    (<i2> ^negative false + ^parameter <p4> + ^rtype single + ^args <a3> +
           ^result <r4> + ^attribute predicate + ^name available6 +
           ^type concept +)
    (<p4> ^num 1 + ^1 <i3> +)
    (<i3> ^param-id 1 + ^type single +)
    (<a3> ^num 1 + ^1 <i4> +)
    (<i4> ^negative false + ^parameter <p5> + ^rtype single + ^args <a4> +
           ^result <r3> + ^attribute color + ^name red1 + ^type attribute +)
    (<p5> ^num 1 + ^1 <i5> +)
    (<i5> ^param-id 1 + ^type single +)
    (<a4> ^num 1 + ^1 <i6> +)
    (<i6> ^negative false + ^parameter <p6> + ^rtype single + ^args <a5> +
           ^result <r2> + ^attribute category + ^name block +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<a5> ^num 1 + ^1 <i7> +)
    (<i7> ^negative false + ^parameter <p7> + ^rtype single + ^args <a6> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p7> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
    (<r5> ^set <s6> +)
    (<c2> ^negative false + ^parameter <p8> + ^rtype single + ^args <a7> +
           ^result <r8> + ^attribute predicate + ^name clear9 +
           ^type concept +)
    (<p8> ^num 1 + ^1 <i8> +)
    (<i8> ^param-id 2 + ^type single +)
    (<a7> ^num 1 + ^1 <i9> +)
    (<i9> ^negative false + ^parameter <p9> + ^rtype single + ^args <a8> +
           ^result <r7> + ^attribute category + ^name location +
           ^type attribute +)
    (<p9> ^num 0 +)
    (<a8> ^num 1 + ^1 <i10> +)
    (<i10> ^negative false + ^parameter <p10> + ^rtype single + ^args <a9> +
           ^result <r6> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p10> ^num 0 +)
    (<r6> ^set <s7> +)
    (<r7> ^set <s8> +)
    (<r8> ^set <s9> +)
    (<v1> ^1 <i11> +)
    (<i11> ^verb-prep on1 + ^verb-name move1 + ^2 2 + ^1 1 +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1857-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name clear9 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname clear9 + ^handle clear9 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname clear9 +)
    (<c2> ^negative true + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r3> + ^attribute prepositions + ^name below1 +
           ^type state-pair +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a1> ^num 2 + ^2 <i2> + ^1 <i3> +)
    (<i2> ^negative false + ^parameter <p5> + ^rtype single + ^args <a2> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<r1> ^set <s2> +)
    (<i3> ^input 1 + ^negative false + ^parameter <p6> + ^rtype single +
           ^args <a3> + ^result <r2> + ^attribute input-arg + ^name object +)
    (<p6> ^num 0 +)
    (<r2> ^set <s3> +)
    (<r3> ^set <s4> +)
}

sp {chunk*chunk-predicate-impasse*apply*complete*OpNoChange*t1300-1
    :chunk
    (state <s1> ^gtype <g1> ^<g1> <g2>)
    (<g2> ^condition <c1>)
    (<c1> ^name available6 ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <n1> +
           ^aname available6 + ^handle available6 +)
    (<p3> ^argnum 1 +)
    (<n1> ^conditions <c2> + ^aname available6 +)
    (<c2> ^negative true + ^parameter <p4> + ^rtype single + ^args <a1> +
           ^result <r4> + ^attribute prepositions + ^name on1 +
           ^type state-pair +)
    (<p4> ^num 1 + ^1 <i1> +)
    (<i1> ^param-id 1 + ^type single +)
    (<a1> ^num 2 + ^2 <i2> + ^1 <i4> +)
    (<i2> ^negative false + ^parameter <p5> + ^rtype single + ^args <a2> +
           ^result <r2> + ^attribute category + ^name location +
           ^type attribute +)
    (<p5> ^num 0 +)
    (<a2> ^num 1 + ^1 <i3> +)
    (<i3> ^negative false + ^parameter <p6> + ^rtype single + ^args <a3> +
           ^result <r1> + ^attribute primitive + ^name object +
           ^type attribute +)
    (<p6> ^num 0 +)
    (<r1> ^set <s2> +)
    (<r2> ^set <s3> +)
    (<i4> ^input 1 + ^negative false + ^parameter <p7> + ^rtype single +
           ^args <a4> + ^result <r3> + ^attribute input-arg + ^name object +)
    (<p7> ^num 1 + ^1 <i5> +)
    (<i5> ^param-id 1 + ^type single +)
    (<r3> ^set <s4> +)
    (<r4> ^set <s5> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t1282-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^handle <h1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative true ^rtype single ^name <h1> ^type state-pair ^args <a3>
          ^parameter <p3> ^result <r1> ^attribute <a4>)
    (<a3> ^num 2 ^1 <i1> ^2 <i2>)
    (<i1> -^rtype set ^result <r2>)
    (<p3> ^num { <n1> < 2 })
    (<r1> ^set <s2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<p2> ^instance <i5>)
      (<i5> ^1 <i4> ^2 <i6>)
      (<i2> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i7>)
      (<i7> ^1 <i6>)}
   -{ (<s3> ^instance { <i8> < <i3> })
      (<i8> ^1 <i4>)}
    -->
    (<s2> ^instance <i9> +)
    (<i9> ^1 <i4> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t859-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype single ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n2> ^attribute <a4>)
    (<p1> ^num { <n1> < 2 })
    (<a3> ^1 <i1>)
    (<r1> ^set <s2>)
    (<i1> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s3> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<p2> ^<a4> <n2>)
    -->
    (<s2> ^instance <i5> +)
    (<i5> ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t853-1
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^objects <o1>)
    (<o1> ^object <o2>)
    (<o2> -^handle self)
    (<a2> ^condition <c1>)
    (<c1> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <n1> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <i1>)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^1 <o2> +)
}

sp {chunkx4*same-attribute*apply*complete*instance*OpNoChange*t2714-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<p2> ^<n2> <n3>)
   -{ (<i1> ^result <r3>)
      (<r3> ^set <s4>)
      (<s4> ^instance <i5>)
      (<i5> ^1 { <i6> > <i3> })
      (<i6> ^predicates <p3>)
      (<p3> ^<n2> <n3>)}
    -->
    (<s3> ^instance <i7> +)
    (<i7> ^2 <n3> + ^1 <i8> +)
}

sp {chunkx4*same-attribute*elaborate*results*instance*sets*object*OpNoChange*t2714-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type same-attribute ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i5> ^1 <i6>)
    (<p2> ^<n2> <i5>)
    -->
    (<i6> ^object <i3> +)
}

sp {chunkx4*attribute-of*apply*complete*OpNoChange*t5077-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<s2> ^instance { <i4> < <i2> })
      (<i4> ^1 <i3>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i5> +)
    (<i5> ^2 <i3> + ^1 <i6> +)
}

sp {chunkx4*attribute-of*apply*complete*sets*OpNoChange*t5077-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^rtype set ^type attribute-of ^args <a3> ^negative <n1>
          ^parameter <p1> ^result <r2> ^name <n2>)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^2 <i3> ^1 <i5>)
    (<i3> ^object <o1>)
    (<o1> ^predicates <p2>)
    (<p2> ^<n2> <n3>)
    -->
    (<i5> ^<a4> <n3> +)
}

sp {chunkx4*board-between*elaborate*instances*straight*single*OpNoChange*t3343-2
    :chunk
    (state <s1> ^diff-table <d1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<d1> ^diff <d2> ^diff <d3>)
    (<d2> ^result 2 ^pair <p1>)
    (<d3> ^result 1 ^pair <p2> ^pair <p3>)
    (<p1> ^num <n1> ^num { <n2> <> <n1> })
    (<p2> ^num <n1> ^num { <n3> <> <n2> <> <n1> })
    (<p3> ^num <n2> ^num <n3>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype single ^name between-exclusive
          ^type function ^args <a3> ^negative <n4> ^parameter <p4>
          ^result <r4>)
    (<a3> ^num 3 ^1 <i1> ^3 <i2> ^2 <i3>)
    (<i1> ^rtype single ^result <r3>)
    (<i2> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> > <i4> })
      (<i6> ^1 <i5>)}
    (<i5> ^predicates <p5>)
    (<i3> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 <i8>)
   -{ (<s3> ^instance { <i9> > <i7> })
      (<i9> ^1 <i8>)}
    (<i8> ^predicates <p6>)
    (<p5> ^{ <a4> << x y >> } <n1> ^{ <a5> << x y >> <> <a4> } <a6>)
    (<p6> ^<a4> <n2> ^<a5> <a6>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i10>)
    (<i10> ^1 <i11>)
   -{ (<s4> ^instance { <i12> > <i10> })
      (<i12> ^1 <i11>)}
    (<i11> ^predicates <p7>)
    (<p7> ^<a4> <n3> ^<a5> <a6>)
    (<r4> ^set <s5>)
    -->
    (<s5> ^instance <i13> +)
    (<i13> ^2 <i8> + ^3 <i5> + ^1 <i11> +)
}

sp {chunkx4*board-between*elaborate*object*instance*OpNoChange*t3035-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-exclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10> +)
    (<i10> ^1 <i11> + ^3 <i5> + ^2 <i8> +)
}

sp {chunkx4*board-between*elaborate*object*instance*inclusive*OpNoChange*t3015-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function board-between ^rtype set ^name between-inclusive
          ^type function ^args <a3> ^negative <n1> ^parameter <p1>
          ^result <r3>)
    (<a3> ^num 3 ^3 <i1> ^2 <i2> ^1 <i3>)
    (<i1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i4>)
    (<i4> ^1 <i5>)
   -{ (<s2> ^instance { <i6> < <i4> })
      (<i6> ^1 <i5>)}
    (<i2> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i7>)
    (<i7> ^1 { <i8> <> <i5> })
   -{ (<s3> ^instance { <i9> < <i7> })
      (<i9> ^1 <i8>)}
    (<r3> ^set <s4>)
    -->
    (<s4> ^instance <i10> +)
    (<i10> ^1 <i11> + ^3 <i5> + ^2 <i8> +)
}

sp {chunkx4*soar-count*apply*complete*OpNoChange*t3021-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^function soar-count ^type function ^parameter <p1> ^args <a3>
          ^negative <n1> ^result <r2> ^name <n2>)
    (<p1> ^num 2)
    (<a3> ^num 1 ^2 <i1>)
    (<i1> ^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
   -{ (<i3> -^<a4> <a5>)
      (<s1> ^<a6> <a7>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i4> +)
    (<i4> ^1 (size <i3>) + ^2 <i3> +)
}

sp {chunkx4*top-pair*apply*complete*OpNoChange*t57252-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type state-pair ^parameter <p1>
          ^args <a3> ^result <r2> ^name <n1> ^attribute <a4>)
    (<p1> ^num 2)
    (<a3> ^num 2 ^2 <i1> ^1 <i2>)
    (<i1> -^rtype set ^result <r1>)
    (<i2> -^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^instance <i3>)
    (<i3> ^1 <i4>)
   -{ (<s2> ^instance { <i5> > <i3> })
      (<i5> ^1 <i4>)}
    (<r2> ^set <s3>)
    -->
    (<s3> ^instance <i6> +)
    (<i6> ^2 <i4> + ^1 <i7> +)
}

sp {chunkx4*top-pair*with-type*1param*set*noarg-set1*apply*OpNoChange*t57252-2
    :chunk
    (state <s1> ^list <l1> ^world <w1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<w1> ^predicates <p1>)
    (<p1> ^predicate <p2>)
    (<p2> ^instance <i1> ^handle <h1>)
    (<i1> ^2 <i2> ^1 <i3>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^name <h1> ^type state-pair
          ^parameter <p3> ^args <a3> ^result <r4> ^attribute <a4>)
    (<p3> ^num 2)
    (<a3> ^num 2 ^2 <i4> ^1 <i5> ^2 <i6> ^1 <i7>)
    (<i4> -^rtype set ^result <r3>)
    (<i5> -^rtype set ^result <r2>)
    (<i6> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i8>)
    (<i8> ^1 <i9>)
   -{ (<s2> ^instance { <i10> > <i8> })
      (<i10> ^1 <i9>)}
    (<r2> ^set <s3>)
    (<s3> ^instance <i11>)
    (<i11> ^1 <i3>)
    (<r3> ^set <s4>)
    (<s4> ^instance <i12>)
    (<i12> ^1 <i2>)
    (<r4> ^set <s5>)
    (<s5> ^instance <i13>)
    (<i13> ^2 <i2> ^1 <i14>)
    -->
    (<i14> ^object <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*OpNoChange*t10663-1
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r1> ^name <n1> ^attribute <a4>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i2> +)
    (<i2> ^2 <n1> + ^3 <a4> + ^1 <i3> +)
}

sp {chunkx4*with-attribute*apply*complete*instance*objects*OpNoChange*t10663-2
    :chunk
    (state <s1> ^list <l1>
          ^{ <a1> << action goal predicate failure heuristic >> } <a2>)
    (<l1> ^game <g1>)
    (<a2> ^condition <c1>)
    (<c1> ^negative false ^rtype set ^type attribute ^parameter <p1>
          ^args <a3> ^result <r2> ^attribute <i5> ^name <i6>)
    (<a3> ^1 <i1>)
    (<i1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <i2>)
    (<i2> ^1 <i3>)
    (<i3> ^predicates <p2>)
    (<r2> ^set <s3>)
    (<s3> ^instance <i4>)
    (<i4> ^3 <i5> ^2 <i6> ^1 <i7>)
    (<p2> ^<i5> <i6>)
    -->
    (<i7> ^object <i3> +)
}



