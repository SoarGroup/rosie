
sp {learn-whenever-task*propose*create-task-stack
   (state <s> ^name learn-whenever-task
             -^task-stack 
              ^task-concept-network <tcn>
              ^stored <tcn>
              ^reference-task-op <task-op>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-task-stack
        ^task-operator <task-op>)
}

sp {learn-whenever-task*elaborate*create-task-stack*new-task-operator
   (state <s> ^name learn-whenever-task
              ^operator <o> +)
   (<o> ^name create-task-stack)
-->
   (<o> ^new-task-operator <task-op>)
}

sp {learn-whenever-task*apply*create-task-stack
   (state <s> ^name learn-whenever-task
              ^operator <o>)
   (<o> ^name create-task-stack
        ^task-operator <task-op>
        ^new-task-operator <new-task>)
-->
   (<s> ^task-stack <stack>)
   (<stack> ^top <seg>
            ^bottom <seg>
            ^changes <chgs>
            ^new-task-segment <new-seg>
            ^task-objects <objs>
            ^segments <segs>)
   (<seg> ^prev none
          ^next none
          ^depth 1
          ^task-operator <task-op>)
   (<segs> ^segment <seg>)
   (<task-op>.handle ^current-goal first)
   (<new-seg> ^task-source instruction
              ^task-operator <new-task>)
}

sp {learn-whenever-task*apply*create-task-stack*copy*new-task-operator*args
   (state <s> ^name learn-whenever-task
              ^operator <o>
              ^whenever-segment.task-operator.{ <att> <> conditions } <val>)
   (<o> ^name create-task-stack
        ^new-task-operator <new-task>)
-->
   (<new-task> ^<att> <val>)
}

