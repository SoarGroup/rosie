

# AM: @DEL: learning words is done in the parser
#############################################################
##
## learn-word
##
#############################################################
#
#sp {learning-event*propose*learn-word
#   (state <s> ^name learning-event
#              ^purpose <p>)
#   (<p> ^type learn-word
#        ^parameters.word <word>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-word
#        ^word <word>
#        ^category smem)
#}

############################################################
#
# train-on-object
#
############################################################

sp {learning-event*propose*train-on-object
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type train-on-object
        ^parameters.object <obj>)
-->
   (<s> ^operator <o> +)
   (<o> ^name train-on-object
        ^object <obj>)
}

sp {learning-event*elaborate*train-on-object*predicate
   (state <s> ^name learning-event
              ^operator <o> +
              ^purpose.parameters.predicate <pred>)
   (<o> ^name train-on-object)
-->
   (<o> ^predicate <pred>)
}

############################################################
#
# learn-location
#
############################################################

sp {learning-event*propose*learn-location
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type teach-location
        ^parameters.location-id <loc>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-location
        ^location-id <loc>)
}

############################################################
#
# learn-conditional-subtask
#
############################################################

sp {learning-event*propose*learn-conditional-subtask
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^satisfaction.learning-event.type conditional-subtask
        ^parameters <params>)
   (<params> ^command-message <command>
             ^conditions <conds>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-conditional-subtask
        ^conditions <conds>
        ^command <command>)
}

############################################################
#
# learn-whenever-task
#
############################################################

sp {learning-event*propose*learn-whenever-task
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^satisfaction.learning-event.type whenever-task
        ^parameters <params>)
   (<params> ^command-message <command>
             ^conditions <conds>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-whenever-task
        ^conditions <conds>
        ^command <command>)
}

############################################################
#
# retrospective-learning
# Implementation is in problem-space/action/subproblem-retrospective
#
############################################################

sp {learning-event*propose*retrospective-learning
   (state <s> ^name learning-event
              ^purpose.type retrospective-learning
              ^purpose.parameters.task-segment.task-operator.task-handle <task-h>)
-->
   (<s> ^operator <o> +)
   (<o> ^name retrospective-learning
        ^task-handle <task-h>)
}


############################################################
#
# equate-objects
#
############################################################

sp {learning-event*propose*equate-objects
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type equate-objects
        ^parameters <params>)
  (<params> ^object1 <obj1>
            ^object2 <obj2>)
-->
   (<s> ^operator <o> +)
   (<o> ^name equate-objects
        ^object1 <obj1>
        ^object2 <obj2>)
}



############################################################
#
# learn-preposition
#
############################################################
sp {learning-event*propose*learn-preposition
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type teach-relation
        ^parameters <params>)
   (<params> ^object <obj>
             ^relation <rel>)
   (<rel> ^arg2 <obj2> ^id <lti-rel>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name learn-preposition
        ^relation-lti <lti-rel>
        ^arg1 <obj>
        ^arg2 <obj2>)
}

# learn-predicate-info

sp {learning-event*propose*learn-predicate-info
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type learn-predicate-info
        ^parameters <params>)
   (<params> ^predicate-id <pred>
             ^property-id <prop>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name learn-predicate-info
        ^predicate-id <pred>
        ^property-id <prop>)
}


sp {learning-event*propose*learn-goal-definition
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type learn-goal-definition)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-goal-definition)
}

sp {learning-event*propose*modify-attend-ignore-list*attend
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type modify-attend-list ^parameters.message <msg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name modify-attend-ignore-list
        ^type attend
        ^message <msg>)
}
sp {learning-event*propose*modify-attend-ignore-list*ignore
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type modify-ignore-list ^parameters.message <msg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name modify-attend-ignore-list
        ^type ignore
        ^message <msg>)
}
sp {learning-event*apply*modify-attend-ignore-list*modified-true
   (state <s> ^name learning-event
              ^operator <o> 
              ^top-state.dialog-context <dc>)
   (<o> ^name modify-attend-ignore-list)
-->
   (<dc> ^modified true)
}

sp {learning-event*apply*modify-attend-ignore-list*relation
   (state <s> ^name learning-event
              ^operator <o> 
              ^top-state.dialog-context.<type> <at>)
   (<o> ^name modify-attend-ignore-list ^type <type> ^message <msg>)
   (<msg> ^arg1 <arg1>)
   (<arg1> ^handle relation ^relation <r>)
   (<r> ^handle named ^2 <name>)
-->
   (<at> ^relation <name>)
}

sp {learning-event*apply*modify-attend-ignore-list*object
   (state <s> ^name learning-event
              ^operator <o>
              ^top-state.dialog-context.<type> <at>)
   (<o> ^name modify-attend-ignore-list ^type <type> ^message <msg>)
   (<msg> ^arg1.{2} <obj>)
   (<obj> ^item-type << object block location >>)
-->
   (<at> ^object <obj>)
}
sp {learning-event*apply*modify-attend-ignore-list*object*direct
   (state <s> ^name learning-event
              ^operator <o>
              ^top-state.dialog-context.<type> <at>)
   (<o> ^name modify-attend-ignore-list ^type <type> ^message <msg>)
   (<msg> ^arg1 <obj>)
   (<obj> ^item-type << object block location >>)
-->
   (<at> ^object <obj>)
}

sp {learning-event*apply*modify-attend-ignore-list*send-message
   (state <s> ^name learning-event
              ^operator.name modify-attend-ignore-list
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type ok
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}

sp {learning-event*propose*learn-teacher-name
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type learn-teacher-name ^parameters.message <msg>)
   (<msg> ^predicate <p>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-teacher-name
        ^predicate <p>)
}

sp {learning-event*apply*learn-teacher-name*send-message
   (state <s> ^name learning-event
              ^operator <o>
              ^top-state <ts>)
   (<ts> ^interaction <i>)
   (<i> ^status <status> ^changes <changes>)
   (<o> ^name learn-teacher-name
        ^predicate <p>)
   (<p> ^word-structure.spelling <word>)
-->
   (<ts> ^teacher-name <word>)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-teacher-name
          ^complete-message true
          ^fields.word <word>)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}

sp {learning-event*propose*learn-goal-demonstration*initial
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type learn-goal-initial-state)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-goal-demonstration
        ^type initial)
}
sp {learning-event*propose*learn-goal-demonstration*final
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type learn-goal-final-state)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-goal-demonstration
        ^type final)
}

sp {learning-event*propose*finished-game-teaching*retrieval
   (state <s> ^name learning-event
              ^retrieve-game <name>
              ^retrieve-handle
              ^multiplayer <mult>
              ^purpose <p>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name finished-game-teaching
        ^multiplayer <mult>
        ^game-name <name>
        ^type replay-game)
}

sp {learning-event*propose*finished-game-teaching
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type finished-game-teaching)
-->
   (<s> ^operator <o> +)
   (<o> ^name finished-game-teaching
        ^type game)
}

sp {learning-event*propose*finished-game-teaching*learned
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type finished-game-learning ^parameters.message <yesno>)
-->
#(interrupt)
#(write (cmd print -fc))
   (<s> ^operator <o> +)
   (<o> ^name finished-game-teaching
        ^response <yesno>)
}

sp {learning-event*propose*learn-game-name
   (state <s> ^name learning-event
              ^retrieve-game <name>
             -^retrieve-handle
             -^top-state.new-spelling
              ^purpose <p>)
   (<p> ^type learn-game-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name store-predicate-structure
        ^type game
        ^storing name
        ^handle <name>
        ^message <msg>)
}
sp {learning-event*elaborate*game-retrieval
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type learn-game-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
-->
   (<s> ^retrieve-game <name> ^opponent false ^multiplayer true)
}

sp {learning-event*elaborate*puzzle-retrieval
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type learn-puzzle-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
-->
   (<s> ^retrieve-game <name> ^multiplayer false)
}
   
sp {learning-event*propose*learn-puzzle-name
   (state <s> ^name learning-event
              ^retrieve-game <name>
              -^retrieve-handle
              ^purpose <p>)
   (<p> ^type learn-puzzle-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name store-predicate-structure
        ^type puzzle
        ^storing name
        ^handle <name>
        ^message <msg>)
}
sp {learning-event*propose*learn-action-name
   (state <s> ^name learning-event
              -^top-state.new-spelling
              -^finished-learning
              ^purpose <p>)
   (<p> ^type learn-action-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name store-predicate-structure
        ^type action
        ^storing name
        ^handle <name>
        ^message <msg>)
}
sp {learning-event*propose*learn-goal-name
   (state <s> ^name learning-event
              -^top-state.new-spelling
               -^finished-learning
              ^purpose <p>)
   (<p> ^type learn-goal-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name store-predicate-structure
        ^type goal
        ^storing name
        ^handle <name>
        ^message <msg>)
}

sp {learning-event*propose*learn-predicate*goal*after-new-term
   (state <s> ^name learning-event
              ^top-state.new-spelling true
              ^top-state.dialog-context <dc>
              ^purpose <p>)
   (<p> ^type learn-goal-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
   (<dc> ^learn-link <ll> -^finalize-chunk)# <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name transfer-final
        ^structure <ll>
        ^type goal)
}

sp {learning-event*propose*learn-predicate*failure*after-new-term
   (state <s> ^name learning-event
              ^top-state.new-spelling true
              ^top-state.dialog-context <dc>
              ^purpose <p>)
   (<p> ^type learn-failure-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
   (<dc> ^learn-link <ll> -^finalize-chunk)# <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name transfer-final
        ^structure <ll>
        ^type failure)
}
sp {learning-event*propose*learn-predicate*action*after-new-term
   (state <s> ^name learning-event
              ^top-state.new-spelling true
              ^top-state.dialog-context <dc>
              ^purpose <p>)
   (<p> ^type learn-action-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
   (<dc> ^learn-link <ll> -^finalize-chunk)# <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name transfer-final
        ^structure <ll>
        ^type action)
}

sp {learning-event*propose*learn-failure-name
   (state <s> ^name learning-event
              -^top-state.new-spelling
              -^finished-learning
              ^purpose <p>)
   (<p> ^type learn-failure-name ^parameters.message <msg>)
   (<msg> ^predicate.handle <name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name store-predicate-structure
        ^type failure
        ^storing name
        ^handle <name>
        ^message <msg>)
}
sp {learning-event*propose*finished-learninginterrupt
   (state <s> ^superstate <ss>)
(<ss> ^name learning-eventXX
             ^finished-learning action)
-->
(interrupt)
(write (cmd print <s> -d 10))
}
sp {learning-event*propose*finished-learning
   (state <s> ^name learning-event
            -^top-state.dialog-context.finalize-chunk
             ^finished-learning <type>)
-->
    (<s> ^operator <o1> + >)
    (<o1> ^name finished-learning
          ^type <type>)
}

sp {learning-event*propose*learn-predicate*goal
   (state <s> ^name learning-event
             -^finished-learning goal
              -^top-state.dialog-context.finalize-chunk
            # -^top-state.dialog-context.needs-goal-setup
              ^purpose <p>)
   (<p> ^type learn-goal-predicate ^parameters.message <msg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-predicate
        ^message <msg>
        ^type goal)
}

sp {learning-event*propose*learn-predicate*failure
   (state <s> ^name learning-event
             -^finished-learning failure
             -^top-state.dialog-context.finalize-chunk
            # -^top-state.dialog-context.needs-failure-setup
              ^purpose <p>)
   (<p> ^type learn-failure-predicate ^parameters.message <msg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-predicate
        ^message <msg>
        ^type failure)
}

sp {learning-event*apply*learn-predicate*goal*clean-setup
   (state <s> ^name learning-event
              ^operator.name learn-predicate
               ^top-state.dialog-context <dc>)
   (<dc> ^needs-goal-setup <t>
         ^parsed-goal <m>)
-->
    (<dc> ^needs-goal-setup <t> -)
    (<dc> ^parsed-goal <m> -)
}

sp {learning-event*apply*learn-predicate*failure*clean-setup
   (state <s> ^name learning-event
              ^operator.name learn-predicate
               ^top-state.dialog-context <dc>)
   (<dc> ^needs-failure-setup <t>
         ^parsed-failure <m>)
-->
    (<dc> ^needs-failure-setup <t> -)
    (<dc> ^parsed-failure <m> -)
}

sp {learning-event*propose*learn-search-depth
   (state <s> ^name learning-event
              ^purpose <p>)
   (<p> ^type learn-start-depth ^parameters.message <msg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-search-depth
        ^message <msg>)
}

sp {learning-event*apply*learn-search-depth
:o-support
   (state <s> ^name learning-event
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name learn-search-depth ^message <msg>)
   (<ts> ^dialog-context <dc> 
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<msg> ^task-operator.handle << has1 has >> ^agent.handle << solution solution1 >> ^arg1.predicates <p>)
   (<p> ^shape << steps steps1 >> ^number <n2>)
   (<dc> ^structure <st>)   
-->
   (<st> ^start-search-depth <n2>)
   (<changes> ^outgoing-message <msgr>)
   (<msgr> ^type ok
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game)
}

sp {learning-event*apply*learn-search-depth*2
:o-support
   (state <s> ^name learning-event
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name learn-search-depth ^message <msg>)
   (<ts> ^dialog-context <dc> 
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<msg> ^action.handle << has1 has >> ^agent.predicates.category << solution solution1 >> ^arg1.predicates <p>)
   (<p> ^shape << steps steps1 >> ^number <n2>)
   (<dc> ^structure <st>)   
-->
   (<st> ^start-search-depth <n2>)
   (<changes> ^outgoing-message <msgr>)
   (<msgr> ^type ok
           ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game)
}

sp {learning-event*propose*learn-predicate*action
   (state <s> ^name learning-event
             -^top-state.dialog-context.finalize-chunk
             -^finished-learning action
              ^purpose <p>)
   (<p> ^type learn-action-predicate ^parameters.message <msg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-predicate
        ^message <msg>
        ^type action)
}
sp {learning-event*apply*chunk-predicate-structure
   (state <s> ^name learning-event
              ^operator.name chunk-predicate-structure
              ^store-link <dd>)
-->
(<s> ^store-link <dd> -)
}

sp {learning-event*propose*chunk-predicate-structure*new-spelling
   (state <s> ^name learning-event
              -^<type>.handle <h>
               ^top-state.new-spelling
              ^finished-learning <type>
              ^top-state.dialog-context.finalize-chunk <h>
              ^purpose <p>)
   (<p> ^type << learn-goal-name learn-action-name learn-failure-name >> )
-->
    (<s> ^operator <o> + =)
    (<o> ^name chunk-predicate-structure
         ^gtype <type>
         ^predicate-handle <h>)
}
sp {learning-event*propose*chunk-predicate-structure*names
   (state <s> ^name learning-event
              -^<type>.handle <h>
              -^top-state.new-spelling
              ^finished-learning <type>
              ^top-state.dialog-context.finalize-chunk <h>
              ^purpose <p>)
   (<p> ^type << learn-goal-name learn-action-name learn-failure-name >> )
-->
    (<s> ^operator <o> + =)
    (<o> ^name chunk-predicate-structure
         ^gtype <type>
         ^predicate-handle <h>)
}
   
sp {learning-event*propose*chunk-predicate-structure
   (state <s> ^name learning-event
              -^<type>.handle <h>
              ^finished-learning <type>
              ^top-state.dialog-context.finalize-chunk <h>
              ^purpose <p>)
   (<p> ^type << learn-action-predicate learn-heuristic-predicate learn-goal-predicate learn-failure-predicate >> )
-->
    (<s> ^operator <o> + =)
    (<o> ^name chunk-predicate-structure
         ^gtype <type>
         ^predicate-handle <h>)
}

sp {learning-event*propose*chunk-predicate-structure*property
   (state <s> ^name learning-event
              -^<type>.handle <h>
              ^finished-learning <type>
              ^top-state.dialog-context.finalize-chunk <h>
              ^gtype action
              ^action <a>
              ^purpose <p>)
   (<p> ^type << learn-property-predicate >> )
-->
    (<s> ^operator <o> + =)
    (<o> ^name chunk-predicate-structure
         ^gtype action
         ^action <a>)
}

sp {learning-event*apply*chunk-predicate-structure*finished*predicate
:o-support
   (state <s> ^name learning-event
              ^finished-learning predicate
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> 
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>
         ^learning-predicate <lp>) 
(<lp> ^name <name>)        
-->
   (<dc> ^learning-predicate <lp> -)
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-unknown-word
          ^complete-message true
          ^fields.word <name>)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}


sp {learning-event*apply*chunk-predicate-structure*finished*remove-learn-link
:o-support
   (state <s> ^name learning-event
              ^finished-learning << action goal heuristic failure predicate >>
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> -^new-spelling)# -^smap.<spell> <name>)
   (<dc> ^finalize-chunk <name>
         ^store-learn-link <ll> ^learn-link {<l2> <> <ll>})
   (<l2> ^handle <name>)
    -{(<dc> ^learn-link {<l3> <> <l2>})}#TODO just do test for most recent?
-->
#(interrupt)
#(write (cmd |FUCK1|))
   (<dc> ^store-learn-link <ll> -)
   (<dc> ^learn-link <ll>)
   (<dc> ^learn-link <l2> -)
}
sp {learning-event*apply*chunk-predicate-structure*finished*remove-learn-link*double
:o-support
   (state <s> ^name learning-event
              ^finished-learning << action goal heuristic failure predicate >>
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> -^new-spelling)# -^smap.<spell> <name>)
   (<dc> ^finalize-chunk <name>
         ^store-learn-link <ll> ^learn-link <l2>)
   (<l2> ^handle <name>)
    -{(<dc> ^learn-link {<l3> > <l2>})}#TODO just do test for most recent?
   -{(state <s>)
     -{(<dc> ^learn-link {<l4> <> <l2>})}}
-->
#(interrupt)
#(write (cmd |FUCK1|))
   (<dc> ^learn-link <l2> -)
}

sp {learning-event*apply*chunk-predicate-structure*finished*remove-learn-linkFUCK
:o-support
   (state <s> ^name learning-eventXX
              ^finished-learning << action goal heuristic failure predicate >>
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc>)#^new-spelling)# -^smap.<spell> <name>)
   (<dc> ^finalize-chunk <name>
         ^store-learn-link <ll> ^learn-link {<l2> <> <ll>})
   #(<l2> ^handle <name>)
(<ll> ^type goal)
-->
(interrupt)
(write (cmd |FUCK2|))
(write (cmd print <dc> -d 4))
(write (cmd matches))
}

#TODO temp solution
sp {learning-event*apply*chunk-predicate-structure*finished*remove-learn-link*update*term
:o-support
   (state <s> ^name learning-event
              ^finished-learning << predicate >>
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> ^new-spelling <ns> ^smap.<spell> <name>)
   (<dc> ^finalize-chunk <name>
         ^store-learn-link <ll> ^learn-link {<l2> <> <ll>})
   (<l2> ^handle <name>)
   (<ll> ^condition <co>)
   (<co> ^name <spell>)
 -{(<dc> ^learn-link {<l3> <> <l2>})}#TODO just do test for most recent?  
-->
   (<co> ^name <spell> -)
   (<co> ^name <name>)
   #(<ts> ^new-spelling <ns> -)
   (<dc> ^store-learn-link <ll> -)
   (<dc> ^learn-link <ll>)
   (<dc> ^learn-link <l2> -)
}
sp {learning-event*apply*chunk-predicate-structure*finished*remove-learn-link*update*term*double
:o-support
   (state <s> ^name learning-event
              ^finished-learning << predicate >>
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> ^new-spelling <ns> ^smap.<spell> <name>)
   (<dc> ^finalize-chunk <name>
         ^learn-link <ll> ^learn-link {<l2> > <ll>})
   (<l2> ^handle <name>)
   (<ll> ^condition <co>)
   (<co> ^name <spell>)
 -{(<dc> ^learn-link {<l3> > <l2>})}#TODO just do test for most recent?  
-->
   (<co> ^name <spell> -)
   (<co> ^name <name>)
   #(<ts> ^new-spelling <ns> -)
   (<dc> ^learn-link <l2> -)
}

sp {learning-event*apply*chunk-predicate-structure*finished*remove-learn-link*update*term*second-spell
:o-support
   (state <s> ^name learning-event
              ^finished-learning << predicate >>
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> ^new-spelling <ns> -^smap.<spell> ^smap.<spell2> <spell> ^smap.<spell2> <name>)
   (<dc> ^finalize-chunk <name>
         ^store-learn-link <ll> ^learn-link {<l2> <> <ll>})
   (<l2> ^handle <name>)
   (<ll> ^condition <co>)
   (<co> ^name <spell>)
 -{(<dc> ^learn-link {<l3> <> <l2>})}#TODO just do test for most recent?
-->
   (<co> ^name <spell> -)
   (<co> ^name <name>)
   #(<ts> ^new-spelling <ns> -)
   (<dc> ^store-learn-link <ll> -)
   (<dc> ^learn-link <ll>)
   (<dc> ^learn-link <l2> -)
}
sp {learning-event*apply*chunk-predicate-structure*finished*remove-learn-link*update*term*second-spell*double
:o-support
   (state <s> ^name learning-event
              ^finished-learning << predicate >>
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> ^new-spelling <ns> -^smap.<spell> ^smap.<spell2> <spell> ^smap.<spell2> <name>)
   (<dc> ^finalize-chunk <name>
         ^learn-link <ll> ^learn-link {<l2> > <ll>})
   (<l2> ^handle <name>)
   (<ll> ^condition <co>)
   (<co> ^name <spell>)
 -{(<dc> ^learn-link {<l3> > <l2>})}#TODO just do test for most recent?
-->
   (<co> ^name <spell> -)
   (<co> ^name <name>)
   #(<ts> ^new-spelling <ns> -)
   (<dc> ^learn-link <l2> -)
}

sp {learning-event*apply*chunk-predicate-structure*finished*heuristic*name*clean-up
:o-support
   (state <s> ^name learning-event
              ^finished-learning heuristic
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc>
         ^new-spelling <ns>
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<ts> ^new-spelling <ns> -)
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-heuristic
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}
sp {learning-event*apply*chunk-predicate-structure*finished*heuristic
:o-support
   (state <s> ^name learning-event
              ^finished-learning heuristic
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> 
        -^new-spelling
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-heuristic
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game)
         #^originator agent)
}
sp {learning-event*apply*chunk-predicate-structure*finished*action*name*clean-up
:o-support
   (state <s> ^name learning-event
              ^finished-learning action
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc>
         ^new-spelling <ns>
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<ts> ^new-spelling <ns> -)
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-action
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}
sp {learning-event*apply*chunk-predicate-structure*finished*action
:o-support
   (state <s> ^name learning-event
              ^finished-learning action
              ^finished-learning <type>
             -^purpose.type learn-action-name
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc>
        -^new-spelling
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-action
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}


sp {learning-event*apply*chunk-predicate-structure*finished*goal*name*clean-up
:o-support
   (state <s> ^name learning-event
              ^finished-learning goal
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc>
         ^new-spelling <ns>
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<ts> ^new-spelling <ns> -)
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-goal
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)

}

sp {learning-event*apply*chunk-predicate-structure*finished*goal
:o-support
   (state <s> ^name learning-event
              ^finished-learning goal
              ^finished-learning <type>
             -^purpose.type learn-goal-name
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc>
        -^new-spelling 
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-goal
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}
sp {learning-event*apply*chunk-predicate-structure*finished*old-action
:o-support
   (state <s> ^name learning-event
              ^finished-learning action
              ^finished-learning <type>
              ^purpose.type learn-action-name
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc>
        -^new-spelling
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type already-learned-action
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}
sp {learning-event*apply*chunk-predicate-structure*finished*old-goal
:o-support
   (state <s> ^name learning-event
              ^finished-learning goal
              ^finished-learning <type>
              ^purpose.type learn-goal-name
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc>
        -^new-spelling 
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type already-learned-goal
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}

sp {learning-event*apply*chunk-predicate-structure*finished*failure*name*clean-up
:o-support
   (state <s> ^name learning-event
              ^finished-learning failure
              ^finished-learning <type>
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> 
         ^new-spelling <ns>
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<ts> ^new-spelling <ns> -)
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-failure
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}

sp {learning-event*apply*chunk-predicate-structure*finished*failure
:o-support
   (state <s> ^name learning-event
              ^finished-learning failure
              ^finished-learning <type>
              -^purpose.type learn-failure-name
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> 
         -^new-spelling
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-failure
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}

sp {learning-event*apply*chunk-predicate-structure*finished*old-failure
:o-support
   (state <s> ^name learning-event
              ^finished-learning failure
              ^finished-learning <type>
              ^purpose.type learn-failure-name
              ^<type>.handle <h>
              ^top-state <ts>)
   (<ts> ^dialog-context <dc> 
         -^new-spelling
         ^interaction.status <status>
         ^interaction.changes <changes>)
   (<dc> ^finalize-chunk <name>)        
-->
   (<dc> ^finalize-chunk <name> -)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type already-learned-failure
          ^complete-message true)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game-name
         ^originator agent)
}

#
#sp {satisfy-predicate-conditions*propose*chunk-predicate-structure
#    (state <s> ^top-state.dialog-context.learning true
#                -^<type>.handle <h>)
#    (<s> ^main-type {<type> << action goal failure >>} ^<type> <a1> ^finished-learning <type> ^finalize-chunk <h>)
#-->
#    (<s> ^operator <o> + =)
#    (<o> ^name chunk-predicate-structure
#         ^gtype action
#         ^predicate-handle <h>)
#}

sp {learning-event*propose*learn-predicate*heuristic
   (state <s> ^name learning-event
             -^finished-learning heuristic
              ^purpose <p>)
   (<p> ^type learn-heuristic-predicate ^parameters.message <msg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-predicate
        ^message <msg>
        ^type heuristic)
}

sp {learning-event*propose*learn-predicate*property
   (state <s> ^name learning-event
              -^finished-learning predicate
              ^purpose <p>)
   (<p> ^type learn-property-predicate ^parameters.message <msg>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learn-predicate
        ^message <msg>
        ^type predicate)
}

sp {learning-event*elaborate*learn-goal-definition*goal-predicate
   (state <s> ^name learning-event
              ^operator <o> +
              ^purpose <p>)
   (<o> ^name learn-goal-definition)
   (<p> ^parameters.goal-predicate <pred>)
-->
   (<o> ^goal-predicate <pred>)
}

sp {learning-event*elaborate*learn-goal-definition*goal-condition
   (state <s> ^name learning-event
              ^operator <o> +
              ^purpose <p>)
   (<o> ^name learn-goal-definition)
   (<p> ^parameters.goal-condition <cond>)
-->
   (<o> ^goal-condition <cond>)
}
