###########################################################################
#! Manipulation Actions
#! 001-099


### +@pick-up1 [001]
smem --add {
   # 1 Argument: Pick up the <obj>
   #             Pick up the yellow block

   (@pick-up1 ^handle pick-up1 ^procedural <proc001> ^item-type action ^goal-graph <sgoal001>)
   (<proc001> ^op_name op_pick-up1 
              ^arg1 <parg0011>
              ^subtasks <subtasks001>)
   (<parg0011> ^arg-type object ^required true ^id <obj-slot0011>)

   # Start Goal
   (<sgoal001> ^handle pick-up1start1 ^item-type start-goal ^next.goal <goal0011>)

   # Goal 1: the object is grabbed
   (<goal0011> ^handle pick-up1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0011p1> ^next.goal <tgoal001>)
      (<g0011p1> ^type unary ^id <pred-slot0012> ^1 <obj-slot0011>)
         (<pred-slot0012> ^default <ps0012def>)
            (<ps0012def> ^predicate-handle grabbed1 ^property-handle is-grabbed1)

   # Terminal Goal
   (<tgoal001> ^handle pick-up1term1 ^item-type terminal-goal)
}



### +@put-down1 [002]
smem --add {
   # 1 Argument Version: Put down the <obj>
   # 2 Argument Version: Put the <obj> <rel> <obj2>

   (@put-down1 ^handle put-down1 ^procedural <proc002> ^item-type action ^goal-graph <sgoal002>)
   (<proc002> ^op_name op_put-down1 
              ^arg1 <parg0021>
              ^arg2 <parg0022>
              ^subtasks <subtasks002>)
   (<parg0021> ^arg-type object ^required true ^id <obj-slot0021>)
   (<parg0022> ^arg-type partial-predicate ^id <pred-slot0022> ^2 <obj-slot0022>)

   # Start Goal (2 options)
   (<sgoal002> ^handle put-down1start1 ^item-type start-goal ^next <nextg0021> ^next <nextg0022>)

   # Conditional Goal 1
   # If there is no arg2, then the goal is for the object to not be grabbed
   (<nextg0021> ^conditions <g0021conds> ^goal <goal0021>)
      (<g0021conds> ^pred-count 1 ^1 <g0021c1>)
         (<g0021c1> ^type missing-argument ^argument-name arg2)
   (<goal0021> ^handle put-down1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0021p1> ^next.goal <tgoal002>)
      (<g0021p1> ^type unary ^id <pred-slot0023> ^1 <obj-slot0021>)
         (<pred-slot0023> ^default <ps0023def>)
            (<ps0023def> ^predicate-handle not-grabbed1 ^property-handle is-grabbed1)

   # Conditional Goal 2
   # If there is an arg2, then the goal is to satisfy the partial predicate 
   (<nextg0022> ^conditions <g0022conds> ^goal <goal0022>)
      (<g0022conds> ^pred-count 1 ^1 <g0022c1>)
         (<g0022c1> ^type has-argument ^argument-name arg2)
   (<goal0022> ^handle put-down1goal2 ^item-type task-goal ^pred-count 1 ^1 <g0022p1> ^next.goal <tgoal002>)
      (<g0022p1> ^type relation ^id <pred-slot0022> ^1 <obj-slot0021> ^2 <obj-slot0022>)

   # Terminal Goal
   (<tgoal002> ^handle put-down1term1 ^item-type terminal-goal)
}


### +@open1 [003]
smem --add {
   # Open the <obj>
   # Open the pantry

   (@open1 ^handle open1 ^procedural <proc003> ^item-type action ^goal-graph <sgoal003>)
   (<proc003> ^op_name op_open1 
              ^arg1 <parg0031>
              ^subtasks <subtasks003>)
   (<parg0031> ^arg-type object ^required true ^id <obj-slot0031>)

   # Start Goal
   (<sgoal003> ^handle open1start1 ^item-type start-goal ^next.goal <goal0031>)

   # Goal 1: The object is open
   (<goal0031> ^handle open1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0031p1> ^next.goal <tgoal003>)
      (<g0031p1> ^type unary ^id <pred-slot0032> ^1 <obj-slot0031>)
         (<pred-slot0032> ^default <ps0032def>)
            (<ps0032def> ^predicate-handle open2 ^property-handle door2)

   # Terminal Goal
   (<tgoal003> ^handle open1term1 ^item-type terminal-goal)
}


### +@close1 [004]
smem --add {
   # Close the <obj>
   # Close the stove

   (@close1 ^handle close1 ^procedural <proc004> ^item-type action ^goal-graph <sgoal004>)
   (<proc004> ^op_name op_close1
              ^arg1 <parg0041>
              ^subtasks <subtasks004>)
   (<parg0041> ^arg-type object ^required true ^id <obj-slot0041>)

   # Start Goal
   (<sgoal004> ^handle close1start1 ^item-type start-goal ^next.goal <goal0041>)

   # Goal 1: The object is closed
   (<goal0041> ^handle close1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0041p1> ^next.goal <tgoal004>)
      (<g0041p1> ^type unary ^id <pred-slot0042> ^1 <obj-slot0041>)
         (<pred-slot0042> ^default <ps0042def>)
            (<ps0042def> ^predicate-handle closed2 ^property-handle door2)

   # Terminal Goal
   (<tgoal004> ^handle close1term1 ^item-type terminal-goal)
}


### +@turn-on1 [005]
smem --add {
   # Turn on the <obj>
   # Turn on the lights

   (@turn-on1 ^handle turn-on1 ^procedural <proc005> ^item-type action ^goal-graph <sgoal005>)
   (<proc005> ^op_name op_turn-on1 
              ^arg1 <parg0051>
              ^subtasks <subtasks005>)
   (<parg0051> ^arg-type object ^required true ^id <obj-slot0051>)

   # Start Goal
   (<sgoal005> ^handle turn-on1start1 ^item-type start-goal ^next.goal <goal0051>)

   # Goal 1: The object is on
   (<goal0051> ^handle turn-on1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0051p1> ^next.goal <tgoal005>)
         (<g0051p1> ^type unary ^id <pred-slot0052> ^1 <obj-slot0051>)
            (<pred-slot0052> ^default <ps0052def>)
               (<ps0052def> ^predicate-handle on2 ^property-handle activation1)

   # Terminal Goal
   (<tgoal005> ^handle turn-on1term1 ^item-type terminal-goal)
}

### +@turn-off1 [006]
smem --add {
   # Turn off the <obj>
   # Turn off the stove

   (@turn-off1 ^handle turn-off1 ^procedural <proc006> ^item-type action ^goal-graph <sgoal006>)
   (<proc006> ^op_name op_turn-off1 
              ^arg1 <parg0061>
              ^subtasks <subtasks006>)
   (<parg0061> ^arg-type object ^required true ^id <obj-slot0061>)

   # Start Goal
   (<sgoal006> ^handle turn-off1start1 ^item-type start-goal ^next.goal <goal0061>)

   # Goal 1: The object is off
   (<goal0061> ^handle turn-off1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0061p1> ^next.goal <tgoal006>)
      (<g0061p1> ^type unary ^id <pred-slot0062> ^1 <obj-slot0061>)
         (<pred-slot0062> ^default <ps0062def>)
            (<ps0062def> ^predicate-handle off2 ^property-handle activation1)

   # Terminal Goal
   (<tgoal006> ^handle turn-off1term1 ^item-type terminal-goal)
}

### +@write1 [007]
smem --add {
   # 2 Argument Version: write a <num> onto <obj2>
   #                     Write a five onto the green location

   (@write1 ^handle write1 ^procedural <proc007> ^item-type action ^goal-graph <sgoal007>)
   (<proc007> ^op_name op_write1
              ^arg1 <parg0071> ^arg2 <parg0072>)
   (<parg0071> ^arg-type concept ^required true ^id <conc-slot0071>)
   (<parg0072> ^arg-type partial-predicate ^required true ^id <pred-slot0072> ^2 <obj-slot0072>) 

   # Start Goal
   (<sgoal007> ^handle write1start1 ^item-type start-goal ^next.goal <goal0071>)

   # Goal 1: custom
   (<goal0071> ^handle write1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal007>)

   # Terminal goal
   (<tgoal007> ^handle write1term1 ^item-type terminal-goal)
}

### +@give1 [008]
smem --add {
   # Give the <obj> to <person>.

   (@give1 ^handle give1 ^procedural <proc008> ^item-type action ^goal-graph <sgoal008>)
   (<proc008> ^op_name op_give1
             ^arg1 <parg0081> ^arg2 <parg0082>)
   (<parg0081> ^arg-type object ^required true ^id <obj-slot0081>)
   (<parg0082> ^arg-type partial-predicate ^required true ^id <pred-slot0082> ^2 <obj-slot0082>) 

   # Start Goal
   (<sgoal008> ^handle give1start1 ^item-type start-goal ^next.goal <goal0081>)

   # Goal 1: holding1(person, object)
   (<goal0081> ^handle give1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0081p1> ^next.goal <tgoal008>)
      (<g0081p1> ^type relation ^id <pred-slot0083> ^1 <obj-slot0082> ^2 <obj-slot0081>)
         (<pred-slot0083> ^default <ps0083def>)
            (<ps0083def> ^predicate-handle holding1)

   # Terminal goal
   (<tgoal008> ^handle give1term1 ^item-type terminal-goal)
}

### +@point1 [009]
smem --add {
   # Point at the <obj>

   (@point1 ^handle point1 ^procedural <proc009> ^item-type action ^goal-graph <sgoal009>)
   (<proc009> ^op_name op_point1
              ^arg1 <parg0091>)
   (<parg0091> ^arg-type partial-predicate ^required true ^id <pred-slot0091> ^2 <obj-slot0091>)
   # Goal is to do a point command

   # Start Goal
   (<sgoal009> ^handle point1start1 ^item-type start-goal ^next.goal <goal0091>)

   # Goal 1: execute-command(point)
   (<goal0091> ^handle point1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0091p1> ^next.goal <tgoal009>)
      (<g0091p1> ^type execute-command ^command-name point-command)

   # Terminal goal
   (<tgoal009> ^handle point1term1 ^item-type terminal-goal)
}

### +@use1 [011]
smem --add {
   # Use the cup with the faucet. 

   (@use1 ^handle use1 ^procedural <proc011> ^item-type action ^goal-graph <sgoal011>)
   (<proc011> ^op_name op_use1
              ^arg1 <parg0111>
              ^arg2 <parg0112>)
   (<parg0111> ^arg-type object ^required true ^id <obj-slot0111>)
   (<parg0112> ^arg-type partial-predicate ^required true ^id <pred-slot0112> ^2 <obj-slot0112>)

   # Start Goal
   (<sgoal011> ^handle use1start1 ^item-type start-goal ^next.goal <goal0111>)

   # Goal 1: execute-command(use)
   (<goal0111> ^handle use1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0111p1> ^next.goal <tgoal011>)
      (<g0111p1> ^type execute-command ^command-name use-command)

   # Terminal goal
   (<tgoal011> ^handle use1term1 ^item-type terminal-goal)
}

### +@remove1 [012]
smem --add {
   # 2 Argument Version: remove a <obj2>
   #                     Remove the green block

   (@remove1 ^handle remove1 ^procedural <proc012> ^item-type action ^goal-graph <sgoal012>)
   (<proc012> ^op_name op_remove1
              ^arg1 <parg0121>)
   (<parg0121> ^arg-type object ^importance required ^id <obj-slot0121>)

   # Start Goal
   (<sgoal012> ^handle remove1start1 ^item-type start-goal ^next.goal <goal0121>)

   # Goal 1: custom
   (<goal0121> ^handle remove1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal012>)

   # Terminal goal
   (<tgoal012> ^handle remove1term1 ^item-type terminal-goal)
}

### +@reset-arm1 [013]
smem --add {
   # Reset

   (@reset-arm1 ^handle reset-arm1 ^procedural <proc013> ^item-type action ^goal-graph <sgoal013>)
   (<proc013> ^op_name op_reset-arm1 )

   # Start Goal
   (<sgoal013> ^handle reset-arm1start1 ^item-type start-goal ^next.goal <goal0131>)

   # Goal 1: execute-command(reset)
   (<goal0131> ^handle reset-arm1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0131p1> ^next.goal <tgoal013>)
      (<g0131p1> ^type execute-command ^command-name reset-command)

   # Terminal goal
   (<tgoal013> ^handle reset-arm1term1 ^item-type terminal-goal)
}

### +@roll1 [014]
smem --add {
   # Roll the blue cube (cozmo)

   (@roll1 ^handle roll1 ^procedural <proc014> ^item-type action ^goal-graph <sgoal014>)
   (<proc014> ^op_name op_roll1 
              ^arg1 <parg0141>)
   (<parg0141> ^arg-type object ^importance required ^id <obj-slot0141>)

   # Start Goal
   (<sgoal014> ^handle roll1start1 ^item-type start-goal ^next.goal <goal0141>)

   # Goal 1: execute-command(roll)
   (<goal0141> ^handle roll1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0141p1> ^next.goal <tgoal014>)
      (<g0141p1> ^type execute-command ^command-name roll-command)

   # Terminal goal
   (<tgoal014> ^handle roll1term1 ^item-type terminal-goal)
}

### +@wheelie1 [015]
smem --add {
   # Wheelie on the green cube (cozmo)

   (@wheelie1 ^handle wheelie1 ^procedural <proc015> ^item-type action ^goal-graph <sgoal015>)
   (<proc015> ^op_name op_wheelie1 
              ^arg2 <parg0152>)
   (<parg0152> ^arg-type partial-predicate ^required true ^id <pred-slot0152> ^2 <obj-slot0152>)

   # Start Goal
   (<sgoal015> ^handle wheelie1start1 ^item-type start-goal ^next.goal <goal0151>)

   # Goal 1: execute-command(wheelie)
   (<goal0151> ^handle wheelie1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0151p1> ^next.goal <tgoal015>)
      (<g0151p1> ^type execute-command ^command-name wheelie-command)

   # Terminal goal
   (<tgoal015> ^handle wheelie1term1 ^item-type terminal-goal)
}

### +@change-color1 [016]
smem --add {
   # Change the white cube to a red cube

   (@change-color1 ^handle change-color1 ^procedural <proc016> ^item-type action ^goal-graph <sgoal016>)
   (<proc016> ^op_name op_change-color1 
              ^arg1 <parg0161>
              ^arg2 <parg0162>)
   (<parg0161> ^arg-type object ^required true ^id <obj-slot0161>)
   (<parg0162> ^arg-type partial-predicate ^required true ^id <pred-slot0162> ^2 <obj-slot0162>)

   # Start Goal
   (<sgoal016> ^handle change-color1start1 ^item-type start-goal ^next.goal <goal0161>)

   # Goal 1: custom
   (<goal0161> ^handle change-color1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal016>)

   # Terminal goal
   (<tgoal016> ^handle change-color1term1 ^item-type terminal-goal)
}


### +@flip-on1 [017]
smem --add {

   (@flip-on1 ^handle flip-on1 ^procedural <proc017> ^item-type action ^goal-graph <sgoal017>)
   (<proc017> ^op_name op_flip-on1 
              ^arg1 <parg0171>
              ^subtasks <subtasks017>)
   (<parg0171> ^arg-type object ^required true ^id <obj-slot0171>)

   # Start Goal
   (<sgoal017> ^handle flip-on1start1 ^item-type start-goal ^next.goal <goal0171>)

   # Goal 1: The object is on
   (<goal0171> ^handle flip-on1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0171p1> ^next.goal <tgoal017>)
         (<g0171p1> ^type unary ^id <pred-slot0172> ^1 <obj-slot0171>)
            (<pred-slot0172> ^default <ps0172def>)
               (<ps0172def> ^predicate-handle on2 ^property-handle activation1)

   # Terminal Goal
   (<tgoal017> ^handle flip-on1term1 ^item-type terminal-goal)
}

### +@plug-in1 [020]
smem --add {
   # Give the <obj> to <person>.

   (@plug1 ^handle plug1 ^procedural <proc018> ^item-type action ^goal-graph <sgoal018>)
   (<proc018> ^op_name op_plug1
             ^arg1 <parg0181> ^arg2 <parg0182>)
   (<parg0181> ^arg-type object ^required true ^id <obj-slot0181>)
   (<parg0182> ^arg-type partial-predicate ^required true ^id <pred-slot0182> ^2 <obj-slot0182>) 

   # Start Goal
   (<sgoal018> ^handle plug1start1 ^item-type start-goal ^next.goal <goal0181>)

   # Goal 1: holding1(person, object)
   (<goal0181> ^handle plug1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0181p1> ^next.goal <tgoal018>)
      (<g0181p1> ^type relation ^id <pred-slot0183> ^1 <obj-slot0182> ^2 <obj-slot0181>)
         (<pred-slot0183> ^default <ps0183def>)
            (<ps0183def> ^predicate-handle connected1)

   # Terminal goal
   (<tgoal018> ^handle plug-in1term1 ^item-type terminal-goal)
}
### +@lock1 [018]
smem --add {
   # Lock the <obj>

   (@lock1 ^handle lock1 ^procedural <proc018> ^item-type action ^goal-graph <sgoal018>)
   (<proc018> ^op_name op_lock1 
              ^arg1 <parg0181>
              ^subtasks <subtasks018>)
   (<parg0181> ^arg-type object ^required true ^id <obj-slot0181>)

   # Start Goal
   (<sgoal018> ^handle lock1start1 ^item-type start-goal ^next.goal <goal0181>)

   # Goal 1: The object is locked
   (<goal0181> ^handle lock1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0181p1> ^next.goal <tgoal018>)
      (<g0181p1> ^type unary ^id <pred-slot0182> ^1 <obj-slot0181>)
         (<pred-slot0182> ^default <ps0182def>)
            (<ps0182def> ^predicate-handle locked1 ^property-handle is-locked1)

   # Terminal Goal
   (<tgoal018> ^handle lock1term1 ^item-type terminal-goal)
}


### +@unlock1 [019]
smem --add {
   # Unlock the <obj>

   (@unlock1 ^handle unlock1 ^procedural <proc019> ^item-type action ^goal-graph <sgoal019>)
   (<proc019> ^op_name op_unlock1
              ^arg1 <parg0191>
              ^subtasks <subtasks019>)
   (<parg0191> ^arg-type object ^required true ^id <obj-slot0191>)

   # Start Goal
   (<sgoal019> ^handle unlock1start1 ^item-type start-goal ^next.goal <goal0191>)

   # Goal 1: The object is unlockd
   (<goal0191> ^handle unlock1goal1 ^item-type task-goal ^pred-count 1 ^1 <g0191p1> ^next.goal <tgoal019>)
      (<g0191p1> ^type unary ^id <pred-slot0192> ^1 <obj-slot0191>)
         (<pred-slot0192> ^default <ps0192def>)
            (<ps0192def> ^predicate-handle not-locked1 ^property-handle is-locked1)

   # Terminal Goal
   (<tgoal019> ^handle unlock1term1 ^item-type terminal-goal)
}


#!####################################################################
#!####################################################################
#! Robot Tasks
#! 101-199

### +@move1 [101]
smem --add {
   # 2 Argument Version: Move the <obj> <rel> <obj2>
   #                     Move the red block onto the green block

   (@move1 ^handle move1 ^procedural <proc101> ^item-type action)# ^goal-graph <sgoal101>)
   (<proc101> ^op_name op_move1
              ^arg1 <parg1011> ^arg2 <parg1012>
              ^subtasks <subs101>)
   (<parg1011> ^arg-type object ^required true ^id <obj-slot1011>)
   (<parg1012> ^arg-type partial-predicate ^required true ^id <pred-slot1012> ^2 <obj-slot1012>)

   # # Start Goal
   # (<sgoal101> ^handle move1start1 ^item-type start-goal ^next.goal <goal1011>)
   # (<goal1011> ^handle move1goal1 ^item-type task-goal ^pred-count 1 ^1 <g1011p1> ^next.goal <tgoal101>)
   #   (<g1011p1> ^type relation ^id <pred-slot1012> ^1 <obj-slot1011> ^2 <obj-slot1012>)

   # # Terminal goal
   # (<tgoal101> ^handle move1term1 ^item-type terminal-goal)
}

### +@store1 [102]
smem --add {
   # Store the <obj>

   (@store1 ^handle store1 ^item-type action)
}

### +@discard1 [103]
smem --add {
   # Discard the <obj>

   (@discard1 ^handle discard1 ^item-type action)
}

### +@deliver1 [104]
smem --add {
   # Deliver the <obj> to the <loc>

   (@deliver1 ^handle deliver1 ^item-type action)
}

### +@fetch1 [105]
smem --add {
   # Fetch a <obj>
   # Fetch a <obj> from the <loc>

   (@fetch1 ^handle fetch1 ^item-type action)
}

### +@take1 [106]
smem --add {
   # Take the <obj> to the <loc>

   (@take1 ^handle take1 ^item-type action)
}

### +@guide1 [107]
smem --add {
   # Guide <person>

   (@guide1 ^handle guide1 ^item-type action)
}

### +@serve1 [108]
smem --add {
   # Serve [person]

   (@serve1 ^handle serve1 ^item-type action)
}

### +@bring1 [109]
smem --add {
   # Bring <obj> to the <loc>

   (@bring1 ^handle bring1 ^item-type action)
}

### +@tell1 [110]
smem --add {
   # Tell <person> |Bob says hi|

   (@tell1 ^handle tell1 ^item-type action)
}

### +@stack1 [111]
#smem --add {
#   # Stack the <obj1> and the <obj2>
#
#   (@stack1 ^handle stack1 ^item-type action)
#}

### +@cook1 [112]
smem --add {
   # Cook the steak

   (@cook1 ^handle cook1 ^item-type action)
}

### +@set1 [113]
smem --add {
   # Set the table
      # AM: Check this
      (@set1 ^handle set)
}

### +@clean1 [114]
smem --add {
   # Clean up
   # Clean the table

   (@clean1 ^handle clean1 ^item-type action)
}

### +@throw1 [115]
smem --add {
   # Throw away the object

   (@throw1 ^handle throw1 ^procedural <proc115> ^item-type action)
   (<proc115> ^op_name op_throw1
              ^arg1 <parg1151>)
     (<parg1151> ^arg-type object ^id <obj-slot1151>)
}

### +@organize1 [116]
smem --add {
   # Organize the table

   (@organize1 ^handle organize1 ^item-type action)
}


### +@patrol1 [117]
smem --add {
   # Patrol.

   (@patrol1 ^handle patrol1 ^item-type action)
}

### +@refrigerate1 [118]
smem --add {
   # Refrigerate the soda

   (@refrigerate1 ^handle refrigerate1 ^item-type action)
}

### +@lead1 [119]
smem --add {
   # Lead a tour

   (@lead1 ^handle lead1 ^item-type action)
}

### +@squaredance1 [120]
smem --add {
   # Drive in a square.

   (@squaredance1 ^handle squaredance1 ^item-type action)
}

### +@recite1 [121]
smem --add {
   # Recite a poem.

   (@recite1 ^handle recite1 ^item-type action)
}

### +@heat1 [122]
smem --add {
   # Heat the mug. 

   (@heat1 ^handle heat1 ^item-type action)
}

### +@describe [123]
smem --add {
   # Describe the <obj>

   (@describe1 ^handle describe1 ^item-type action)
}

### +@guard [124]
smem --add {
   # Guard

   (@guard1 ^handle guard1 ^item-type action)
}

### +@raise [125]
smem --add {
   # Raise an alarm

   (@raise1 ^handle raise1 ^item-type action)
}

### +@testmove1 [126]
smem --add {
   # 2 Argument Version: Move the <obj> <rel> <obj2>

   (@testmove1 ^handle testmove1 ^procedural <proc126> ^item-type action ^goal-graph <sgoal126>)
   (<proc126> ^op_name op_testmove1
              ^arg1 <parg1261> ^arg2 <parg1262>
              ^subtasks <subs126>)
   (<parg1261> ^arg-type object ^required true ^id <obj-slot1261>)
   (<parg1262> ^arg-type partial-predicate ^required true ^id <pred-slot1262> ^2 <obj-slot1262>)

   # Start Goal
   (<sgoal126> ^handle testmove1start1 ^item-type start-goal ^next.goal <goal1261>)

   # Goal 1: pred(arg1, arg2)
   (<goal1261> ^handle testmove1goal1 ^item-type task-goal ^pred-count 1 ^1 <g1261p1> ^next.goal <tgoal126>)
         (<g1261p1> ^type relation ^id <pred-slot1262> ^1 <obj-slot1261> ^2 <obj-slot1262>)

   # Terminal goal
   (<tgoal126> ^handle testmove1term1 ^item-type terminal-goal)
}

### +@inspect [127]
smem --add {

   (@inspect1 ^handle inspect1 ^item-type action)
}


#!#############################################################################################
#!#############################################################################################
#! Driving Actions
#! 201-299

### +@turn1 [201]
smem --add {
   # Change direction, Turn [right|left|around]

   (@turn1 ^handle turn1 ^procedural <proc201> ^item-type action ^goal-graph <sgoal201>)
   (<proc201> ^op_name op_turn1 
              ^arg1 <parg2011>)
   (<parg2011> ^arg-type concept ^required true ^id <conc-slot2011>)

   # Start Goal
   (<sgoal201> ^handle turn1start1 ^item-type start-goal ^next.goal <goal2011>)

   # Goal 1: execute-command(turn)
   (<goal2011> ^handle turn1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2011p1> ^next.goal <tgoal201>)
      (<g2011p1> ^type execute-command ^command-name turn-command)

   # Terminal goal
   (<tgoal201> ^handle turn1term1 ^item-type terminal-goal)
}

### +@follow-wall1 [202]
smem --add {
   # Follow the [right|left] wall

   (@follow-wall1 ^handle follow-wall1 ^procedural <proc202> ^item-type action ^goal-graph <sgoal202>)
   (<proc202> ^op_name op_follow-wall1 
              ^arg1 <parg2021>)
   (<parg2021> ^arg-type object ^required true ^id <conc-slot2021>)

   # Start Goal
   (<sgoal202> ^handle follow-wall1start1 ^item-type start-goal ^next.goal <goal2021>)
   
   # Goal 1: custom
   (<goal2021> ^handle follow-wall1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal202>)

   # Terminal goal
   (<tgoal202> ^handle follow-wall1term1 ^item-type terminal-goal)
}

### +@orient1 [203]
smem --add {
   # Orient [north|south|east|west]

   (@orient1 ^handle orient1 ^procedural <proc203> ^item-type action ^goal-graph <sgoal203>)
   (<proc203> ^op_name op_orient1 
              ^arg1 <parg2031>)
   (<parg2031> ^arg-type concept ^required true ^id <conc-slot2031>)

   # Start Goal
   (<sgoal203> ^handle orient1start1 ^item-type start-goal ^next.goal <goal2031>)

   # Goal 1: execute-command(orient)
   (<goal2031> ^handle orient1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2031p1> ^next.goal <tgoal203>)
      (<g2031p1> ^type execute-command ^command-name orient-command)

   # Terminal goal
   (<tgoal203> ^handle orient1term1 ^item-type terminal-goal)
}

### +@face1 [204]
smem --add {
   # Face the <obj>
   # Face the door

   (@face1 ^handle face1 ^procedural <proc204> ^item-type action ^goal-graph <sgoal204>)
   (<proc204> ^op_name op_face1
              ^arg1 <parg2041>)
   (<parg2041> ^arg-type object ^required true ^id <obj-slot2041>)

   # Start Goal
   (<sgoal204> ^handle face1start1 ^item-type start-goal ^next.goal <goal2041>)

   # Goal 1: execute-command(face)
   (<goal2041> ^handle face1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2041p1> ^next.goal <tgoal204>)
      (<g2041p1> ^type execute-command ^command-name face-command)

   # Terminal goal
   (<tgoal204> ^handle face1term1 ^item-type terminal-goal)
}

### +@drive1 [205]
smem --add {
   # Drive forward.
   # Drive.
   # Drive down the hall.
   (@drive1 ^handle drive1 ^procedural <proc205> ^item-type action ^goal-graph <sgoal205>)
   (<proc205> ^op_name op_drive1
              ^arg1 <parg2051>)
   (<parg2051> ^arg-type concept ^id <conc-slot2051>)

   # Start Goal
   (<sgoal205> ^handle drive1start1 ^item-type start-goal ^next.goal <goal2051>)

   # Goal 1: custom
   (<goal2051> ^handle drive1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal205>)

   # Terminal goal
   (<tgoal205> ^handle drive1term1 ^item-type terminal-goal)
}

### +@go-to-location1 [206]
smem --add {
   # Go to the <loc>
   (@go-to-location1 ^handle go-to-location1 ^procedural <proc206> ^item-type action ^goal-graph <sgoal206>)
   (<proc206> ^op_name op_go-to-location1 
              ^arg2 <parg2062>)
   (<parg2062> ^arg-type partial-predicate ^id <pred-slot2062> ^2 <obj-slot2062>)

   # Start Goal
   (<sgoal206> ^handle gotoloc1start1 ^item-type start-goal ^next.goal <goal2061>)
   
   # Goal 1: current-location(arg1)
   (<goal2061> ^handle gotoloc1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2061p1> ^next.goal <tgoal206>)
      (<g2061p1> ^type status ^name current-location ^1 <obj-slot2062>)

   # Terminal goal
   (<tgoal206> ^handle gotoloc1term1 ^item-type terminal-goal)
}

### +@go-to-waypoint1 [207]
smem --add {
   # Used internally, used to navigate between any 2 waypoints

   (@go-to-waypoint1 ^handle go-to-waypoint1 ^procedural <proc207> ^item-type action ^goal-graph <sgoal207>)
   (<proc207> ^op_name op_go-to-waypoint1 ^arg1 <parg2071>)
   (<parg2071> ^arg-type waypoint ^id <wp-slot2071>)

   # Start Goal
   (<sgoal207> ^handle go-to-waypoint1start1 ^item-type start-goal ^next.goal <goal2071>)

   # Goal 1: current-waypoint(arg1)
   (<goal2071> ^handle go-to-waypoint1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal207>)

   # Terminal goal
   (<tgoal207> ^handle go-to-waypoint1term1 ^item-type terminal-goal)
}

### +@go-to-next-waypoint1 [208]
smem --add {
   # Used internally, navigate to an adjacent waypoint (edge traversal)

   (@go-to-next-waypoint1 ^handle go-to-next-waypoint1 ^procedural <proc208> ^item-type action ^goal-graph <sgoal208>)
   (<proc208> ^op_name op_go-to-next-waypoint1 ^arg1 <parg2081>)
   (<parg2081> ^arg-type waypoint ^id <wp-slot2081>)

   # Start Goal
   (<sgoal208> ^handle go-to-next-waypoint1start1 ^item-type start-goal ^next.goal <goal2081>)

   # Goal 1: current-waypoint(arg1)
   (<goal2081> ^handle go-to-next-waypoint1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2081p1> ^next.goal <tgoal208>)
      (<g2081p1> ^type status ^name current-waypoint ^1 <wp-slot2081>)

   # Terminal goal
   (<tgoal208> ^handle go-to-next-waypoint1term1 ^item-type terminal-goal)
}

### +@stop1 [209]
smem --add {
   # Stop.

   (@stop1 ^handle stop1 ^procedural <proc209> ^item-type action ^goal-graph <sgoal209>)
   (<proc209> ^op_name op_stop1)

   # Start Goal
   (<sgoal209> ^handle stop1start1 ^item-type start-goal ^next.goal <goal2091>)

   # Goal 1: execute-command(stop)
   (<goal2091> ^handle stop1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2091p1> ^next.goal <tgoal209>)
      (<g2091p1> ^type execute-command ^command-name stop-command)

   # Terminal goal
   (<tgoal209> ^handle stop1term1 ^item-type terminal-goal)
}

### +@scan1 [210]
smem --add {
   # scan the room
   # Scan.
   # Scan until you see the <obj>.

   (@scan1 ^handle scan1 ^procedural <proc210> ^item-type action ^goal-graph <sgoal210>)
   (<proc210> ^op_name op_scan1)

   # Start Goal
   (<sgoal210> ^handle scan1start1 ^item-type start-goal ^next.goal <goal2101>)
   
   # Goal 1: custom
   (<goal2101> ^handle scan1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal210>)

   # Terminal goal
   (<tgoal210> ^handle scan1term1 ^item-type terminal-goal)
}

### +@explore1 [211]
smem --add {
   # Explore.
   # Explore until you see the <obj>.

   (@explore1 ^handle explore1 ^procedural <proc211> ^item-type action ^goal-graph <sgoal211>)
   (<proc211> ^op_name op_explore1)

   # Start Goal
   (<sgoal211> ^handle explore1start1 ^item-type start-goal ^next.goal <goal2111>)

   # Goal 1: custom
   (<goal2111> ^handle explore1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal211>)

   # Terminal goal
   (<tgoal211> ^handle explore1term1 ^item-type terminal-goal)
}

### +@find1 [212]
smem --add {
   # Find the <obj>

   (@find1 ^handle find1 ^procedural <proc212> ^item-type action ^goal-graph <sgoal212>)
   (<proc212> ^op_name op_find1 
              ^arg1 <parg2121>)
      (<parg2121> ^arg-type object ^required true ^id <obj-slot2121>)

   # Start Goal
   (<sgoal212> ^handle find1start1 ^item-type start-goal ^next.goal <goal2121>)

   # Goal 1: confirmed(arg1)
   (<goal2121> ^handle find1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2121p1> ^next.goal <tgoal212>)
      (<g2121p1> ^type unary ^id <pred-slot2121> ^1 <obj-slot2121>)
         (<pred-slot2121> ^default <ps2121def>)
            (<ps2121def> ^predicate-handle confirmed1 ^property-handle is-confirmed1)

   # Terminal goal
   (<tgoal212> ^handle find1term1 ^item-type terminal-goal)
}


### +@approach1 [217]
smem --add {
   # Approach the <obj>

   (@approach1 ^handle approach1 ^procedural <proc217> ^item-type action ^goal-graph <sgoal217>)
   (<proc217> ^op_name op_approach1 
              ^arg1 <parg2171>)
      (<parg2171> ^arg-type object ^required true ^id <obj-slot2171>)

   # Start Goal
   (<sgoal217> ^handle approach1start1 ^item-type start-goal ^next.goal <goal2171>)

   # Goal 1: reachable(arg1)
   (<goal2171> ^handle approach1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2171p1> ^next.goal <tgoal217>)
      (<g2171p1> ^type unary ^id <pred-slot2171> ^1 <obj-slot2171>)
         (<pred-slot2171> ^default <ps2171def>)
            (<ps2171def> ^predicate-handle reachable1 ^property-handle is-reachable1)

   # Terminal goal
   (<tgoal217> ^handle approach1term1 ^item-type terminal-goal)
}

### +@advance1 [218]
smem --add {
   # Advance (drive forward 0.5 meter)

   (@advance1 ^handle advance1 ^procedural <proc218> ^item-type action)
   (<proc218> ^op_name op_advance1)
}

### +@look1 [219]
smem --add {
   # Look up, Look down

   (@look1 ^handle look1 ^procedural <proc219> ^item-type action ^goal-graph <sgoal219>)
   (<proc219> ^op_name op_look1
              ^arg1 <parg2191>)
      (<parg2191> ^arg-type concept ^id <conc-slot2191>)

   # Start Goal
   (<sgoal219> ^handle look1start1 ^item-type start-goal ^next.goal <goal2191>)
   
   # Goal 1: execute-command(look)
   (<goal2191> ^handle look1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2191p1> ^next.goal <tgoal219>)
      (<g2191p1> ^type execute-command ^command-name look-command)

   # Terminal goal
   (<tgoal219> ^handle look1term1 ^item-type terminal-goal)
}

### +@lift1 [220]
smem --add {
   # Lift up, Lift down

   (@lift1 ^handle lift1 ^procedural <proc220> ^item-type action ^goal-graph <sgoal220>)
   (<proc220> ^op_name op_lift1
              ^arg1 <parg2201>)
      (<parg2201> ^arg-type concept ^id <conc-slot2201>)

   # Start Goal
   (<sgoal220> ^handle lift1start1 ^item-type start-goal ^next.goal <goal2201>)

   # Goal 1: execute-command(lift)
   (<goal2201> ^handle lift1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2201p1> ^next.goal <tgoal220>)
      (<g2201p1> ^type execute-command ^command-name lift-command)

   # Terminal goal
   (<tgoal220> ^handle lift1term1 ^item-type terminal-goal)
}

### +@go-to-xy1 [221]
smem --add {
   # Used internally, navigate to a position

   (@go-to-xy1 ^handle go-to-xy1 ^procedural <proc221> ^item-type action ^goal-graph <sgoal221>)
   (<proc221> ^op_name op_go-to-xy1 ^arg1 <parg2211>)
   (<parg2211> ^arg-type coordinate ^id <coord-slot2211>)

   # Start Goal
   (<sgoal221> ^handle goto-xy1start1 ^item-type start-goal ^next.goal <goal2211>)

   # Goal 1: execute-command(go-to)
   (<goal2211> ^handle goto-xy1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2211p1> ^next.goal <tgoal221>)
      (<g2211p1> ^type execute-command ^command-name go-to-command)

   # Terminal goal
   (<tgoal221> ^handle goto-xy1term1 ^item-type terminal-goal)
}

### +@view1 [223]
smem --add {
   # View the <obj>

   (@view1 ^handle view1 ^procedural <proc223> ^item-type action ^goal-graph <sgoal223>)
   (<proc223> ^op_name op_view1 
              ^arg1 <parg2231>)
      (<parg2231> ^arg-type object ^required true ^id <obj-slot2231>)

   # Start Goal
   (<sgoal223> ^handle view1start1 ^item-type start-goal ^next.goal <goal2231>)

   # Goal 1: visible(arg1)
   (<goal2231> ^handle view1goal1 ^item-type task-goal ^pred-count 1 ^1 <g2231p1> ^next.goal <tgoal223>)
      (<g2231p1> ^type unary ^id <pred-slot2231> ^1 <obj-slot2231>)
         (<pred-slot2231> ^default <ps2231def>)
            (<ps2231def> ^predicate-handle visible1 ^property-handle is-visible1)

   # Terminal goal
   (<tgoal223> ^handle view1term1 ^item-type terminal-goal)
}

#!#############################################################################################
#!#############################################################################################
#! Actions involving Language
#! 301-399

### +@ask1 [301]
smem --add {
   # Ask 'QUOTED MESSAGE'   
   # or
   # Ask <person> 'QUOTED MESSAGE'   

   (@ask1 ^handle ask1 ^procedural <proc301> ^item-type action ^goal-graph <sgoal301>)
   (<proc301> ^op_name op_ask1
              ^perform once
              ^arg1 <parg3011>
              ^arg2 <parg3012>)
   (<parg3011> ^arg-type object ^required true ^always-implicit true ^id <obj-slot3011>)
   (<parg3012> ^arg-type object ^id <obj-slot3012>) # The person we are asking (optional)

   # Start Goal
   (<sgoal301> ^handle ask1start1 ^item-type start-goal ^next.goal <goal3011>)

   # Goal 1: execute-command(ask)
   (<goal3011> ^handle ask1goal1 ^item-type task-goal ^pred-count 1 ^1 <g3011p1> ^next.goal <tgoal301>)
      (<g3011p1> ^type execute-command ^command-name ask-command)

   # Terminal goal
   (<tgoal301> ^handle ask1term1 ^item-type terminal-goal)
}

### +@say1 [302]
smem --add {
   # Say 'hello' to bob

   (@say1 ^handle say1 ^procedural <proc302> ^item-type action ^goal-graph <sgoal302>)
   (<proc302> ^op_name op_say1
              ^arg1 <parg3021>
              ^arg2 <parg3022>)
   (<parg3021> ^arg-type object ^required true ^id <obj-slot3021>)
   (<parg3022> ^arg-type partial-predicate ^id <pred-slot3022> ^2 <obj-slot3022>)

   # Start Goal
   (<sgoal302> ^handle say1start1 ^item-type start-goal ^next <nextg3021> ^next <nextg3022>)

   # Conditional Goal 1: If there is no arg2 -> execute-command(say)
   (<nextg3021> ^conditions <g3021conds> ^goal <goal3021>)
      (<g3021conds> ^pred-count 1 ^1 <g3021c1>)
         (<g3021c1> ^type missing-argument ^argument-name arg2)
   (<goal3021> ^handle say1goal1 ^item-type task-goal ^pred-count 1 ^1 <g3021p1> ^next.goal <tgoal302>)
      (<g3021p1> ^type execute-command ^command-name say-command)

   # Conditional Goal 2: If there is an arg2 -> heard2(person, message)
   (<nextg3022> ^conditions <g3022conds> ^goal <goal3022>)
      (<g3022conds> ^pred-count 1 ^1 <g3022c1>)
         (<g3022c1> ^type has-argument ^argument-name arg2)
   (<goal3022> ^handle say1goal2 ^item-type task-goal ^pred-count 1 ^1 <g3022p1> ^next.goal <tgoal302>)
      (<g3022p1> ^type relation ^id <pred-slot3021> ^1 <obj-slot3022> ^2 <obj-slot3021>)
         (<pred-slot3021> ^default <ps3021def>)
            (<ps3021def> ^predicate-handle heard2)

   # Terminal Goal
   (<tgoal302> ^handle say1term1 ^item-type terminal-goal)
}

### +@announce1 [303]
smem --add {
   # Say 'hello' to bob

   (@announce1 ^handle announce1 ^item-type action)
}


#!#############################################################################################
#!#############################################################################################
#! Actions involving the Agent's internal state
#! 401-499

### +@sense1 [401]
   smem --add {

   (@sense1 ^handle sense1 ^procedural <proc401> ^item-type action)
   (<proc401> ^op_name op_sense1)
}

### +@remember1 [403]
smem --add {
   # Remember the current location as the starting location. (WM)
   # Permanently Remember the current location as the office of Mary. (SMEM)

   (@remember1 ^handle remember1 ^procedural <proc403> ^item-type action ^goal-graph <sgoal403>)
   (<proc403> ^op_name op_remember1
              ^perform once
              ^arg1 <parg4031> ^arg2 <parg4032> ^arg3 <parg4033>)
   (<parg4031> ^arg-type object ^required true ^id <obj-slot4031>)
   (<parg4032> ^arg-type object ^required true ^abstract true ^id <obj-slot4032>)
   (<parg4033> ^arg-type object ^id <obj-slot4033>)

   # Start Goal
   (<sgoal403> ^handle remember1start1 ^item-type start-goal ^next.goal <goal4031>)

   # Goal 1: custom
   (<goal4031> ^handle remember1goal1 ^item-type task-goal ^pred-count 1 ^1 <g4031p1> ^next.goal <tgoal403>)
      (<g4031p1> ^type execute-command ^command-name remember-command)

   # Terminal goal
   (<tgoal403> ^handle remember1term1 ^item-type terminal-goal)
}

### +@recall1 [404]
smem --add {
   # Recall the soda in a location

   (@recall1 ^handle recall1 ^procedural <proc404> ^item-type action ^goal-graph <sgoal404>)
    (<proc404> ^op_name op_recall1
                ^arg1 <parg4041> ^arg2 <parg4042>)
    (<parg4041> ^arg-type object ^required true ^id <obj-slot4041>)
    (<parg4042> ^arg-type partial-predicate ^required true ^id <pred-slot4042> ^2 <obj-slot4042>)

   # Start Goal
   (<sgoal404> ^handle recall1start1 ^item-type start-goal ^next.goal <goal4041>)

   # Goal 1: custom
   (<goal4041> ^handle recall1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal404>)

   # Terminal goal
   (<tgoal404> ^handle recall1term1 ^item-type terminal-goal)
}

### +@heard1 [405]
smem --add {
   (@heard1 ^handle heard1 ^procedural <proc405> ^item-type action)
   (<proc405> ^op_name op_heard1)
}

### +@wait1 [406]
smem --add {
   (@wait1 ^handle wait1 ^procedural <proc406> ^item-type action ^goal-graph <sgoal406>)
   (<proc406> ^op_name op_wait1)

   # Start Goal
   (<sgoal406> ^handle wait1start1 ^item-type start-goal ^next.goal <goal4061>)

   # Goal 1: custom
   (<goal4061> ^handle wait1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal406>)

   # Terminal goal
   (<tgoal406> ^handle wait1term1 ^item-type terminal-goal)
}

### +@check1 [407]
smem --add {
   (@check1 ^handle check1 ^procedural <proc407> ^item-type action)
   (<proc407> ^op_name op_check1)
}

### +@repeat1 [407]
smem --add {
   # repeat until <x>

   (@repeat1 ^handle repeat1 ^procedural <proc407> ^item-type action ^goal-graph <sgoal407>)
   (<proc407> ^op_name op_repeat1)

   # Start Goal
   (<sgoal407> ^handle repeat1start1 ^item-type start-goal ^next.goal <goal4071>)

   # Goal 1: custom
   (<goal4071> ^handle repeat1goal1 ^item-type task-goal ^custom-goal true ^next.goal <tgoal407>)

   # Terminal goal
   (<tgoal407> ^handle repeat1term1 ^item-type terminal-goal)
}



#!#############################################################################################
#!#############################################################################################
#! Game Actions
#! 501-599

### +@attend1 [501]
smem --add {
   (@attend1 ^handle attend1 ^procedural <proc501> ^item-type action)
   (<proc501> ^op_name initiate-attend1)
}

### +@ignore1 [502]
smem --add {
   (@ignore1 ^handle ignore1 ^procedural <proc502> ^item-type action)
   (<proc502> ^op_name initiate-ignore1)
}

### +@has1 [503]
smem --add {
   (@has1 ^handle has1 ^procedural <proc503> ^item-type action)
   (<proc503> ^op_name initiate-has1)
}

### +@play1 [504]
smem --add {
   (@play1 ^handle play1 ^procedural <proc504> ^item-type action)
   (<proc504> ^op_name initiate-play1)
}

### +@win1 [505]
smem --add {
   (@win1 ^handle win1 ^procedural <proc505> ^item-type action)
   (<proc505> ^op_name initiate-win1)
}

### +@lose1 [506]
smem --add {
   (@lose1 ^handle lose1 ^procedural <proc506> ^item-type action)
   (<proc506> ^op_name initiate-lose1)
}

### +@prefer1 [507]
smem --add {
   (@prefer1 ^handle prefer1 ^procedural <proc507> ^item-type action)
   (<proc507> ^op_name initiate-prefer1) 
}

### +@avoid1 [508]
smem --add {
   (@avoid1 ^handle avoid1 ^procedural <proc508> ^item-type action)
   (<proc508> ^op_name initiate-avoid1)
}

### +@attack1 [509]
smem --add {
   (@attack1 ^handle attack1 ^procedural <proc509> ^item-type action)
   (<proc509> ^op_name initiate-attack)
}

### +@fill1 [510]
smem --add {
   (@fill1 ^handle fill1 ^procedural <proc510> ^item-type action)
   (<proc510> ^op_name initiate-fill)
}

### +@load1 [511]
smem --add {
   (@load1 ^handle load1 ^procedural <proc511> ^item-type action)
   (<proc511> ^op_name initiate-load)
}

### +@consider1 [512]
smem --add {
   (@consider1 ^handle consider1 ^procedural <proc512> ^item-type action)
   (<proc512> ^op_name initiate-consider1) 
}

### +@match1 [513]
smem --add {
   (@matches1 ^handle matches1) 
}

### +@cover1 [514]
#smem --add {
   #(@covers1 ^handle covers1
   #         ^tense past)
#}

### +@perform1 [515]
smem --add {
   (@perform1 ^handle perform1 ^item-type action)
}
