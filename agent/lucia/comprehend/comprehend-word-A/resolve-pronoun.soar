##!
# @file
#
# @created plindes 20160303
# File: resolve-pronoun.soar
# Author: Peter Lindes
# Created: 3 March 2016
#
# Desc:  Looks up a RefDesc with givenness of "pronoun" or "one-pronoun"
#        in the context to find its referent.
#
#		 The result may be a single item, a set of items,
#		 or nothing.
#
#        The current version only deals with "nom" case.
#        Possesives, "pos" case, will be treated as properties.
#

#    Propose an operator to resolve the reference of a pronoun
sp {comprehend-word*propose*resolve-pronoun
   (state <s> ^problem-space comprehend-word
              ^lexical-access done
              ^cxn <cxn>
             -^reference resolved)
   (<cxn> ^features <features>
          ^m <ref-desc>)
   (<ref-desc> ^is.a RefDesc
               ^givenness << pronoun one-pronoun >>)
   #    For now, only deal with nominal case
   (<features> ^case |nom|)
-->
   (<s> ^operator <o> +)
   (<o> ^name resolve-pronoun
        ^type resolution
        ^features <features>
        ^meaning <ref-desc>
        ^debug-info (concat |Find the referent for a given pronoun.|))
}

#   Look for the referent of "you".
sp {comprehend-word*apply*resolve-pronoun*found-you
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name resolve-pronoun
        ^features <features>
        ^meaning <ref-desc>)
   (<features> ^person |2nd|)
   (<ref-desc> ^givenness pronoun
               ^referent <old-ref>)
   #    Just look for Rosie in the world
   (<ts> ^world <world>)
   (<world> ^robot <robot>)
   (<robot> ^handle rosie)
-->
   #    Post the referent on the RefDesc
   (<ref-desc> ^referent <old-ref> -
               ^referent <robot>)
   #    Set done flag
   (<s> ^reference resolved)
}

#   Create a referent of "me".
sp {comprehend-word*apply*resolve-pronoun*create-me
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name resolve-pronoun
        ^features <features>
        ^meaning <ref-desc>)
   (<features> ^person |1st|)
   (<ref-desc> ^givenness pronoun
               ^referent <old-ref>)
#   #    Just look for Rosie in the world
#   (<ts> ^world <world>)
#   (<world> ^robot <robot>)
#   (<robot> ^handle rosie)
-->
   #    Post the referent on the RefDesc
   (<ref-desc> ^referent <old-ref> -
               ^referent <me>)
   #    Create a mew referent
   (<me> ^handle me
         ^item-type object
         ^property nil) #   Need to lookup person
   #    Set done flag
   (<s> ^reference resolved)
}


###     RULES TO FIND A SALIENT REFERENCE

sp {comprehend-word*apply*resolve-pronoun*to-salient
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name resolve-pronoun
        ^features <features>
        ^meaning <ref-desc>)
   #    Typically this is for "it" or "one"
  -(<features> ^person |1st|)   #   Don't try on "me"
  -(<features> ^person |2nd|)   #   Don't try on "you"
   (<ref-desc> ^givenness << pronoun one-pronoun >>
               ^category <category>
               ^referent <old-ref>)
   #   See if we can find it in the past discourse
   (<ts> ^discourse.salient <salient>)
   (<salient> ^reference <reference>) #   This could be nil
   (<reference> ^referent { <referent> <> nil}) #   This should not be nil
-->
   #    Post the referent on the RefDesc
   (<ref-desc> ^referent <old-ref> -
               ^referent <referent>)
   #    Set done flag
   (<s> ^reference resolved)
}

sp {comprehend-word*apply*resolve-pronoun*no-salient
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name resolve-pronoun
        ^features <features>
        ^meaning <ref-desc>)
   #    Typically this is for "it" or "one"
  -(<features> ^person |1st|)   #   Don't try on "me"
  -(<features> ^person |2nd|)   #   Don't try on "you"
   (<ref-desc> ^givenness << pronoun one-pronoun >>
               ^category <category>
               ^referent <old-ref>)
   #   See if we can find it in the past discourse
 -{(<ts> ^discourse.salient <salient>)
   (<salient> ^reference <reference>)}
-->
   #    Set done flag
   #    The referent should still be nil
   (<s> ^reference resolved)
}
