##!
# @file
#
# @created plindes 20200423
# File: resolve-it-in-condition.soar
# Author: Peter Lindes
# Created: 23 April 2020
#
# Desc: This operator tries to find a referent for "it"
#       in the condition of an If ... then ... sentence
#       when "it" occurs in the then clause.
#
#       The operator will have several propose rules,
#       each of which looks for the declarativie clause
#       that is the content of the if clause and passes
#       that clause as an argument to the operator.
#
#       The operator has several apply rules, each of
#       which knows how to find a RefExpr and its referent
#       within the particular kind of declarative clause
#       found by the proposal.
#
#       Each of these apply rules assigns the referent
#       of the RefExpr that was found as the referent of
#       the RefExpr for "it," which is the current root.
#
#       A preference rule is needed to prefer this operator
#       over resolve-pronoun.
#
#       The result may be a single item, a set of items,
#       or nothing.
#

##################  PROPOSE RULES  ########################

#   Propose an operator to resolve the reference of "it"
#   in the condition that precedes the current clause.
#   In this case the condition we want can be found
#   by going back two ^previous steps and then down just
#   one level within an IfCondition.
sp {comprehend-word*propose*resolve-it-in-condition*back-2-down-1
   (state <s> ^problem-space comprehend-word
              ^lexical-access done
              ^cxn <cxn>
             -^reference resolved)
   #    Find the target nil referent
   (<cxn> ^cxn-name IT
          ^m <ref-desc>
          ^previous <previous-1>)
   (<ref-desc> ^is.a RefDesc
               ^referent nil)
   #    Find the IfCondition we need
   (<previous-1> ^previous <previous-2>)
   (<previous-2> ^cxn-name IfCondition
                 ^declarative <condition>)
-->
   #    Propose the operator
   (<s> ^operator <o> +)
   (<o> ^name resolve-it-in-condition
        ^type resolution
        ^condition <condition>
        ^meaning <ref-desc>
        ^debug-info (concat |Find a referent for "it" in a condition, back 2 down 1.|))
}

#   Propose an operator to resolve the reference of "it"
#   in the condition that precedes the current clause.
#   In this case the condition we want can be found
#   by going back two ^previous steps and then down two
#   levels within an IfConditionThen.
sp {comprehend-word*propose*resolve-it-in-condition*back-2-down-2
   (state <s> ^problem-space comprehend-word
              ^lexical-access done
              ^cxn <cxn>
             -^reference resolved)
   #    Find the target nil referent
   (<cxn> ^cxn-name IT
          ^m <ref-desc>
          ^previous <previous-1>)
   (<ref-desc> ^is.a RefDesc
               ^referent nil)
   #    Find the IfCondition we need
   (<previous-1> ^previous <previous-2>)
   (<previous-2> ^cxn-name IfConditionThen
                 ^condition <if-clause>)
   (<if-clause> ^cxn-name IfCondition
                ^declarative <condition>)
-->
   #    Propose the operator
   (<s> ^operator <o> +)
   (<o> ^name resolve-it-in-condition
        ^type resolution
        ^condition <condition>
        ^meaning <ref-desc>
        ^debug-info (concat |Find a referent for "it" in a condition, back 2 down 2.|))
}

#   Propose an operator to resolve the reference of "it"
#   in the condition that precedes the current clause.
#   In this case the condition we want can be found
#   by going back just one ^previous step and then down just
#   one level within an IfCondition.
sp {comprehend-word*propose*resolve-it-in-condition*back-1-down-1
   (state <s> ^problem-space comprehend-word
              ^lexical-access done
              ^cxn <cxn>
             -^reference resolved)
   #    Find the target nil referent
   (<cxn> ^cxn-name IT
          ^m <ref-desc>
          ^previous <previous-1>)
   (<ref-desc> ^is.a RefDesc
               ^referent nil)
   #    Find the IfCondition we need
   (<previous-1> ^cxn-name IfCondition
                 ^declarative <condition>)
-->
   #    Propose the operator
   (<s> ^operator <o> +)
   (<o> ^name resolve-it-in-condition
        ^type resolution
        ^condition <condition>
        ^meaning <ref-desc>
        ^debug-info (concat |Find a referent for "it" in a condition, back 1 down 1.|))
}

#   Propose an operator to resolve the reference of "it"
#   in the condition that precedes the current clause.
#   In this case the condition we want can be found
#   by going back just one ^previous step and then down two
#   levels within an IfConditionThen.
sp {comprehend-word*propose*resolve-it-in-condition*back-1-down-2
   (state <s> ^problem-space comprehend-word
              ^lexical-access done
              ^cxn <cxn>
             -^reference resolved)
   #    Find the target nil referent
   (<cxn> ^cxn-name IT
          ^m <ref-desc>
          ^previous <previous-1>)
   (<ref-desc> ^is.a RefDesc
               ^referent nil)
   #    Find the IfCondition we need
   (<previous-1> ^cxn-name IfConditionThen
                 ^condition <if-clause>)
   (<if-clause> ^cxn-name IfCondition
                ^declarative <condition>)
-->
   #    Propose the operator
   (<s> ^operator <o> +)
   (<o> ^name resolve-it-in-condition
        ^type resolution
        ^condition <condition>
        ^meaning <ref-desc>
        ^debug-info (concat |Find a referent for "it" in a condition, back 1 down 2.|))
}


##################  APPLY RULES  ########################

#   Look for the referent in a TransitiveSituationClause.
sp {comprehend-word*apply*resolve-it-in-condition*TSC-condition
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name resolve-it-in-condition
        ^condition <condition>
        ^meaning <ref-desc>)
   #    Find the referent in the condition clause
   (<condition> ^cxn-name TransitiveSituationClause
                ^object <ref-expr>)
   (<ref-expr> ^m.referent <referent>)
   (<ref-desc> ^givenness pronoun
               ^referent nil)
-->
   #    Post the referent on the RefDesc
   (<ref-desc> ^referent nil -
               ^referent <referent>)
   #    Set done flag
   (<s> ^reference resolved)
}

#   Look for the referent in a PropertySetIsNotPrepPhrase.
sp {comprehend-word*apply*resolve-it-in-condition*PSINPP-condition
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name resolve-it-in-condition
        ^condition <condition>
        ^meaning <ref-desc>)
   #    Find the referent in the condition clause
   (<condition> ^cxn-name PropertySetIsNotPrepPhrase
                ^ref <ref-expr>)
   (<ref-expr> ^m.referent <referent>)
   (<ref-desc> ^givenness pronoun
               ^referent nil)
-->
   #    Post the referent on the RefDesc
   (<ref-desc> ^referent nil -
               ^referent <referent>)
   #    Set done flag
   (<s> ^reference resolved)
}
