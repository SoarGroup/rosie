#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\actions.ecg'.

#   Action schema
sp {comprehend-word*evoked-schema*Action*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Action
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name Action
               ^is <a>
               ^action nil
               ^direction nil
               ^location nil)
   (<a> ^a Action)
}

#   Action schema
sp {comprehend-word*evoked-schema*Action*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Action
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^action nil
               ^direction nil
               ^location nil)
   (<a> ^a Action)
}

#   ActOnIt schema
sp {comprehend-word*evoked-schema*ActOnIt*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ActOnIt
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name ActOnIt
               ^is <a>
               ^object nil)
   (<a> ^a ActOnIt)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   ActOnIt schema
sp {comprehend-word*evoked-schema*ActOnIt*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ActOnIt
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^object nil)
   (<a> ^a ActOnIt)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   DoItInDirection schema
sp {comprehend-word*evoked-schema*DoItInDirection*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema DoItInDirection
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name DoItInDirection
               ^is <a>
               ^object nil)
   (<a> ^a DoItInDirection)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   DoItInDirection schema
sp {comprehend-word*evoked-schema*DoItInDirection*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema DoItInDirection
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^object nil)
   (<a> ^a DoItInDirection)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   MoveToIt schema
sp {comprehend-word*evoked-schema*MoveToIt*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema MoveToIt
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name MoveToIt
               ^is <a>)
   (<a> ^a MoveToIt)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   MoveToIt schema
sp {comprehend-word*evoked-schema*MoveToIt*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema MoveToIt
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a MoveToIt)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   TurnToIt schema
sp {comprehend-word*evoked-schema*TurnToIt*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema TurnToIt
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name TurnToIt
               ^is <a>
               ^direction nil)
   (<a> ^a TurnToIt)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   TurnToIt schema
sp {comprehend-word*evoked-schema*TurnToIt*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema TurnToIt
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^direction nil)
   (<a> ^a TurnToIt)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   TerminatedAction schema
sp {comprehend-word*evoked-schema*TerminatedAction*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema TerminatedAction
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name TerminatedAction
               ^is <a>
               ^terminator nil)
   (<a> ^a TerminatedAction)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   TerminatedAction schema
sp {comprehend-word*evoked-schema*TerminatedAction*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema TerminatedAction
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^terminator nil)
   (<a> ^a TerminatedAction)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   TerminatedActionOnObject schema
sp {comprehend-word*evoked-schema*TerminatedActionOnObject*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema TerminatedActionOnObject
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name TerminatedActionOnObject
               ^is <a>
               ^object nil
               ^terminator nil)
   (<a> ^a TerminatedActionOnObject)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   TerminatedActionOnObject schema
sp {comprehend-word*evoked-schema*TerminatedActionOnObject*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema TerminatedActionOnObject
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^object nil
               ^terminator nil)
   (<a> ^a TerminatedActionOnObject)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   UntilThereIs schema
sp {comprehend-word*evoked-schema*UntilThereIs*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema UntilThereIs
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name UntilThereIs
               ^is <a>
               ^object nil)
   (<a> ^a UntilThereIs)
}

#   UntilThereIs schema
sp {comprehend-word*evoked-schema*UntilThereIs*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema UntilThereIs
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^object nil)
   (<a> ^a UntilThereIs)
}

#   AskQuestion schema
sp {comprehend-word*evoked-schema*AskQuestion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema AskQuestion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name AskQuestion
               ^is <a>)
   (<a> ^a AskQuestion)
}

#   AskQuestion schema
sp {comprehend-word*evoked-schema*AskQuestion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema AskQuestion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<a> ^a AskQuestion)
}

#   WhatIsQuestion schema
sp {comprehend-word*evoked-schema*WhatIsQuestion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhatIsQuestion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name WhatIsQuestion
               ^is <a>)
   (<a> ^a WhatIsQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   WhatIsQuestion schema
sp {comprehend-word*evoked-schema*WhatIsQuestion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhatIsQuestion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a WhatIsQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   WhatIsObjectQuestion schema
sp {comprehend-word*evoked-schema*WhatIsObjectQuestion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhatIsObjectQuestion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name WhatIsObjectQuestion
               ^is <a>
               ^object nil)
   (<a> ^a WhatIsObjectQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   WhatIsObjectQuestion schema
sp {comprehend-word*evoked-schema*WhatIsObjectQuestion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhatIsObjectQuestion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^object nil)
   (<a> ^a WhatIsObjectQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   WhatIsRelation schema
sp {comprehend-word*evoked-schema*WhatIsRelation*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhatIsRelation
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name WhatIsRelation
               ^is <a>
               ^predicate nil)
   (<a> ^a WhatIsRelation)
   (<e1> ^schema WhatIsQuestion
         ^target <e-target>)
}

#   WhatIsRelation schema
sp {comprehend-word*evoked-schema*WhatIsRelation*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhatIsRelation
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^predicate nil)
   (<a> ^a WhatIsRelation)
   (<e1> ^schema WhatIsQuestion
         ^target <e-target>)
}

#   WhereIsObject schema
sp {comprehend-word*evoked-schema*WhereIsObject*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhereIsObject
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name WhereIsObject
               ^is <a>
               ^object nil)
   (<a> ^a WhereIsObject)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   WhereIsObject schema
sp {comprehend-word*evoked-schema*WhereIsObject*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhereIsObject
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^object nil)
   (<a> ^a WhereIsObject)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   WhatClassIsObjectQuestion schema
sp {comprehend-word*evoked-schema*WhatClassIsObjectQuestion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhatClassIsObjectQuestion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name WhatClassIsObjectQuestion
               ^is <a>
               ^class nil
               ^object nil)
   (<a> ^a WhatClassIsObjectQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   WhatClassIsObjectQuestion schema
sp {comprehend-word*evoked-schema*WhatClassIsObjectQuestion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema WhatClassIsObjectQuestion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^class nil
               ^object nil)
   (<a> ^a WhatClassIsObjectQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   ObjectIsClassQuestion schema
sp {comprehend-word*evoked-schema*ObjectIsClassQuestion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ObjectIsClassQuestion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name ObjectIsClassQuestion
               ^is <a>
               ^object nil
               ^class nil)
   (<a> ^a ObjectIsClassQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   ObjectIsClassQuestion schema
sp {comprehend-word*evoked-schema*ObjectIsClassQuestion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ObjectIsClassQuestion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^object nil
               ^class nil)
   (<a> ^a ObjectIsClassQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   ObjectIsRelationQuestion schema
sp {comprehend-word*evoked-schema*ObjectIsRelationQuestion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ObjectIsRelationQuestion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name ObjectIsRelationQuestion
               ^is <a>
               ^object nil
               ^relation nil)
   (<a> ^a ObjectIsRelationQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

#   ObjectIsRelationQuestion schema
sp {comprehend-word*evoked-schema*ObjectIsRelationQuestion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema ObjectIsRelationQuestion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^object nil
               ^relation nil)
   (<a> ^a ObjectIsRelationQuestion)
   (<e1> ^schema AskQuestion
         ^target <e-target>)
}

