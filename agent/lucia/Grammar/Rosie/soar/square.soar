#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\square.ecg'.

#   SQUARE-adjective construction
sp {comprehend-word*apply*lexical-access*SQUARE-adjective-square
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |square|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SQUARE-adjective
          ^is <a>
          ^orth |square|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a SQUARE-adjective)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   SQUARE-adjective self.m.class <-- @shape constraint
sp {comprehend-word*SQUARE-adjective-constraint*self-m-class*ASSIGN*AT-shape
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SQUARE-adjective
          ^orth |square|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |shape| })
-->
   (<l-slot1> ^class <target> -
              ^class |shape|)
}

#   SQUARE-adjective self.m.name <-- "square1" constraint
sp {comprehend-word*SQUARE-adjective-constraint*self-m-name*ASSIGN*square1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SQUARE-adjective
          ^orth |square|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |square1| })
-->
   (<l-slot1> ^name <target> -
              ^name |square1|)
}

#   SQUARE-noun construction
sp {comprehend-word*apply*lexical-access*SQUARE-noun-square
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |square|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SQUARE-noun
          ^is <a>
          ^orth |square|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a SQUARE-noun)
   (<e-meaning> ^schema Square
                ^target <meaning>)
}

#   SQUARE-class construction
sp {comprehend-word*apply*lexical-access*SQUARE-class-square
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |square|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SQUARE-class
          ^is <a>
          ^orth |square|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of PropertyClassName
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a SQUARE-class)
   (<e-meaning> ^schema PropertyClass
                ^target <meaning>)
}

#   SQUARE-class self.m.name <-- "square1" constraint
sp {comprehend-word*SQUARE-class-constraint*self-m-name*ASSIGN*square1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SQUARE-class
          ^orth |square|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |square1| })
-->
   (<l-slot1> ^name <target> -
              ^name |square1|)
}

#   Square schema
sp {comprehend-word*evoked-schema*Square*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Square
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Square
               ^is <a>
               ^constraint <c1>)
   (<a> ^a Square)
   (<e1> ^schema Block
         ^target <e-target>)
   (<c1> ^attr shape
         ^value square1)
}

#   Square schema
sp {comprehend-word*evoked-schema*Square*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Square
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Square)
   (<e1> ^schema Block
         ^target <e-target>)
   (<e-target> ^constraint <c1>)
   (<c1> ^attr shape
         ^value square1)
}

