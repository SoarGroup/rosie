#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\lex-cxns.ecg'.

#   Word construction
sp {comprehend-word*generalize-cxn*Word*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Word
          ^is <a>
          ^f <form>)
   (<a> -^a Word)
-->
   (<a> ^a Word)
   (<cxn> ^subcase-of Word -
          ^evokes <e1>)
   (<e1> ^schema WordForm
         ^target <form>)
}

#   HasVerbFeatures construction
sp {comprehend-word*generalize-cxn*HasVerbFeatures*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of HasVerbFeatures
          ^is <a>)
   (<a> -^a HasVerbFeatures)
-->
   (<a> ^a HasVerbFeatures)
   (<cxn> ^subcase-of HasVerbFeatures -
          ^evokes <e1>)
   (<e1> ^schema VerbFeatures
         ^target <cxn>)
}

#   Aux construction
sp {comprehend-word*generalize-cxn*Aux*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Aux
          ^is <a>)
   (<a> -^a Aux)
-->
   (<a> ^a Aux)
   (<cxn> ^subcase-of Aux -
          ^subcase-of Word
          ^subcase-of HasVerbFeatures)
}

#   Verb construction
sp {comprehend-word*generalize-cxn*Verb*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Verb
          ^is <a>
          ^m <meaning>)
   (<a> -^a Verb)
-->
   (<a> ^a Verb)
   (<cxn> ^subcase-of Verb -
          ^subcase-of Word
          ^subcase-of HasVerbFeatures
          ^evokes <e-meaning>)
   (<e-meaning> ^schema Process
                ^target <meaning>)
}

#   FiniteToBe construction
sp {comprehend-word*generalize-cxn*FiniteToBe*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of FiniteToBe
          ^is <a>)
   (<a> -^a FiniteToBe)
-->
   (<a> ^a FiniteToBe)
   (<cxn> ^subcase-of FiniteToBe -
          ^subcase-of Word
          ^subcase-of HasVerbFeatures)
}

#   NPSpecifier construction
sp {comprehend-word*generalize-cxn*NPSpecifier*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of NPSpecifier
          ^is <a>
          ^m <meaning>)
   (<a> -^a NPSpecifier)
-->
   (<a> ^a NPSpecifier)
   (<cxn> ^subcase-of NPSpecifier -
          ^subcase-of Word
          ^evokes <e-meaning>
          ^evokes <e1>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
   (<e1> ^schema NominalFeatures
         ^target <cxn>)
}

#   Pronoun construction
sp {comprehend-word*generalize-cxn*Pronoun*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Pronoun
          ^is <a>
          ^m <meaning>)
   (<a> -^a Pronoun)
-->
   (<a> ^a Pronoun)
   (<cxn> ^subcase-of Pronoun -
          ^subcase-of RefExpr
          ^subcase-of Word
          ^evokes <e-meaning>
          ^evokes <e1>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
   (<e1> ^schema NominalFeatures
         ^target <cxn>)
}

#   Pronoun self.m.givenness <-- "pronoun" constraint
sp {comprehend-word*Pronoun-constraint*self-m-givenness*ASSIGN*pronoun
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Pronoun
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |pronoun| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |pronoun|)
}

#   DeicticPronoun construction
sp {comprehend-word*generalize-cxn*DeicticPronoun*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of DeicticPronoun
          ^is <a>)
   (<a> -^a DeicticPronoun)
-->
   (<a> ^a DeicticPronoun)
   (<cxn> ^subcase-of DeicticPronoun -
          ^subcase-of Specifier
          ^subcase-of BareSpecifier)
}

#   DeicticPronoun self.m.givenness <-- "deictic" constraint
sp {comprehend-word*DeicticPronoun-constraint*self-m-givenness*ASSIGN*deictic
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a DeicticPronoun
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |deictic| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |deictic|)
}

#   RelativePronoun construction
sp {comprehend-word*generalize-cxn*RelativePronoun*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of RelativePronoun
          ^is <a>
          ^m <meaning>)
   (<a> -^a RelativePronoun)
-->
   (<a> ^a RelativePronoun)
   (<cxn> ^subcase-of RelativePronoun -
          ^subcase-of RefExpr
          ^subcase-of Word
          ^evokes <e-meaning>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
}

#   RelativePronoun self.m.givenness <-- "relative-pronoun" constraint
sp {comprehend-word*RelativePronoun-constraint*self-m-givenness*ASSIGN*relative-pronoun
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RelativePronoun
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |relative-pronoun| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |relative-pronoun|)
}

#   InterrogativePronoun construction
sp {comprehend-word*generalize-cxn*InterrogativePronoun*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of InterrogativePronoun
          ^is <a>
          ^m <meaning>)
   (<a> -^a InterrogativePronoun)
-->
   (<a> ^a InterrogativePronoun)
   (<cxn> ^subcase-of InterrogativePronoun -
          ^evokes <e-meaning>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
}

#   InterrogativePronoun self.m.givenness <-- "question-pronoun" constraint
sp {comprehend-word*InterrogativePronoun-constraint*self-m-givenness*ASSIGN*question-pronoun
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a InterrogativePronoun
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |question-pronoun| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |question-pronoun|)
}

#   OnePronoun construction
sp {comprehend-word*generalize-cxn*OnePronoun*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of OnePronoun
          ^is <a>
          ^m <meaning>)
   (<a> -^a OnePronoun)
-->
   (<a> ^a OnePronoun)
   (<cxn> ^subcase-of OnePronoun -
          ^subcase-of CommonNoun
          ^evokes <e-meaning>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
}

#   OnePronoun self.m.givenness <-- "one-pronoun" constraint
sp {comprehend-word*OnePronoun-constraint*self-m-givenness*ASSIGN*one-pronoun
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a OnePronoun
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |one-pronoun| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |one-pronoun|)
}

#   Specifier construction
sp {comprehend-word*generalize-cxn*Specifier*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Specifier
          ^is <a>)
   (<a> -^a Specifier)
-->
   (<a> ^a Specifier)
   (<cxn> ^subcase-of Specifier -
          ^subcase-of NPSpecifier)
}

#   Determiner construction
sp {comprehend-word*generalize-cxn*Determiner*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Determiner
          ^is <a>)
   (<a> -^a Determiner)
-->
   (<a> ^a Determiner)
   (<cxn> ^subcase-of Determiner -
          ^subcase-of NPSpecifier)
}

#   Noun construction
sp {comprehend-word*generalize-cxn*Noun*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Noun
          ^is <a>)
   (<a> -^a Noun)
-->
   (<a> ^a Noun)
   (<cxn> ^subcase-of Noun -
          ^subcase-of Word
          ^evokes <e1>)
   (<e1> ^schema NominalFeatures
         ^target <cxn>)
}

#   CommonNoun construction
sp {comprehend-word*generalize-cxn*CommonNoun*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of CommonNoun
          ^is <a>)
   (<a> -^a CommonNoun)
-->
   (<a> ^a CommonNoun)
   (<cxn> ^subcase-of CommonNoun -
          ^subcase-of Noun)
}

#   PropertyClassName construction
sp {comprehend-word*generalize-cxn*PropertyClassName*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of PropertyClassName
          ^is <a>)
   (<a> -^a PropertyClassName)
-->
   (<a> ^a PropertyClassName)
   (<cxn> ^subcase-of PropertyClassName -
          ^subcase-of Noun)
}

#   Property construction
sp {comprehend-word*generalize-cxn*Property*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Property
          ^is <a>)
   (<a> -^a Property)
-->
   (<a> ^a Property)
   (<cxn> ^subcase-of Property -
          ^subcase-of Word)
}

#   Direction construction
sp {comprehend-word*generalize-cxn*Direction*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Direction
          ^is <a>)
   (<a> -^a Direction)
-->
   (<a> ^a Direction)
   (<cxn> ^subcase-of Direction -
          ^subcase-of Property)
}

#   Preposition construction
sp {comprehend-word*generalize-cxn*Preposition*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Preposition
          ^is <a>
          ^m <meaning>)
   (<a> -^a Preposition)
-->
   (<a> ^a Preposition)
   (<cxn> ^subcase-of Preposition -
          ^subcase-of Word
          ^evokes <e-meaning>)
   (<e-meaning> ^schema PrepCore
                ^target <meaning>)
}

#   DirectionalPreposition construction
sp {comprehend-word*generalize-cxn*DirectionalPreposition*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of DirectionalPreposition
          ^is <a>
          ^m <meaning>)
   (<a> -^a DirectionalPreposition)
-->
   (<a> ^a DirectionalPreposition)
   (<cxn> ^subcase-of DirectionalPreposition -
          ^subcase-of Word
          ^evokes <e-meaning>)
   (<e-meaning> ^schema PrepCore
                ^target <meaning>)
}

#   ConditionalPreposition construction
sp {comprehend-word*generalize-cxn*ConditionalPreposition*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of ConditionalPreposition
          ^is <a>
          ^m <meaning>)
   (<a> -^a ConditionalPreposition)
-->
   (<a> ^a ConditionalPreposition)
   (<cxn> ^subcase-of ConditionalPreposition -
          ^subcase-of Word
          ^evokes <e-meaning>)
   (<e-meaning> ^schema PrepCore
                ^target <meaning>)
}

#   Conjunction construction
sp {comprehend-word*generalize-cxn*Conjunction*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Conjunction
          ^is <a>)
   (<a> -^a Conjunction)
-->
   (<a> ^a Conjunction)
   (<cxn> ^subcase-of Conjunction -
          ^subcase-of Word)
}

#   YesNo construction
sp {comprehend-word*generalize-cxn*YesNo*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of YesNo
          ^is <a>
          ^m <meaning>)
   (<a> -^a YesNo)
-->
   (<a> ^a YesNo)
   (<cxn> ^subcase-of YesNo -
          ^subcase-of Word
          ^evokes <e-meaning>)
   (<e-meaning> ^schema YesNoAnswer
                ^target <meaning>)
}

#   Particle construction
sp {comprehend-word*generalize-cxn*Particle*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Particle
          ^is <a>
          ^m <meaning>)
   (<a> -^a Particle)
-->
   (<a> ^a Particle)
   (<cxn> ^subcase-of Particle -
          ^evokes <e-meaning>)
   (<e-meaning> ^schema VerbModifier
                ^target <meaning>)
}

