#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\xv-ref-expr.ecg'.

#   ProperName construction
sp {comprehend-word*generalize-cxn*ProperName*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of ProperName
          ^is <a>
          ^m <meaning>)
   (<a> -^a ProperName)
-->
   (<a> ^a ProperName)
   (<cxn> ^subcase-of ProperName -
          ^subcase-of RefExpr
          ^evokes <e-meaning>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
}

#   ProperName self.m.name <--> self.m.schema-name constraint
sp {comprehend-word*ProperName-constraint*self-m-name*UNIFY*self-m-schema-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ProperName
          ^m <l-slot1>
          ^m <r-slot1>)
   (<l-slot1> ^name { <target> <> <value> })
   (<r-slot1> ^schema-name <value>)
-->
   (<l-slot1> ^name <target> -
              ^name <value>)
}

#   ProperName self.m.givenness <-- "proper-name" constraint
sp {comprehend-word*ProperName-constraint*self-m-givenness*ASSIGN*proper-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ProperName
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |proper-name| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |proper-name|)
}

#   Quantifier construction
sp {comprehend-word*generalize-cxn*Quantifier*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Quantifier
          ^is <a>)
   (<a> -^a Quantifier)
-->
   (<a> ^a Quantifier)
   (<cxn> ^subcase-of Quantifier -)
}

#   Propose an operator for the QuantifiedRefExpr construction
sp {comprehend-word*propose*match-construction*QuantifiedRefExpr
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <refExpr>)
   (<refExpr> ^is.a RefExpr
              ^previous <quantifier>)
   (<quantifier> ^is.a Quantifier
                 ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name QuantifiedRefExpr
        ^span 2
        ^lexicals 0
        ^refExpr <refExpr>
        ^quantifier <quantifier>
        ^previous <previous>
        ^debug-info (concat |Match a QuantifiedRefExpr construction, combination 0.|))
}

#   Apply the operator for the QuantifiedRefExpr construction
sp {comprehend-word*apply*match-construction*QuantifiedRefExpr
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name QuantifiedRefExpr
        ^quantifier <quantifier>
        ^refExpr <refExpr>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name QuantifiedRefExpr
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of RefExpr
              ^constituents <constituents>
              ^quantifier <quantifier>
              ^refExpr <refExpr>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a QuantifiedRefExpr)
   (<constituents> ^quantifier <quantifier>
                   ^refExpr <refExpr>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a QuantifiedRefExpr construction.|))
}

#   QuantifiedRefExpr self.m <--> refExpr.m constraint
sp {comprehend-word*QuantifiedRefExpr-constraint*self-m*UNIFY*refexpr-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a QuantifiedRefExpr
          ^m { <target> <> <value> }
          ^refExpr <r-slot1>)
   (<r-slot1> ^m <value>)
-->
   (<cxn> ^m <target> -
          ^m <value>)
}

#   QuantifiedRefExpr refExpr.m.quantified <--> quantifier.m constraint
sp {comprehend-word*QuantifiedRefExpr-constraint*refExpr-m-quantified*UNIFY*quantifier-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a QuantifiedRefExpr
          ^refExpr <l-slot1>
          ^quantifier <r-slot1>)
   (<l-slot1> ^m <l-slot2>)
   (<l-slot2> ^quantified { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot2> ^quantified <target> -
              ^quantified <value>)
}

#   Propose an operator for the PropertyNoun construction
sp {comprehend-word*propose*match-construction*PropertyNoun
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <noun>)
   (<noun> ^is.a CommonNoun
           ^previous <prop>)
   (<prop> ^is.a Property
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name PropertyNoun
        ^span 2
        ^lexicals 0
        ^noun <noun>
        ^prop <prop>
        ^previous <previous>
        ^debug-info (concat |Match a PropertyNoun construction, combination 0.|))
}

#   Apply the operator for the PropertyNoun construction
sp {comprehend-word*apply*match-construction*PropertyNoun
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name PropertyNoun
        ^prop <prop>
        ^noun <noun>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name PropertyNoun
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of SpecifierNP
              ^constituents <constituents>
              ^prop <prop>
              ^noun <noun>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a PropertyNoun)
   (<constituents> ^prop <prop>
                   ^noun <noun>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a PropertyNoun construction.|))
}

#   PropertyNoun self.m.category <--> noun.m constraint
sp {comprehend-word*PropertyNoun-constraint*self-m-category*UNIFY*noun-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertyNoun
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^category { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^category <target> -
              ^category <value>)
}

#   PropertyNoun self.m.givenness <-- definite constraint
sp {comprehend-word*PropertyNoun-constraint*self-m-givenness*ASSIGN*definite
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertyNoun
          ^m <l-slot1>
          ^definite <value>)
   (<l-slot1> ^givenness { <target> <> <value> })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |definite|)
}

#   PropertyNoun self.m.modifiers <--> prop.m constraint
sp {comprehend-word*PropertyNoun-constraint*self-m-modifiers*UNIFY*prop-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertyNoun
          ^m <l-slot1>
          ^prop <r-slot1>)
   (<l-slot1> ^modifiers { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^modifiers <target> -
              ^modifiers <value>)
}

#   Propose an operator for the Props2Noun construction
sp {comprehend-word*propose*match-construction*Props2Noun
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <noun>)
   (<noun> ^is.a CommonNoun
           ^previous <props2>)
   (<props2> ^is.a Properties2
             ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name Props2Noun
        ^span 2
        ^lexicals 0
        ^noun <noun>
        ^props2 <props2>
        ^previous <previous>
        ^debug-info (concat |Match a Props2Noun construction, combination 0.|))
}

#   Apply the operator for the Props2Noun construction
sp {comprehend-word*apply*match-construction*Props2Noun
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name Props2Noun
        ^props2 <props2>
        ^noun <noun>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name Props2Noun
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of SpecifierNP
              ^constituents <constituents>
              ^props2 <props2>
              ^noun <noun>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a Props2Noun)
   (<constituents> ^props2 <props2>
                   ^noun <noun>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a Props2Noun construction.|))
}

#   Props2Noun self.m.category <--> noun.m constraint
sp {comprehend-word*Props2Noun-constraint*self-m-category*UNIFY*noun-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Props2Noun
          ^m <l-slot1>
          ^noun <r-slot1>)
   (<l-slot1> ^category { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^category <target> -
              ^category <value>)
}

#   Props2Noun self.m.givenness <-- definite constraint
sp {comprehend-word*Props2Noun-constraint*self-m-givenness*ASSIGN*definite
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Props2Noun
          ^m <l-slot1>
          ^definite <value>)
   (<l-slot1> ^givenness { <target> <> <value> })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |definite|)
}

#   Props2Noun self.m.modifiers <--> props2.m constraint
sp {comprehend-word*Props2Noun-constraint*self-m-modifiers*UNIFY*props2-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Props2Noun
          ^m <l-slot1>
          ^props2 <r-slot1>)
   (<l-slot1> ^modifiers { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^modifiers <target> -
              ^modifiers <value>)
}

