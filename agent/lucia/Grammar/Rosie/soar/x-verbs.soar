#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\x-verbs.ecg'.

#   FIND construction
sp {comprehend-word*apply*lexical-access*FIND-find
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |find|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FIND
          ^is <a>
          ^orth |find|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a FIND)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   FIND self.m.class <-- @action constraint
sp {comprehend-word*FIND-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FIND
          ^orth |find|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   FIND self.m.name <-- "find1" constraint
sp {comprehend-word*FIND-constraint*self-m-name*ASSIGN*find1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FIND
          ^orth |find|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |find1| })
-->
   (<l-slot1> ^name <target> -
              ^name |find1|)
}

#   EXPLORE construction
sp {comprehend-word*apply*lexical-access*EXPLORE-explore
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |explore|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name EXPLORE
          ^is <a>
          ^orth |explore|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a EXPLORE)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   EXPLORE self.m.class <-- @action constraint
sp {comprehend-word*EXPLORE-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EXPLORE
          ^orth |explore|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   EXPLORE self.m.name <-- "explore1" constraint
sp {comprehend-word*EXPLORE-constraint*self-m-name*ASSIGN*explore1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EXPLORE
          ^orth |explore|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |explore1| })
-->
   (<l-slot1> ^name <target> -
              ^name |explore1|)
}

#   FETCH construction
sp {comprehend-word*apply*lexical-access*FETCH-fetch
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |fetch|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FETCH
          ^is <a>
          ^orth |fetch|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a FETCH)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   FETCH self.m.class <-- @action constraint
sp {comprehend-word*FETCH-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FETCH
          ^orth |fetch|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   FETCH self.m.name <-- "fetch1" constraint
sp {comprehend-word*FETCH-constraint*self-m-name*ASSIGN*fetch1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FETCH
          ^orth |fetch|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |fetch1| })
-->
   (<l-slot1> ^name <target> -
              ^name |fetch1|)
}

#   PATROL construction
sp {comprehend-word*apply*lexical-access*PATROL-patrol
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |patrol|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name PATROL
          ^is <a>
          ^orth |patrol|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of SimpleMotionVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a PATROL)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   PATROL self.m.class <-- @action constraint
sp {comprehend-word*PATROL-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PATROL
          ^orth |patrol|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   PATROL self.m.name <-- "patrol1" constraint
sp {comprehend-word*PATROL-constraint*self-m-name*ASSIGN*patrol1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PATROL
          ^orth |patrol|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |patrol1| })
-->
   (<l-slot1> ^name <target> -
              ^name |patrol1|)
}

#   RECALL construction
sp {comprehend-word*apply*lexical-access*RECALL-recall
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |recall|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name RECALL
          ^is <a>
          ^orth |recall|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a RECALL)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   RECALL self.m.class <-- @action constraint
sp {comprehend-word*RECALL-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RECALL
          ^orth |recall|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   RECALL self.m.name <-- "recall1" constraint
sp {comprehend-word*RECALL-constraint*self-m-name*ASSIGN*recall1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RECALL
          ^orth |recall|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |recall1| })
-->
   (<l-slot1> ^name <target> -
              ^name |recall1|)
}

#   Orient construction
sp {comprehend-word*generalize-cxn*Orient*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Orient
          ^is <a>)
   (<a> -^a Orient)
-->
   (<a> ^a Orient)
   (<cxn> ^subcase-of Orient -
          ^subcase-of TurnVerb)
}

#   Orient self.m.name <-- "orient1" constraint
sp {comprehend-word*Orient-constraint*self-m-name*ASSIGN*orient1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Orient
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |orient1| })
-->
   (<l-slot1> ^name <target> -
              ^name |orient1|)
}

#   ORIENT construction
sp {comprehend-word*apply*lexical-access*ORIENT-orient
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |orient|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ORIENT
          ^is <a>
          ^orth |orient|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Orient
          ^first-lex nil)
   (<a> ^a ORIENT)
}

#   ORIENT construction
sp {comprehend-word*apply*lexical-access*ORIENT-face
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |face|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ORIENT
          ^is <a>
          ^orth |face|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Orient
          ^first-lex nil)
   (<a> ^a ORIENT)
}

#   DELIVER construction
sp {comprehend-word*apply*lexical-access*DELIVER-deliver
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |deliver|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name DELIVER
          ^is <a>
          ^orth |deliver|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerbNeedsTarget
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a DELIVER)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   DELIVER self.m.class <-- @action constraint
sp {comprehend-word*DELIVER-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a DELIVER
          ^orth |deliver|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   DELIVER self.m.name <-- "deliver1" constraint
sp {comprehend-word*DELIVER-constraint*self-m-name*ASSIGN*deliver1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a DELIVER
          ^orth |deliver|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |deliver1| })
-->
   (<l-slot1> ^name <target> -
              ^name |deliver1|)
}

#   TAKE construction
sp {comprehend-word*apply*lexical-access*TAKE-take
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |take|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name TAKE
          ^is <a>
          ^orth |take|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerbNeedsTarget
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a TAKE)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   TAKE self.m.class <-- @action constraint
sp {comprehend-word*TAKE-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TAKE
          ^orth |take|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   TAKE self.m.name <-- "take1" constraint
sp {comprehend-word*TAKE-constraint*self-m-name*ASSIGN*take1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TAKE
          ^orth |take|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |take1| })
-->
   (<l-slot1> ^name <target> -
              ^name |take1|)
}

#   TransitiveSituationVerb construction
sp {comprehend-word*generalize-cxn*TransitiveSituationVerb*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of TransitiveSituationVerb
          ^is <a>)
   (<a> -^a TransitiveSituationVerb)
-->
   (<a> ^a TransitiveSituationVerb)
   (<cxn> ^subcase-of TransitiveSituationVerb -)
}

#   SENSE construction
sp {comprehend-word*apply*lexical-access*SENSE-sense
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |sense|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SENSE
          ^is <a>
          ^orth |sense|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of TransitiveSituationVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a SENSE)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   SENSE self.m.class <-- @action constraint
sp {comprehend-word*SENSE-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SENSE
          ^orth |sense|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   SENSE self.m.name <-- "sense1" constraint
sp {comprehend-word*SENSE-constraint*self-m-name*ASSIGN*sense1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SENSE
          ^orth |sense|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |sense1| })
-->
   (<l-slot1> ^name <target> -
              ^name |sense1|)
}

#   REACH construction
sp {comprehend-word*apply*lexical-access*REACH-reach
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |reach|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name REACH
          ^is <a>
          ^orth |reach|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of TransitiveSituationVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a REACH)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   REACH self.m.class <-- @action constraint
sp {comprehend-word*REACH-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a REACH
          ^orth |reach|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   REACH self.m.name <-- "sense1" constraint
sp {comprehend-word*REACH-constraint*self-m-name*ASSIGN*sense1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a REACH
          ^orth |reach|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |sense1| })
-->
   (<l-slot1> ^name <target> -
              ^name |sense1|)
}

#   SEE construction
sp {comprehend-word*apply*lexical-access*SEE-see
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |see|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SEE
          ^is <a>
          ^orth |see|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of TransitiveSituationVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a SEE)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   SEE self.m.class <-- @action constraint
sp {comprehend-word*SEE-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SEE
          ^orth |see|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   SEE self.m.name <-- "sense1" constraint
sp {comprehend-word*SEE-constraint*self-m-name*ASSIGN*sense1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SEE
          ^orth |see|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |sense1| })
-->
   (<l-slot1> ^name <target> -
              ^name |sense1|)
}

