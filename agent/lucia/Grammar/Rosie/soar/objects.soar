#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\objects.ecg'.

#   Entity schema
sp {comprehend-word*evoked-schema*Entity*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Entity
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name Entity
               ^is <a>
               ^rosie-category nil)
   (<a> ^a Entity)
}

#   Entity schema
sp {comprehend-word*evoked-schema*Entity*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Entity
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^rosie-category nil)
   (<a> ^a Entity)
}

#   PropertyClass schema
sp {comprehend-word*evoked-schema*PropertyClass*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema PropertyClass
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name PropertyClass
               ^is <a>
               ^name nil)
   (<a> ^a PropertyClass)
}

#   PropertyClass schema
sp {comprehend-word*evoked-schema*PropertyClass*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema PropertyClass
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^name nil)
   (<a> ^a PropertyClass)
}

#   RosieObject schema
sp {comprehend-word*evoked-schema*RosieObject*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema RosieObject
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name RosieObject
               ^is <a>
               ^movable nil)
   (<a> ^a RosieObject)
   (<e1> ^schema Entity
         ^target <e-target>)
}

#   RosieObject schema
sp {comprehend-word*evoked-schema*RosieObject*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema RosieObject
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^movable nil)
   (<a> ^a RosieObject)
   (<e1> ^schema Entity
         ^target <e-target>)
}

#   Block schema
sp {comprehend-word*evoked-schema*Block*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Block
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Block
               ^is <a>
               ^shape nil
               ^color nil
               ^size nil
               ^state nil
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Block)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value block)
   (<c2> ^attr movable
         ^value true)
}

#   Block schema
sp {comprehend-word*evoked-schema*Block*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Block
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^shape nil
               ^color nil
               ^size nil
               ^state nil
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Block)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value block)
   (<c2> ^attr movable
         ^value true)
}

#   Sphere schema
sp {comprehend-word*evoked-schema*Sphere*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Sphere
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Sphere
               ^is <a>
               ^constraint <c1>)
   (<a> ^a Sphere)
   (<e1> ^schema Block
         ^target <e-target>)
   (<c1> ^attr shape
         ^value sphere1)
}

#   Sphere schema
sp {comprehend-word*evoked-schema*Sphere*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Sphere
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Sphere)
   (<e1> ^schema Block
         ^target <e-target>)
   (<e-target> ^constraint <c1>)
   (<c1> ^attr shape
         ^value sphere1)
}

#   Triangle schema
sp {comprehend-word*evoked-schema*Triangle*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Triangle
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Triangle
               ^is <a>
               ^constraint <c1>)
   (<a> ^a Triangle)
   (<e1> ^schema Block
         ^target <e-target>)
   (<c1> ^attr shape
         ^value triangle1)
}

#   Triangle schema
sp {comprehend-word*evoked-schema*Triangle*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Triangle
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Triangle)
   (<e1> ^schema Block
         ^target <e-target>)
   (<e-target> ^constraint <c1>)
   (<c1> ^attr shape
         ^value triangle1)
}

#   Rectangle schema
sp {comprehend-word*evoked-schema*Rectangle*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Rectangle
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Rectangle
               ^is <a>
               ^constraint <c1>)
   (<a> ^a Rectangle)
   (<e1> ^schema Block
         ^target <e-target>)
   (<c1> ^attr shape
         ^value rectangle1)
}

#   Rectangle schema
sp {comprehend-word*evoked-schema*Rectangle*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Rectangle
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Rectangle)
   (<e1> ^schema Block
         ^target <e-target>)
   (<e-target> ^constraint <c1>)
   (<c1> ^attr shape
         ^value rectangle1)
}

#   Box schema
sp {comprehend-word*evoked-schema*Box*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Box
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Box
               ^is <a>
               ^shape |box1|
               ^color nil
               ^size nil
               ^state nil
               ^constraint <c1>)
   (<a> ^a Box)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value block)
}

#   Box schema
sp {comprehend-word*evoked-schema*Box*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Box
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^shape |box1|
               ^color nil
               ^size nil
               ^state nil
               ^constraint <c1>)
   (<a> ^a Box)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value block)
}

#   Object schema
sp {comprehend-word*evoked-schema*Object*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Object
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Object
               ^is <a>
               ^shape nil
               ^color nil
               ^size nil
               ^state nil
               ^constraint <c1>)
   (<a> ^a Object)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value object)
}

#   Object schema
sp {comprehend-word*evoked-schema*Object*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Object
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^shape nil
               ^color nil
               ^size nil
               ^state nil
               ^constraint <c1>)
   (<a> ^a Object)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value object)
}

#   Location schema
sp {comprehend-word*evoked-schema*Location*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Location
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Location
               ^is <a>
               ^constraint <c1>)
   (<a> ^a Location)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value location)
}

#   Location schema
sp {comprehend-word*evoked-schema*Location*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Location
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Location)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<e-target> ^constraint <c1>)
   (<c1> ^attr rosie-category
         ^value location)
}

#   SpatialShape schema
sp {comprehend-word*evoked-schema*SpatialShape*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema SpatialShape
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name SpatialShape
               ^is <a>
               ^spatial-shape nil)
   (<a> ^a SpatialShape)
   (<e1> ^schema RosieObject
         ^target <e-target>)
}

#   SpatialShape schema
sp {comprehend-word*evoked-schema*SpatialShape*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema SpatialShape
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^spatial-shape nil)
   (<a> ^a SpatialShape)
   (<e1> ^schema RosieObject
         ^target <e-target>)
}

#   Wall schema
sp {comprehend-word*evoked-schema*Wall*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Wall
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Wall
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Wall)
   (<e1> ^schema SpatialShape
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value object)
   (<c2> ^attr spatial-shape
         ^value wall1)
}

#   Wall schema
sp {comprehend-word*evoked-schema*Wall*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Wall
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Wall)
   (<e1> ^schema SpatialShape
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value object)
   (<c2> ^attr spatial-shape
         ^value wall1)
}

#   Waypoint schema
sp {comprehend-word*evoked-schema*Waypoint*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Waypoint
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Waypoint
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Waypoint)
   (<e1> ^schema SpatialShape
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value spatial-shape)
   (<c2> ^attr spatial-shape
         ^value waypoint)
}

#   Waypoint schema
sp {comprehend-word*evoked-schema*Waypoint*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Waypoint
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Waypoint)
   (<e1> ^schema SpatialShape
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value spatial-shape)
   (<c2> ^attr spatial-shape
         ^value waypoint)
}

#   Doorway schema
sp {comprehend-word*evoked-schema*Doorway*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Doorway
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Doorway
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Doorway)
   (<e1> ^schema SpatialShape
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value spatial-shape)
   (<c2> ^attr spatial-shape
         ^value door)
}

#   Doorway schema
sp {comprehend-word*evoked-schema*Doorway*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Doorway
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Doorway)
   (<e1> ^schema SpatialShape
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value spatial-shape)
   (<c2> ^attr spatial-shape
         ^value door)
}

