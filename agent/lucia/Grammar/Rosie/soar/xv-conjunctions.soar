#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\xv-conjunctions.ecg'.

#   Propose an operator for the AndDeclarative construction
sp {comprehend-word*propose*match-construction*AndDeclarative
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <second>)
   (<second> ^is.a Declarative
             ^previous <and>)
   (<and> ^is.a AND
          ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name AndDeclarative
        ^span 2
        ^lexicals 1
        ^second <second>
        ^and <and>
        ^previous <previous>
        ^debug-info (concat |Match a AndDeclarative construction, combination 0.|))
}

#   Apply the operator for the AndDeclarative construction
sp {comprehend-word*apply*match-construction*AndDeclarative
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name AndDeclarative
        ^and <and>
        ^second <second>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name AndDeclarative
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^and <and>
              ^second <second>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a AndDeclarative)
   (<constituents> ^and <and>
                   ^second <second>)
   (<e-meaning> ^schema Assertion
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a AndDeclarative construction.|))
}

#   AndDeclarative self.m <--> second.m constraint
sp {comprehend-word*AndDeclarative-constraint*self-m*UNIFY*second-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AndDeclarative
          ^m { <target> <> <value> }
          ^second <r-slot1>)
   (<r-slot1> ^m <value>)
-->
   (<cxn> ^m <target> -
          ^m <value>)
}

#   Propose an operator for the DeclarativeAndDeclarative construction
sp {comprehend-word*propose*match-construction*DeclarativeAndDeclarative
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <secondHalf>)
   (<secondHalf> ^is.a AndDeclarative
                 ^previous <firstHalf>)
   (<firstHalf> ^is.a Declarative
                ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name DeclarativeAndDeclarative
        ^span 2
        ^lexicals 0
        ^secondHalf <secondHalf>
        ^firstHalf <firstHalf>
        ^previous <previous>
        ^debug-info (concat |Match a DeclarativeAndDeclarative construction, combination 0.|))
}

#   Apply the operator for the DeclarativeAndDeclarative construction
sp {comprehend-word*apply*match-construction*DeclarativeAndDeclarative
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name DeclarativeAndDeclarative
        ^firstHalf <firstHalf>
        ^secondHalf <secondHalf>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name DeclarativeAndDeclarative
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Declarative
              ^constituents <constituents>
              ^firstHalf <firstHalf>
              ^secondHalf <secondHalf>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a DeclarativeAndDeclarative)
   (<constituents> ^firstHalf <firstHalf>
                   ^secondHalf <secondHalf>)
   (<e-meaning> ^schema CompoundAssertion
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a DeclarativeAndDeclarative construction.|))
}

#   DeclarativeAndDeclarative self.m.assertion1 <--> firstHalf.m constraint
sp {comprehend-word*DeclarativeAndDeclarative-constraint*self-m-assertion1*UNIFY*firsthalf-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a DeclarativeAndDeclarative
          ^m <l-slot1>
          ^firstHalf <r-slot1>)
   (<l-slot1> ^assertion1 { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^assertion1 <target> -
              ^assertion1 <value>)
}

#   DeclarativeAndDeclarative self.m.assertion2 <--> secondHalf.m constraint
sp {comprehend-word*DeclarativeAndDeclarative-constraint*self-m-assertion2*UNIFY*secondhalf-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a DeclarativeAndDeclarative
          ^m <l-slot1>
          ^secondHalf <r-slot1>)
   (<l-slot1> ^assertion2 { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^assertion2 <target> -
              ^assertion2 <value>)
}

