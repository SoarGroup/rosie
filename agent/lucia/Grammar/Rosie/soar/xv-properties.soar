#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\xv-properties.ecg'.

#   CURRENT construction
sp {comprehend-word*apply*lexical-access*CURRENT-current
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |current|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name CURRENT
          ^is <a>
          ^orth |current|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a CURRENT)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   CURRENT self.m.class <-- @state constraint
sp {comprehend-word*CURRENT-constraint*self-m-class*ASSIGN*AT-state
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CURRENT
          ^orth |current|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |state| })
-->
   (<l-slot1> ^class <target> -
              ^class |state|)
}

#   CURRENT self.m.name <-- "current" constraint
sp {comprehend-word*CURRENT-constraint*self-m-name*ASSIGN*current
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CURRENT
          ^orth |current|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |current| })
-->
   (<l-slot1> ^name <target> -
              ^name |current|)
}

#   EMPTY construction
sp {comprehend-word*apply*lexical-access*EMPTY-empty
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |empty|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name EMPTY
          ^is <a>
          ^orth |empty|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a EMPTY)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   EMPTY self.m.class <-- @state constraint
sp {comprehend-word*EMPTY-constraint*self-m-class*ASSIGN*AT-state
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EMPTY
          ^orth |empty|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |state| })
-->
   (<l-slot1> ^class <target> -
              ^class |state|)
}

#   EMPTY self.m.name <-- "empty" constraint
sp {comprehend-word*EMPTY-constraint*self-m-name*ASSIGN*empty
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EMPTY
          ^orth |empty|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |empty| })
-->
   (<l-slot1> ^name <target> -
              ^name |empty|)
}

#   LIT construction
sp {comprehend-word*apply*lexical-access*LIT-lit
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |lit|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name LIT
          ^is <a>
          ^orth |lit|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a LIT)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   LIT self.m.class <-- @state constraint
sp {comprehend-word*LIT-constraint*self-m-class*ASSIGN*AT-state
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LIT
          ^orth |lit|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |state| })
-->
   (<l-slot1> ^class <target> -
              ^class |state|)
}

#   LIT self.m.name <-- "on2" constraint
sp {comprehend-word*LIT-constraint*self-m-name*ASSIGN*activated1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LIT
          ^orth |lit|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |on2| })
-->
   (<l-slot1> ^name <target> -
              ^name |on2|)
}

