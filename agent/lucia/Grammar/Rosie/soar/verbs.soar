#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\verbs.ecg'.

#   Propose an operator for the PickUp construction
sp {comprehend-word*propose*match-construction*PickUp
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <up>)
   (<up> ^is.a UP
         ^previous <verb>)
   (<verb> ^is.a PickVerb
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name PickUp
        ^span 2
        ^lexicals 1
        ^up <up>
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a PickUp construction, combination 0.|))
}

#   Apply the operator for the PickUp construction
sp {comprehend-word*apply*match-construction*PickUp
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name PickUp
        ^verb <verb>
        ^up <up>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name PickUp
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of ActionVerb
              ^constituents <constituents>
              ^verb <verb>
              ^up <up>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a PickUp)
   (<constituents> ^verb <verb>
                   ^up <up>)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a PickUp construction.|))
}

#   PickUp self.m <--> verb.m constraint
sp {comprehend-word*PickUp-constraint*self-m*UNIFY*verb-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PickUp
          ^m { <target> <> <value> }
          ^verb <r-slot1>)
   (<r-slot1> ^m <value>)
-->
   (<cxn> ^m <target> -
          ^m <value>)
}

#   Propose an operator for the PickVerb construction
sp {comprehend-word*propose*match-construction*PickVerb
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <verb>)
   (<verb> ^is.a PICK
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name PickVerb
        ^span 1
        ^lexicals 1
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a PickVerb construction, combination 0.|))
}

#   Apply the operator for the PickVerb construction
sp {comprehend-word*apply*match-construction*PickVerb
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name PickVerb
        ^verb <verb>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name PickVerb
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of ActionVerb
              ^constituents <constituents>
              ^verb <verb>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a PickVerb)
   (<constituents> ^verb <verb>)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a PickVerb construction.|))
}

#   PickVerb self.m.class <-- @action constraint
sp {comprehend-word*PickVerb-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PickVerb
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   PickVerb self.m.name <-- "pick-up1" constraint
sp {comprehend-word*PickVerb-constraint*self-m-name*ASSIGN*pick-up1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PickVerb
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |pick-up1| })
-->
   (<l-slot1> ^name <target> -
              ^name |pick-up1|)
}

#   PICK construction
sp {comprehend-word*apply*lexical-access*PICK-pick
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |pick|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name PICK
          ^is <a>
          ^orth |pick|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil)
   (<a> ^a PICK)
}

#   UP construction
sp {comprehend-word*apply*lexical-access*UP-up
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |up|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name UP
          ^is <a>
          ^orth |up|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Particle
          ^first-lex nil)
   (<a> ^a UP)
}

#   Propose an operator for the PutDown construction
sp {comprehend-word*propose*match-construction*PutDown
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <down>)
   (<down> ^is.a DOWN
           ^previous <verb>)
   (<verb> ^is.a PutVerb
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name PutDown
        ^span 2
        ^lexicals 1
        ^down <down>
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a PutDown construction, combination 0.|))
}

#   Apply the operator for the PutDown construction
sp {comprehend-word*apply*match-construction*PutDown
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name PutDown
        ^verb <verb>
        ^down <down>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name PutDown
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of ActionVerbNeedsTarget
              ^constituents <constituents>
              ^verb <verb>
              ^down <down>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a PutDown)
   (<constituents> ^verb <verb>
                   ^down <down>)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a PutDown construction.|))
}

#   PutDown self.m <--> verb.m constraint
sp {comprehend-word*PutDown-constraint*self-m*UNIFY*verb-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PutDown
          ^m { <target> <> <value> }
          ^verb <r-slot1>)
   (<r-slot1> ^m <value>)
-->
   (<cxn> ^m <target> -
          ^m <value>)
}

#   Propose an operator for the PutVerb construction
sp {comprehend-word*propose*match-construction*PutVerb
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <verb>)
   (<verb> ^is.a PUT
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name PutVerb
        ^span 1
        ^lexicals 1
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a PutVerb construction, combination 0.|))
}

#   Apply the operator for the PutVerb construction
sp {comprehend-word*apply*match-construction*PutVerb
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name PutVerb
        ^verb <verb>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name PutVerb
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of ActionVerbNeedsTarget
              ^constituents <constituents>
              ^verb <verb>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a PutVerb)
   (<constituents> ^verb <verb>)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a PutVerb construction.|))
}

#   PutVerb self.m.class <-- @action constraint
sp {comprehend-word*PutVerb-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PutVerb
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   PutVerb self.m.name <-- "put-down1" constraint
sp {comprehend-word*PutVerb-constraint*self-m-name*ASSIGN*put-down1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PutVerb
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |put-down1| })
-->
   (<l-slot1> ^name <target> -
              ^name |put-down1|)
}

#   PUT construction
sp {comprehend-word*apply*lexical-access*PUT-put
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |put|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name PUT
          ^is <a>
          ^orth |put|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil)
   (<a> ^a PUT)
}

#   DOWN construction
sp {comprehend-word*apply*lexical-access*DOWN-down
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |down|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name DOWN
          ^is <a>
          ^orth |down|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Particle
          ^subcase-of DirectionalPreposition
          ^first-lex nil)
   (<a> ^a DOWN)
}

#   DOWN self.m.name <-- "down1" constraint
sp {comprehend-word*DOWN-constraint*self-m-name*ASSIGN*down1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a DOWN
          ^orth |down|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |down1| })
-->
   (<l-slot1> ^name <target> -
              ^name |down1|)
}

#   TurnOnVerb construction
sp {comprehend-word*apply*lexical-access*TurnOnVerb-turn-on
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |on|
           ^content <content2>)
   (<s> ^superstate.comprehension.lex-stack <previous1>)
   (<previous1> ^word.orth |turn|
                ^word.content <content1>
                ^previous <previous2>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name TurnOnVerb
          ^is <a>
          ^orth |turn on|
          ^text (concat <content1> | | <content2>)
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex <previous1>
          ^evokes <e-meaning>)
   (<a> ^a TurnOnVerb)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   TurnOnVerb self.m.class <-- @action constraint
sp {comprehend-word*TurnOnVerb-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnOnVerb
          ^orth |turn on|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   TurnOnVerb self.m.name <-- "turn-on1" constraint
sp {comprehend-word*TurnOnVerb-constraint*self-m-name*ASSIGN*turn-on1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnOnVerb
          ^orth |turn on|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |turn-on1| })
-->
   (<l-slot1> ^name <target> -
              ^name |turn-on1|)
}

#   Propose an operator for the TurnObjectOn construction
sp {comprehend-word*propose*match-construction*TurnObjectOn
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <on>)
   (<on> ^is.a ON
         ^previous <object>)
   (<object> ^is.a RefExpr
             ^previous <verb>)
   (<verb> ^is.a TURN
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name TurnObjectOn
        ^span 3
        ^lexicals 2
        ^on <on>
        ^object <object>
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a TurnObjectOn construction, combination 0.|))
}

#   Apply the operator for the TurnObjectOn construction
sp {comprehend-word*apply*match-construction*TurnObjectOn
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name TurnObjectOn
        ^verb <verb>
        ^object <object>
        ^on <on>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name TurnObjectOn
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Imperative
              ^constituents <constituents>
              ^verb <verb>
              ^object <object>
              ^on <on>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a TurnObjectOn)
   (<constituents> ^verb <verb>
                   ^object <object>
                   ^on <on>)
   (<e-meaning> ^schema ActOnIt
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a TurnObjectOn construction.|))
}

#   TurnObjectOn self.m.action <--> verb.m constraint
sp {comprehend-word*TurnObjectOn-constraint*self-m-action*UNIFY*verb-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnObjectOn
          ^m <l-slot1>
          ^verb <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   TurnObjectOn self.m.object <--> object.m constraint
sp {comprehend-word*TurnObjectOn-constraint*self-m-object*UNIFY*object-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnObjectOn
          ^m <l-slot1>
          ^object <r-slot1>)
   (<l-slot1> ^object { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^object <target> -
              ^object <value>)
}

#   TurnObjectOn verb.m.name <-- "turn-on1" constraint
sp {comprehend-word*TurnObjectOn-constraint*verb-m-name*ASSIGN*turn-on1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnObjectOn
          ^verb <l-slot1>)
   (<l-slot1> ^m <l-slot2>)
   (<l-slot2> ^name { <target> <> |turn-on1| })
-->
   (<l-slot2> ^name <target> -
              ^name |turn-on1|)
}

#   TurnObjectOn verb.m.action <-- "nil" constraint
sp {comprehend-word*TurnObjectOn-constraint*verb-m-action*ASSIGN*nil
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TurnObjectOn
          ^verb <l-slot1>)
   (<l-slot1> ^m <l-slot2>)
   (<l-slot2> ^action { <target> <> |nil| })
-->
   (<l-slot2> ^action <target> -
              ^action |nil|)
}

#   Propose an operator for the StoreVerb construction
sp {comprehend-word*propose*match-construction*StoreVerb
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <verb>)
   (<verb> ^is.a STORE
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name StoreVerb
        ^span 1
        ^lexicals 1
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a StoreVerb construction, combination 0.|))
}

#   Apply the operator for the StoreVerb construction
sp {comprehend-word*apply*match-construction*StoreVerb
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name StoreVerb
        ^verb <verb>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name StoreVerb
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of ActionVerbNeedsTarget
              ^constituents <constituents>
              ^verb <verb>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a StoreVerb)
   (<constituents> ^verb <verb>)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a StoreVerb construction.|))
}

#   StoreVerb self.m.class <-- @action constraint
sp {comprehend-word*StoreVerb-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a StoreVerb
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   StoreVerb self.m.name <-- "store1" constraint
sp {comprehend-word*StoreVerb-constraint*self-m-name*ASSIGN*store1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a StoreVerb
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |store1| })
-->
   (<l-slot1> ^name <target> -
              ^name |store1|)
}

#   STORE construction
sp {comprehend-word*apply*lexical-access*STORE-store
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |store|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name STORE
          ^is <a>
          ^orth |store|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil)
   (<a> ^a STORE)
}

#   Propose an operator for the MoveVerb construction
sp {comprehend-word*propose*match-construction*MoveVerb
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <verb>)
   (<verb> ^is.a MOVE
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name MoveVerb
        ^span 1
        ^lexicals 1
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a MoveVerb construction, combination 0.|))
}

#   Apply the operator for the MoveVerb construction
sp {comprehend-word*apply*match-construction*MoveVerb
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name MoveVerb
        ^verb <verb>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name MoveVerb
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of ActionVerbNeedsTarget
              ^constituents <constituents>
              ^verb <verb>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a MoveVerb)
   (<constituents> ^verb <verb>)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a MoveVerb construction.|))
}

#   MoveVerb self.m.class <-- @action constraint
sp {comprehend-word*MoveVerb-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a MoveVerb
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   MoveVerb self.m.name <-- "move1" constraint
sp {comprehend-word*MoveVerb-constraint*self-m-name*ASSIGN*move1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a MoveVerb
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |move1| })
-->
   (<l-slot1> ^name <target> -
              ^name |move1|)
}

#   MOVE construction
sp {comprehend-word*apply*lexical-access*MOVE-move
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |move|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name MOVE
          ^is <a>
          ^orth |move|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil)
   (<a> ^a MOVE)
}

#   DRIVE construction
sp {comprehend-word*apply*lexical-access*DRIVE-drive
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |drive|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name DRIVE
          ^is <a>
          ^orth |drive|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of DriveVerb
          ^first-lex nil)
   (<a> ^a DRIVE)
}

#   DRIVE construction
sp {comprehend-word*apply*lexical-access*DRIVE-go
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |go|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name DRIVE
          ^is <a>
          ^orth |go|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of DriveVerb
          ^first-lex nil)
   (<a> ^a DRIVE)
}

#   STOP construction
sp {comprehend-word*apply*lexical-access*STOP-stop
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |stop|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name STOP
          ^is <a>
          ^orth |stop|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of SimpleMotionVerb
          ^first-lex nil)
   (<a> ^a STOP)
}

#   STOP self.m.name <-- "stop1" constraint
sp {comprehend-word*STOP-constraint*self-m-name*ASSIGN*stop1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a STOP
          ^orth |stop|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |stop1| })
-->
   (<l-slot1> ^name <target> -
              ^name |stop1|)
}

#   TURN construction
sp {comprehend-word*apply*lexical-access*TURN-turn
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |turn|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name TURN
          ^is <a>
          ^orth |turn|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of TurnVerb
          ^first-lex nil)
   (<a> ^a TURN)
}

#   TURN self.m.name <-- "turn1" constraint
sp {comprehend-word*TURN-constraint*self-m-name*ASSIGN*turn1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TURN
          ^orth |turn|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |turn1| })
-->
   (<l-slot1> ^name <target> -
              ^name |turn1|)
}

#   FOLLOW construction
sp {comprehend-word*apply*lexical-access*FOLLOW-follow
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |follow|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FOLLOW
          ^is <a>
          ^orth |follow|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of MotionVerb
          ^first-lex nil)
   (<a> ^a FOLLOW)
}

#   FOLLOW self.m.name <-- "follow-wall1" constraint
sp {comprehend-word*FOLLOW-constraint*self-m-name*ASSIGN*follow-wall1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FOLLOW
          ^orth |follow|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |follow-wall1| })
-->
   (<l-slot1> ^name <target> -
              ^name |follow-wall1|)
}

#   FORWARD-verb construction
sp {comprehend-word*apply*lexical-access*FORWARD-verb-forward
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |forward|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FORWARD-verb
          ^is <a>
          ^orth |forward|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of SimpleMotionVerb
          ^first-lex nil)
   (<a> ^a FORWARD-verb)
}

#   FORWARD-verb self.m.name <-- "go-to1" constraint
sp {comprehend-word*FORWARD-verb-constraint*self-m-name*ASSIGN*go-to1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FORWARD-verb
          ^orth |forward|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |go-to1| })
-->
   (<l-slot1> ^name <target> -
              ^name |go-to1|)
}

