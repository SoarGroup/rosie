#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\words.ecg'.

#   THIS construction
sp {comprehend-word*apply*lexical-access*THIS-this
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |this|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THIS
          ^is <a>
          ^orth |this|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of DeicticPronoun
          ^first-lex nil)
   (<a> ^a THIS)
}

#   THAT-deictic construction
sp {comprehend-word*apply*lexical-access*THAT-deictic-that
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |that|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THAT-deictic
          ^is <a>
          ^orth |that|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of DeicticPronoun
          ^first-lex nil)
   (<a> ^a THAT-deictic)
}

#   THAT-relative construction
sp {comprehend-word*apply*lexical-access*THAT-relative-that
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |that|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THAT-relative
          ^is <a>
          ^orth |that|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of RelativePronoun
          ^first-lex nil)
   (<a> ^a THAT-relative)
}

#   THE construction
sp {comprehend-word*apply*lexical-access*THE-the
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |the|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THE
          ^is <a>
          ^orth |the|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Determiner
          ^first-lex nil)
   (<a> ^a THE)
}

#   THE self.m.givenness <-- "definite" constraint
sp {comprehend-word*THE-constraint*self-m-givenness*ASSIGN*definite
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THE
          ^orth |the|
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |definite| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |definite|)
}

#   A construction
sp {comprehend-word*apply*lexical-access*A-a
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |a|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name A
          ^is <a>
          ^orth |a|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Determiner
          ^first-lex nil)
   (<a> ^a A)
}

#   A self.m.givenness <-- "indefinite" constraint
sp {comprehend-word*A-constraint*self-m-givenness*ASSIGN*indefinite
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a A
          ^orth |a|
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |indefinite| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |indefinite|)
}

#   IT construction
sp {comprehend-word*apply*lexical-access*IT-it
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |it|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name IT
          ^is <a>
          ^orth |it|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Pronoun
          ^first-lex nil)
   (<a> ^a IT)
}

#   IT self.features.case <-- "nom" constraint
sp {comprehend-word*IT-constraint*self-features-case*ASSIGN*nom
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IT
          ^orth |it|
          ^features <l-slot1>)
   (<l-slot1> ^case { <target> <> |nom| })
-->
   (<l-slot1> ^case <target> -
              ^case |nom|)
}

#   IT self.features.number <-- "singular" constraint
sp {comprehend-word*IT-constraint*self-features-number*ASSIGN*singular
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IT
          ^orth |it|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |singular| })
-->
   (<l-slot1> ^number <target> -
              ^number |singular|)
}

#   IT self.features.person <-- "3rd" constraint
sp {comprehend-word*IT-constraint*self-features-person*ASSIGN*3rd
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IT
          ^orth |it|
          ^features <l-slot1>)
   (<l-slot1> ^person { <target> <> |3rd| })
-->
   (<l-slot1> ^person <target> -
              ^person |3rd|)
}

#   IT self.m.category <-- @inanimate constraint
sp {comprehend-word*IT-constraint*self-m-category*ASSIGN*AT-inanimate
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IT
          ^orth |it|
          ^m <l-slot1>)
   (<l-slot1> ^category { <target> <> |inanimate| })
-->
   (<l-slot1> ^category <target> -
              ^category |inanimate|)
}

#   ONE-pronoun construction
sp {comprehend-word*apply*lexical-access*ONE-pronoun-one
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |one|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ONE-pronoun
          ^is <a>
          ^orth |one|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of OnePronoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a ONE-pronoun)
   (<e-meaning> ^schema Object
                ^target <meaning>)
}

#   ONE-pronoun self.features.case <-- "nom" constraint
sp {comprehend-word*ONE-pronoun-constraint*self-features-case*ASSIGN*nom
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ONE-pronoun
          ^orth |one|
          ^features <l-slot1>)
   (<l-slot1> ^case { <target> <> |nom| })
-->
   (<l-slot1> ^case <target> -
              ^case |nom|)
}

#   ONE-pronoun self.features.number <-- "singular" constraint
sp {comprehend-word*ONE-pronoun-constraint*self-features-number*ASSIGN*singular
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ONE-pronoun
          ^orth |one|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |singular| })
-->
   (<l-slot1> ^number <target> -
              ^number |singular|)
}

#   WE construction
sp {comprehend-word*apply*lexical-access*WE-we
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |we|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name WE
          ^is <a>
          ^orth |we|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Pronoun
          ^subcase-of Agent
          ^first-lex nil)
   (<a> ^a WE)
}

#   WE self.features.case <-- "nom" constraint
sp {comprehend-word*WE-constraint*self-features-case*ASSIGN*nom
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a WE
          ^orth |we|
          ^features <l-slot1>)
   (<l-slot1> ^case { <target> <> |nom| })
-->
   (<l-slot1> ^case <target> -
              ^case |nom|)
}

#   WE self.features.number <-- "plural" constraint
sp {comprehend-word*WE-constraint*self-features-number*ASSIGN*plural
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a WE
          ^orth |we|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |plural| })
-->
   (<l-slot1> ^number <target> -
              ^number |plural|)
}

#   WE self.features.person <-- "1st" constraint
sp {comprehend-word*WE-constraint*self-features-person*ASSIGN*1st
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a WE
          ^orth |we|
          ^features <l-slot1>)
   (<l-slot1> ^person { <target> <> |1st| })
-->
   (<l-slot1> ^person <target> -
              ^person |1st|)
}

#   WE self.m.category <-- @animate constraint
sp {comprehend-word*WE-constraint*self-m-category*ASSIGN*AT-animate
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a WE
          ^orth |we|
          ^m <l-slot1>)
   (<l-slot1> ^category { <target> <> |animate| })
-->
   (<l-slot1> ^category <target> -
              ^category |animate|)
}

#   IS construction
sp {comprehend-word*apply*lexical-access*IS-is
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |is|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name IS
          ^is <a>
          ^orth |is|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of FiniteToBe
          ^first-lex nil)
   (<a> ^a IS)
}

#   IS self.features.number <-- "sg" constraint
sp {comprehend-word*IS-constraint*self-features-number*ASSIGN*sg
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IS
          ^orth |is|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |sg| })
-->
   (<l-slot1> ^number <target> -
              ^number |sg|)
}

#   IS self.features.verbform <-- "finite" constraint
sp {comprehend-word*IS-constraint*self-features-verbform*ASSIGN*finite
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IS
          ^orth |is|
          ^features <l-slot1>)
   (<l-slot1> ^verbform { <target> <> |finite| })
-->
   (<l-slot1> ^verbform <target> -
              ^verbform |finite|)
}

#   ARE construction
sp {comprehend-word*apply*lexical-access*ARE-are
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |are|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ARE
          ^is <a>
          ^orth |are|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of FiniteToBe
          ^first-lex nil)
   (<a> ^a ARE)
}

#   ARE self.features.number <-- "pl" constraint
sp {comprehend-word*ARE-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ARE
          ^orth |are|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   ARE self.features.verbform <-- "finite" constraint
sp {comprehend-word*ARE-constraint*self-features-verbform*ASSIGN*finite
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ARE
          ^orth |are|
          ^features <l-slot1>)
   (<l-slot1> ^verbform { <target> <> |finite| })
-->
   (<l-slot1> ^verbform <target> -
              ^verbform |finite|)
}

#   THERE-IS construction
sp {comprehend-word*apply*lexical-access*THERE-IS-there-is
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |is|
           ^content <content2>)
   (<s> ^superstate.comprehension.lex-stack <previous1>)
   (<previous1> ^word.orth |there|
                ^word.content <content1>
                ^previous <previous2>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THERE-IS
          ^is <a>
          ^orth |there is|
          ^text (concat <content1> | | <content2>)
          ^f <form>
          ^m <meaning>
          ^subcase-of FiniteToBe
          ^first-lex <previous1>)
   (<a> ^a THERE-IS)
}

#   THERE-IS self.features.number <-- "sg" constraint
sp {comprehend-word*THERE-IS-constraint*self-features-number*ASSIGN*sg
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THERE-IS
          ^orth |there is|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |sg| })
-->
   (<l-slot1> ^number <target> -
              ^number |sg|)
}

#   THERE-IS self.features.verbform <-- "finite" constraint
sp {comprehend-word*THERE-IS-constraint*self-features-verbform*ASSIGN*finite
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THERE-IS
          ^orth |there is|
          ^features <l-slot1>)
   (<l-slot1> ^verbform { <target> <> |finite| })
-->
   (<l-slot1> ^verbform <target> -
              ^verbform |finite|)
}

#   AND construction
sp {comprehend-word*apply*lexical-access*AND-and
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |and|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name AND
          ^is <a>
          ^orth |and|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Conjunction
          ^first-lex nil)
   (<a> ^a AND)
}

#   YES construction
sp {comprehend-word*apply*lexical-access*YES-yes
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |yes|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name YES
          ^is <a>
          ^orth |yes|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of YesWord
          ^first-lex nil)
   (<a> ^a YES)
}

#   NO construction
sp {comprehend-word*apply*lexical-access*NO-no
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |no|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name NO
          ^is <a>
          ^orth |no|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of YesNo
          ^first-lex nil)
   (<a> ^a NO)
}

#   NO self.m.answer <-- "no" constraint
sp {comprehend-word*NO-constraint*self-m-answer*ASSIGN*no
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NO
          ^orth |no|
          ^m <l-slot1>)
   (<l-slot1> ^answer { <target> <> |no| })
-->
   (<l-slot1> ^answer <target> -
              ^answer |no|)
}

#   IF construction
sp {comprehend-word*apply*lexical-access*IF-if
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |if|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name IF
          ^is <a>
          ^orth |if|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Word
          ^first-lex nil)
   (<a> ^a IF)
}

#   THEN construction
sp {comprehend-word*apply*lexical-access*THEN-then
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |then|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THEN
          ^is <a>
          ^orth |then|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Word
          ^first-lex nil)
   (<a> ^a THEN)
}

#   UNTIL construction
sp {comprehend-word*apply*lexical-access*UNTIL-until
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |until|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name UNTIL
          ^is <a>
          ^orth |until|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ConditionalPreposition
          ^first-lex nil)
   (<a> ^a UNTIL)
}

#   UNTIL self.m.name <-- "until1" constraint
sp {comprehend-word*UNTIL-constraint*self-m-name*ASSIGN*until1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a UNTIL
          ^orth |until|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |until1| })
-->
   (<l-slot1> ^name <target> -
              ^name |until1|)
}

#   WHO construction
sp {comprehend-word*apply*lexical-access*WHO-who
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |who|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name WHO
          ^is <a>
          ^orth |who|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of InterrogativePronoun
          ^first-lex nil)
   (<a> ^a WHO)
}

#   WHAT construction
sp {comprehend-word*apply*lexical-access*WHAT-what
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |what|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name WHAT
          ^is <a>
          ^orth |what|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of InterrogativePronoun
          ^first-lex nil)
   (<a> ^a WHAT)
}

#   WHEN construction
sp {comprehend-word*apply*lexical-access*WHEN-when
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |when|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name WHEN
          ^is <a>
          ^orth |when|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of InterrogativePronoun
          ^first-lex nil)
   (<a> ^a WHEN)
}

#   WHERE construction
sp {comprehend-word*apply*lexical-access*WHERE-where
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |where|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name WHERE
          ^is <a>
          ^orth |where|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of InterrogativePronoun
          ^first-lex nil)
   (<a> ^a WHERE)
}

