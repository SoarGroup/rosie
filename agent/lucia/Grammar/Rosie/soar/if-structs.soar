#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\if-structs.ecg'.

#   Conditional construction
sp {comprehend-word*generalize-cxn*Conditional*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of Conditional
          ^is <a>)
   (<a> -^a Conditional)
-->
   (<a> ^a Conditional)
   (<cxn> ^subcase-of Conditional -)
}

#   Propose an operator for the IfConditionThen construction
sp {comprehend-word*propose*match-construction*IfConditionThen
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <then>)
   (<then> ^is.a THEN
           ^previous <condition>)
   (<condition> ^is.a Declarative
                ^previous <if>)
   (<if> ^is.a IF
         ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name IfConditionThen
        ^span 3
        ^lexicals 2
        ^then <then>
        ^condition <condition>
        ^if <if>
        ^previous <previous>
        ^debug-info (concat |Match a IfConditionThen construction, combination 0.|))
}

#   Apply the operator for the IfConditionThen construction
sp {comprehend-word*apply*match-construction*IfConditionThen
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name IfConditionThen
        ^if <if>
        ^condition <condition>
        ^then <then>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name IfConditionThen
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^if <if>
              ^condition <condition>
              ^then <then>
              ^previous <previous>)
   (<a> ^a IfConditionThen)
   (<constituents> ^if <if>
                   ^condition <condition>
                   ^then <then>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a IfConditionThen construction.|))
}

#   Propose an operator for the IfConditionAs construction
sp {comprehend-word*propose*match-construction*IfConditionAs
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <then>)
   (<then> ^is.a AS
           ^previous <condition>)
   (<condition> ^is.a Declarative
                ^previous <if>)
   (<if> ^is.a IF
         ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name IfConditionAs
        ^span 3
        ^lexicals 2
        ^then <then>
        ^condition <condition>
        ^if <if>
        ^previous <previous>
        ^debug-info (concat |Match a IfConditionAs construction, combination 0.|))
}

#   Apply the operator for the IfConditionAs construction
sp {comprehend-word*apply*match-construction*IfConditionAs
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name IfConditionAs
        ^if <if>
        ^condition <condition>
        ^then <then>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name IfConditionAs
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^if <if>
              ^condition <condition>
              ^then <then>
              ^previous <previous>)
   (<a> ^a IfConditionAs)
   (<constituents> ^if <if>
                   ^condition <condition>
                   ^then <then>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a IfConditionAs construction.|))
}

#   Propose an operator for the IfConditionThenStatement construction
sp {comprehend-word*propose*match-construction*IfConditionThenStatement
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <statement>)
   (<statement> ^is.a Declarative
                ^previous <conditionThen>)
   (<conditionThen> ^is.a IfConditionThen
                    ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name IfConditionThenStatement
        ^span 2
        ^lexicals 0
        ^statement <statement>
        ^conditionThen <conditionThen>
        ^previous <previous>
        ^debug-info (concat |Match a IfConditionThenStatement construction, combination 0.|))
}

#   Apply the operator for the IfConditionThenStatement construction
sp {comprehend-word*apply*match-construction*IfConditionThenStatement
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name IfConditionThenStatement
        ^conditionThen <conditionThen>
        ^statement <statement>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name IfConditionThenStatement
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Conditional
              ^constituents <constituents>
              ^conditionThen <conditionThen>
              ^statement <statement>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a IfConditionThenStatement)
   (<constituents> ^conditionThen <conditionThen>
                   ^statement <statement>)
   (<e-meaning> ^schema IfThenStatement
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a IfConditionThenStatement construction.|))
}

#   IfConditionThenStatement self.m.condition <--> conditionThen.condition.m constraint
sp {comprehend-word*IfConditionThenStatement-constraint*self-m-condition*UNIFY*conditionthen-condition-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IfConditionThenStatement
          ^m <l-slot1>
          ^conditionThen <r-slot1>)
   (<l-slot1> ^condition { <target> <> <value> })
   (<r-slot1> ^condition <r-slot2>)
   (<r-slot2> ^m <value>)
-->
   (<l-slot1> ^condition <target> -
              ^condition <value>)
}

#   IfConditionThenStatement self.m.statement <--> statement.m constraint
sp {comprehend-word*IfConditionThenStatement-constraint*self-m-statement*UNIFY*statement-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IfConditionThenStatement
          ^m <l-slot1>
          ^statement <r-slot1>)
   (<l-slot1> ^statement { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^statement <target> -
              ^statement <value>)
}

#   Propose an operator for the IfConditionThenCommand construction
sp {comprehend-word*propose*match-construction*IfConditionThenCommand
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <command>)
   (<command> ^is.a Imperative
              ^previous <conditionThen>)
   (<conditionThen> ^is.a IfConditionThen
                    ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name IfConditionThenCommand
        ^span 2
        ^lexicals 0
        ^command <command>
        ^conditionThen <conditionThen>
        ^previous <previous>
        ^debug-info (concat |Match a IfConditionThenCommand construction, combination 0.|))
}

#   Apply the operator for the IfConditionThenCommand construction
sp {comprehend-word*apply*match-construction*IfConditionThenCommand
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name IfConditionThenCommand
        ^conditionThen <conditionThen>
        ^command <command>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name IfConditionThenCommand
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Conditional
              ^constituents <constituents>
              ^conditionThen <conditionThen>
              ^command <command>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a IfConditionThenCommand)
   (<constituents> ^conditionThen <conditionThen>
                   ^command <command>)
   (<e-meaning> ^schema IfThenCommand
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a IfConditionThenCommand construction.|))
}

#   IfConditionThenCommand self.m.condition <--> conditionThen.condition.m constraint
sp {comprehend-word*IfConditionThenCommand-constraint*self-m-condition*UNIFY*conditionthen-condition-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IfConditionThenCommand
          ^m <l-slot1>
          ^conditionThen <r-slot1>)
   (<l-slot1> ^condition { <target> <> <value> })
   (<r-slot1> ^condition <r-slot2>)
   (<r-slot2> ^m <value>)
-->
   (<l-slot1> ^condition <target> -
              ^condition <value>)
}

#   IfConditionThenCommand self.m.command <--> command.m constraint
sp {comprehend-word*IfConditionThenCommand-constraint*self-m-command*UNIFY*command-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IfConditionThenCommand
          ^m <l-slot1>
          ^command <r-slot1>)
   (<l-slot1> ^command { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^command <target> -
              ^command <value>)
}

#   Propose an operator for the IfConditionCommand construction
sp {comprehend-word*propose*match-construction*IfConditionCommand
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <command>)
   (<command> ^is.a Imperative
              ^previous <condition>)
   (<condition> ^is.a Declarative
                ^previous <if>)
   (<if> ^is.a IF
         ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name IfConditionCommand
        ^span 3
        ^lexicals 1
        ^command <command>
        ^condition <condition>
        ^if <if>
        ^previous <previous>
        ^debug-info (concat |Match a IfConditionCommand construction, combination 0.|))
}

#   Apply the operator for the IfConditionCommand construction
sp {comprehend-word*apply*match-construction*IfConditionCommand
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name IfConditionCommand
        ^if <if>
        ^condition <condition>
        ^command <command>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name IfConditionCommand
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Conditional
              ^constituents <constituents>
              ^if <if>
              ^condition <condition>
              ^command <command>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a IfConditionCommand)
   (<constituents> ^if <if>
                   ^condition <condition>
                   ^command <command>)
   (<e-meaning> ^schema IfThenCommand
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a IfConditionCommand construction.|))
}

#   IfConditionCommand self.m.condition <--> condition.m constraint
sp {comprehend-word*IfConditionCommand-constraint*self-m-condition*UNIFY*condition-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IfConditionCommand
          ^m <l-slot1>
          ^condition <r-slot1>)
   (<l-slot1> ^condition { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^condition <target> -
              ^condition <value>)
}

#   IfConditionCommand self.m.command <--> command.m constraint
sp {comprehend-word*IfConditionCommand-constraint*self-m-command*UNIFY*command-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IfConditionCommand
          ^m <l-slot1>
          ^command <r-slot1>)
   (<l-slot1> ^command { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^command <target> -
              ^command <value>)
}

#   Propose an operator for the CheckCondition construction
sp {comprehend-word*propose*match-construction*CheckCondition
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <condition>)
   (<condition> ^is.a Declarative
                ^previous <if>)
   (<if> ^is.a IF
         ^previous <action>)
   (<action> ^is.a CHECK
             ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name CheckCondition
        ^span 3
        ^lexicals 2
        ^condition <condition>
        ^if <if>
        ^action <action>
        ^previous <previous>
        ^debug-info (concat |Match a CheckCondition construction, combination 0.|))
}

#   Apply the operator for the CheckCondition construction
sp {comprehend-word*apply*match-construction*CheckCondition
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name CheckCondition
        ^action <action>
        ^if <if>
        ^condition <condition>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name CheckCondition
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^action <action>
              ^if <if>
              ^condition <condition>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a CheckCondition)
   (<constituents> ^action <action>
                   ^if <if>
                   ^condition <condition>)
   (<e-meaning> ^schema CheckIt
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a CheckCondition construction.|))
}

#   CheckCondition self.m.action <--> action.m constraint
sp {comprehend-word*CheckCondition-constraint*self-m-action*UNIFY*action-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CheckCondition
          ^m <l-slot1>
          ^action <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   CheckCondition self.m.condition <--> condition.m constraint
sp {comprehend-word*CheckCondition-constraint*self-m-condition*UNIFY*condition-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a CheckCondition
          ^m <l-slot1>
          ^condition <r-slot1>)
   (<l-slot1> ^condition { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^condition <target> -
              ^condition <value>)
}

#   Propose an operator for the RememberConditionasB construction
sp {comprehend-word*propose*match-construction*RememberConditionasB
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <target>)
   (<target> ^is.a RefExpr
             ^previous <conditionAs>)
   (<conditionAs> ^is.a IfConditionAs
                  ^previous <verb>)
   (<verb> ^is.a REMEMBER
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name RememberConditionasB
        ^span 3
        ^lexicals 1
        ^target <target>
        ^conditionAs <conditionAs>
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a RememberConditionasB construction, combination 0.|))
}

#   Apply the operator for the RememberConditionasB construction
sp {comprehend-word*apply*match-construction*RememberConditionasB
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name RememberConditionasB
        ^verb <verb>
        ^conditionAs <conditionAs>
        ^target <target>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name RememberConditionasB
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of RememberAasB
              ^constituents <constituents>
              ^verb <verb>
              ^conditionAs <conditionAs>
              ^target <target>
              ^evokes <e-meaning>
              ^condition <condition>
              ^evokes <e-condition>
              ^previous <previous>)
   (<a> ^a RememberConditionasB)
   (<constituents> ^verb <verb>
                   ^conditionAs <conditionAs>
                   ^target <target>)
   (<e-meaning> ^schema DoTransfer
                ^target <meaning>)
   (<e-condition> ^schema Condition
                  ^target <condition>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a RememberConditionasB construction.|))
}

#   RememberConditionasB self.m.action <--> verb.m constraint
sp {comprehend-word*RememberConditionasB-constraint*self-m-action*UNIFY*verb-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RememberConditionasB
          ^m <l-slot1>
          ^verb <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   RememberConditionasB self.m.object <--> self.condition constraint
sp {comprehend-word*RememberConditionasB-constraint*self-m-object*UNIFY*self-condition
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RememberConditionasB
          ^m <l-slot1>
          ^condition <value>)
   (<l-slot1> ^object { <target> <> <value> })
-->
   (<l-slot1> ^object <target> -
              ^object <value>)
}

#   RememberConditionasB self.m.object2 <--> target.m constraint
sp {comprehend-word*RememberConditionasB-constraint*self-m-object2*UNIFY*target-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RememberConditionasB
          ^m <l-slot1>
          ^target <r-slot1>)
   (<l-slot1> ^object2 { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^object2 <target> -
              ^object2 <value>)
}

#   RememberConditionasB self.condition.statement <--> conditionAs.condition.m constraint
sp {comprehend-word*RememberConditionasB-constraint*self-condition-statement*UNIFY*conditionas-condition-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RememberConditionasB
          ^condition <l-slot1>
          ^conditionAs <r-slot1>)
   (<l-slot1> ^statement { <target> <> <value> })
   (<r-slot1> ^condition <r-slot2>)
   (<r-slot2> ^m <value>)
-->
   (<l-slot1> ^statement <target> -
              ^statement <value>)
}

#   Condition schema
sp {comprehend-word*evoked-schema*Condition*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Condition
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name Condition
               ^is <a>
               ^statement nil)
   (<a> ^a Condition)
}

#   Condition schema
sp {comprehend-word*evoked-schema*Condition*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Condition
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^statement nil)
   (<a> ^a Condition)
}

#   IfThenStatement schema
sp {comprehend-word*evoked-schema*IfThenStatement*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema IfThenStatement
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name IfThenStatement
               ^is <a>
               ^condition nil
               ^statement nil)
   (<a> ^a IfThenStatement)
}

#   IfThenStatement schema
sp {comprehend-word*evoked-schema*IfThenStatement*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema IfThenStatement
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^condition nil
               ^statement nil)
   (<a> ^a IfThenStatement)
}

#   IfThenCommand schema
sp {comprehend-word*evoked-schema*IfThenCommand*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema IfThenCommand
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name IfThenCommand
               ^is <a>
               ^condition nil
               ^command nil)
   (<a> ^a IfThenCommand)
}

#   IfThenCommand schema
sp {comprehend-word*evoked-schema*IfThenCommand*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema IfThenCommand
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^condition nil
               ^command nil)
   (<a> ^a IfThenCommand)
}

#   CheckIt schema
sp {comprehend-word*evoked-schema*CheckIt*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema CheckIt
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name CheckIt
               ^is <a>
               ^condition nil)
   (<a> ^a CheckIt)
   (<e1> ^schema Action
         ^target <e-target>)
}

#   CheckIt schema
sp {comprehend-word*evoked-schema*CheckIt*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema CheckIt
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^condition nil)
   (<a> ^a CheckIt)
   (<e1> ^schema Action
         ^target <e-target>)
}

