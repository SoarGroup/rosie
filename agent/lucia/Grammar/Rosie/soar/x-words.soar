#   Soar code produced automatically 
#   from file '..\Lucia\Grammars\Rosie\ecg\x-words.ecg'.

#   AN construction
sp {comprehend-word*apply*lexical-access*AN-an
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |an|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name AN
          ^is <a>
          ^orth |an|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Determiner
          ^first-lex nil)
   (<a> ^a AN)
}

#   AN self.m.givenness <-- "indefinite" constraint
sp {comprehend-word*AN-constraint*self-m-givenness*ASSIGN*indefinite
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a AN
          ^orth |an|
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |indefinite| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |indefinite|)
}

#   YOU construction
sp {comprehend-word*apply*lexical-access*YOU-you
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |you|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name YOU
          ^is <a>
          ^orth |you|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Pronoun
          ^subcase-of Agent
          ^first-lex nil)
   (<a> ^a YOU)
}

#   YOU self.features.case <-- "nom" constraint
sp {comprehend-word*YOU-constraint*self-features-case*ASSIGN*nom
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YOU
          ^orth |you|
          ^features <l-slot1>)
   (<l-slot1> ^case { <target> <> |nom| })
-->
   (<l-slot1> ^case <target> -
              ^case |nom|)
}

#   YOU self.features.person <-- "2nd" constraint
sp {comprehend-word*YOU-constraint*self-features-person*ASSIGN*2nd
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YOU
          ^orth |you|
          ^features <l-slot1>)
   (<l-slot1> ^person { <target> <> |2nd| })
-->
   (<l-slot1> ^person <target> -
              ^person |2nd|)
}

#   YOU self.m.category <-- @animate constraint
sp {comprehend-word*YOU-constraint*self-m-category*ASSIGN*AT-animate
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YOU
          ^orth |you|
          ^m <l-slot1>)
   (<l-slot1> ^category { <target> <> |animate| })
-->
   (<l-slot1> ^category <target> -
              ^category |animate|)
}

#   PossesivePronoun construction
sp {comprehend-word*generalize-cxn*PossesivePronoun*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of PossesivePronoun
          ^is <a>)
   (<a> -^a PossesivePronoun)
-->
   (<a> ^a PossesivePronoun)
   (<cxn> ^subcase-of PossesivePronoun -
          ^subcase-of NPSpecifier)
}

#   PossesivePronoun self.features.case <-- "pos" constraint
sp {comprehend-word*PossesivePronoun-constraint*self-features-case*ASSIGN*pos
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PossesivePronoun
          ^features <l-slot1>)
   (<l-slot1> ^case { <target> <> |pos| })
-->
   (<l-slot1> ^case <target> -
              ^case |pos|)
}

#   PossesivePronoun self.m.givenness <-- "pronoun" constraint
sp {comprehend-word*PossesivePronoun-constraint*self-m-givenness*ASSIGN*pronoun
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PossesivePronoun
          ^m <l-slot1>)
   (<l-slot1> ^givenness { <target> <> |pronoun| })
-->
   (<l-slot1> ^givenness <target> -
              ^givenness |pronoun|)
}

#   YOUR construction
sp {comprehend-word*apply*lexical-access*YOUR-your
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |your|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name YOUR
          ^is <a>
          ^orth |your|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of PossesivePronoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a YOUR)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   YOUR self.features.person <-- "2nd" constraint
sp {comprehend-word*YOUR-constraint*self-features-person*ASSIGN*2nd
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YOUR
          ^orth |your|
          ^features <l-slot1>)
   (<l-slot1> ^person { <target> <> |2nd| })
-->
   (<l-slot1> ^person <target> -
              ^person |2nd|)
}

#   YOUR self.m.class <-- @animate constraint
sp {comprehend-word*YOUR-constraint*self-m-class*ASSIGN*AT-animate
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YOUR
          ^orth |your|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |animate| })
-->
   (<l-slot1> ^class <target> -
              ^class |animate|)
}

#   YOUR self.m.name <-- "your1" constraint
sp {comprehend-word*YOUR-constraint*self-m-name*ASSIGN*your1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YOUR
          ^orth |your|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |your1| })
-->
   (<l-slot1> ^name <target> -
              ^name |your1|)
}

#   CardinalNumber construction
sp {comprehend-word*generalize-cxn*CardinalNumber*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of CardinalNumber
          ^is <a>
          ^m <meaning>)
   (<a> -^a CardinalNumber)
-->
   (<a> ^a CardinalNumber)
   (<cxn> ^subcase-of CardinalNumber -
          ^subcase-of Quantifier
          ^evokes <e-meaning>)
   (<e-meaning> ^schema Concept
                ^target <meaning>)
}

#   ONE-number construction
sp {comprehend-word*apply*lexical-access*ONE-number-one
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |one|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ONE-number
          ^is <a>
          ^orth |one|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a ONE-number)
}

#   ONE-number self.features.number <-- "sg" constraint
sp {comprehend-word*ONE-number-constraint*self-features-number*ASSIGN*sg
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ONE-number
          ^orth |one|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |sg| })
-->
   (<l-slot1> ^number <target> -
              ^number |sg|)
}

#   ONE-number self.m.concept-type <-- "number" constraint
sp {comprehend-word*ONE-number-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ONE-number
          ^orth |one|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   ONE-number self.m.concept-handle <-- "*" constraint
sp {comprehend-word*ONE-number-constraint*self-m-concept-handle*ASSIGN**
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ONE-number
          ^orth |one|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |*| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |*|)
}

#   ONE-number self.m.class <-- "number" constraint
sp {comprehend-word*ONE-number-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ONE-number
          ^orth |one|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   ONE-number self.m.name <-- "one" constraint
sp {comprehend-word*ONE-number-constraint*self-m-name*ASSIGN*one
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ONE-number
          ^orth |one|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |one| })
-->
   (<l-slot1> ^name <target> -
              ^name |one|)
}

#   TWO construction
sp {comprehend-word*apply*lexical-access*TWO-two
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |two|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name TWO
          ^is <a>
          ^orth |two|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a TWO)
}

#   TWO self.features.number <-- "pl" constraint
sp {comprehend-word*TWO-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWO
          ^orth |two|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   TWO self.m.concept-type <-- "number" constraint
sp {comprehend-word*TWO-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWO
          ^orth |two|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   TWO self.m.concept-handle <-- "**" constraint
sp {comprehend-word*TWO-constraint*self-m-concept-handle*ASSIGN***
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWO
          ^orth |two|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |**| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |**|)
}

#   TWO self.m.class <-- "number" constraint
sp {comprehend-word*TWO-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWO
          ^orth |two|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   TWO self.m.name <-- "two" constraint
sp {comprehend-word*TWO-constraint*self-m-name*ASSIGN*two
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWO
          ^orth |two|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |two| })
-->
   (<l-slot1> ^name <target> -
              ^name |two|)
}

#   THAT-complementizer construction
sp {comprehend-word*apply*lexical-access*THAT-complementizer-that
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |that|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THAT-complementizer
          ^is <a>
          ^orth |that|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Complementizer
          ^first-lex nil)
   (<a> ^a THAT-complementizer)
}

