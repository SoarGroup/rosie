//	The following constructions were originally in the Common grammar
general construction RefExpr

construction RefExprPrepPhrase
   subcase of RefExpr
   constructional
      constituents
         refExpr: RefExpr
         prepPhrase: PrepPhrase
   meaning: RefDesc
      constraints
         // Copy values from the first RefDesc
         self.m.category <--> refExpr.m.category
         self.m.givenness <--> refExpr.m.givenness
         self.m.modifiers <--> refExpr.m.modifiers
         self.m.referent <--> refExpr.m.referent
         // Add a relation
         self.m.relation <--> prepPhrase.m
    
construction BareNoun
   subcase of RefExpr
   constructional
      constituents
         noun : CommonNoun
   meaning: RefDesc
      constraints
         self.m.name <--> noun.m.schema-name
         self.m.category <--> noun.m
         self.m.givenness <-- "indeterminate"

general construction SpecifierNP
   subcase of RefExpr
    
construction SpecNoun
   subcase of SpecifierNP
   constructional
      constituents
         spec : NPSpecifier
         noun : CommonNoun
   meaning:	RefDesc
      constraints
         self.m.name <--> noun.m.schema-name // ???   What is this for?  Is it necessary?
         self.m.category <--> noun.m
         self.m.givenness <--> spec.m.givenness

construction SpecPropNoun
   subcase of SpecifierNP
   constructional
      constituents
         spec : NPSpecifier
         prop : Property
         noun : CommonNoun
   meaning: RefDesc
      constraints
         self.m.name <--> noun.m.schema-name
         self.m.category <--> noun.m
         self.m.givenness <--> spec.m.givenness
         self.m.modifiers <--> prop.m

construction SpecProps2Noun
    subcase of SpecifierNP
	constructional
		constituents
			spec : NPSpecifier
         props2 : Properties2
			noun : CommonNoun
	meaning: RefDesc
		constraints
			self.m.category <--> noun.m
			self.m.givenness <--> spec.m
         self.m.modifiers <--> props2.m

general construction BareSpecifier
   subcase of RefExpr


//  Would like to have a recursive list, but
//  such that it will not recognize a single
//  lone property.  Don't know how to do this.
construction Properties3
    constructional
        constituents
            first2 : Properties2
            next : Property
    meaning: PropertyDescriptor

construction Properties2
   constructional
      constituents
         first : Property
         next : Property
   meaning: PropertyDescriptor
	  constraints
	     self.m <--> first.m
		 self.m.next <--> next.m

construction RefExprRelClause
   subcase of RefExpr
   constructional
      constituents
         subject : RefExpr
         clause : RelativeClause
   meaning: RefDesc
      constraints
         self.m.givenness <--> subject.m.givenness
         self.m.referent <--> clause.m.referent
         self.m.relation <--> clause.m.relation
         self.m.modifiers <--> clause.m.modifiers

general construction RelativeClause
      
construction RelativeClauseProperty
   subcase of RelativeClause
   constructional
      constituents
         head : HeadRelativeClause
         prop : Property
   meaning: RefDesc
      constraints
         // Copy values from the first RefDesc
         self.m.category <--> head.m.category
         self.m.givenness <--> head.m.givenness
         self.m.referent <--> head.m.referent
         // Add a modifier
         self.m.modifiers <--> prop.m

construction RelativeClausePrepPhrase
   subcase of RelativeClause
   constructional
      constituents
         head : HeadRelativeClause
         prepPhrase: PrepPhrase
   meaning: RefDesc
      constraints
         // Copy values from the first RefDesc
         self.m.category <--> head.m.category
         self.m.givenness <--> head.m.givenness
         self.m.modifiers <--> head.m.modifiers
         self.m.referent <--> head.m.referent
         // Add a relation
         self.m.relation <--> prepPhrase.m

construction HeadRelativeClause
   constructional
      constituents
         pro : RelativePronoun
         tobe : FiniteToBe
   meaning
      constraints
         self.m <--> pro.m

// Things for classes
construction PropertyDefinitionSentence
   constructional
      constituents
         word : UNKNOWN-WORD
         tobe : FiniteToBe
         prop : PropertySet
   meaning: PropertyDefinition
      constraints
         self.m.word <--> word.word.orth
         self.m.class <--> prop.m

construction PropertyRedefinitionSentence
   constructional
      constituents
         word : Property
         tobe : FiniteToBe
         prop : PropertySet
   meaning: PropertyRedefinition
      constraints
         self.m.word <--> word.word.orth
         self.m.old <--> word.m
         self.m.class <--> prop.m
		 
general construction PropertySet

construction Property1Set
   subcase of PropertySet
   constructional
      constituents
         optional det : Determiner
         optional adj : Property
         class : PropertyClassName
   meaning: PropertySetDescriptor
      constraints
         self.m.givenness <--> det.m.givenness
         self.m.property <--> adj.m
         self.m.predicate <--> class.m.predicate

//  Deprecated
general construction DefiniteNP
	subcase of RefExpr

construction THE-Mods-Noun
	subcase of DefiniteNP
	constructional
		constituents
			det : THE
            mods : ModifierList
			noun : CommonNoun
	meaning: RefDesc
		constraints
			self.m.category <--> noun.m
			self.m.givenness <-- definite

construction ModifierList
    constructional
        constituents
            optional list : ModifierList
            next : Modifier

