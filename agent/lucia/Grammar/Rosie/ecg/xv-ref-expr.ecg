//  A way to recognize proper names
// ProperName builds a RefExpr from a lexical
// item that is a subcase.
// The lexical item might have multiple words.
general construction ProperName
   subcase of RefExpr
   constructional
   meaning:	RefDesc
      constraints
         self.m.name <--> self.m.schema-name
//         self.m.category <--> self.m // Recursion not OK!!!
         self.m.givenness <-- "proper-name"

// A Quantifier is not an NPSpecifier
general construction Quantifier

// A RefExpr with a quantifier in front
/// PL 9/1/2020 Adding meaning for quantifiers
// Previously this recognized the syntax,
// but completely ignored the semantics.
// That's how it was in the gold standard.

construction QuantifiedRefExpr
   subcase of RefExpr
   constructional
      constituents
         quantifier : Quantifier
         refExpr : RefExpr
   meaning:	RefDesc
      constraints
         self.m <--> refExpr.m
		 refExpr.m.quantified <--> quantifier.m

// Allow a noun phrase with no specifier
// This is needed for "All red triangles are in the pantry."
construction PropertyNoun
    subcase of SpecifierNP
	constructional
		constituents
           prop : Property
           noun : CommonNoun
	meaning: RefDesc
		constraints
         self.m.category <--> noun.m
         self.m.givenness <-- definite
         self.m.modifiers <--> prop.m

// This is needed for "Clean small red triangle."
construction Props2Noun
    subcase of SpecifierNP
	constructional
		constituents
         props2 : Properties2
			noun : CommonNoun
	meaning: RefDesc
		constraints
			self.m.category <--> noun.m
			self.m.givenness <-- definite
         self.m.modifiers <--> props2.m
