//  Determiners
construction AN
   subcase of Determiner
   form
      constraints
         self.f.orth <-- "an"
   meaning
      constraints
         self.m.givenness <-- "indefinite"

//  Pronouns
construction YOU
   subcase of Pronoun, Agent
   constructional
     constraints
       self.features.case <-- "nom"
       self.features.person <-- "2nd"
   form
      constraints
         self.f.orth <-- "you"
   meaning
      constraints
         self.m.category <-- @animate

//  Posessive pronouns
general construction PossesivePronoun
   subcase of NPSpecifier
   constructional
      constraints
         self.features.case <-- "pos"
   meaning
      constraints
         self.m.givenness <-- "pronoun"  

construction YOUR
   subcase of PossesivePronoun
   constructional
     constraints
       self.features.person <-- "2nd"
   form
      constraints
         self.f.orth <-- "your"
   meaning: PropertyDescriptor
      constraints
         self.m.class <-- @animate
         self.m.name <-- "your1"

//  Cardinal numbers
general construction CardinalNumber
   subcase of Quantifier
   meaning: Concept
   
construction ONE-number
   subcase of CardinalNumber
    constructional
        constraints
            self.features.number <-- "sg"
   form
      constraints
         self.f.orth <-- "one"
   meaning
      constraints
         self.m.concept-type <-- "number"
         self.m.concept-handle <-- "*"	//	The strlen will be the actual value
         self.m.class <-- "number"
         self.m.name <-- "one"
   
construction TWO
   subcase of CardinalNumber
    constructional
        constraints
            self.features.number <-- "pl"
   form
      constraints
         self.f.orth <-- "two"
   meaning
      constraints
         self.m.concept-type <-- "number"
         self.m.concept-handle <-- "**"	//	The strlen will be the actual value
         self.m.class <-- "number"
         self.m.name <-- "two"

// Miscellaneous
construction THAT-complementizer
   subcase of Complementizer
   form
      constraints
         self.f.orth <-- "that"

