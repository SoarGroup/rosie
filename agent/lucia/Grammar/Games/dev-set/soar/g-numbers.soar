#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\g-numbers.ecg'.

#   Propose an operator for the ThereAreNumber construction
sp {comprehend-word*propose*match-construction*ThereAreNumber
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <number>)
   (<number> ^is.a CardinalNumber
             ^previous <there-are>)
   (<there-are> ^is.a ThereAre
                ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name ThereAreNumber
        ^span 2
        ^lexicals 0
        ^number <number>
        ^there-are <there-are>
        ^previous <previous>
        ^debug-info (concat |Match a ThereAreNumber construction, combination 0.|))
}

#   Apply the operator for the ThereAreNumber construction
sp {comprehend-word*apply*match-construction*ThereAreNumber
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name ThereAreNumber
        ^there-are <there-are>
        ^number <number>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name ThereAreNumber
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Declarative
              ^constituents <constituents>
              ^there-are <there-are>
              ^number <number>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a ThereAreNumber)
   (<constituents> ^there-are <there-are>
                   ^number <number>)
   (<e-meaning> ^schema NumberAssertion
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a ThereAreNumber construction.|))
}

#   ThereAreNumber self.m.number <--> number.m.predicate constraint
sp {comprehend-word*ThereAreNumber-constraint*self-m-number*UNIFY*number-m-predicate
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ThereAreNumber
          ^m <l-slot1>
          ^number <r-slot1>)
   (<l-slot1> ^number { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^predicate <value>)
-->
   (<l-slot1> ^number <target> -
              ^number <value>)
}

#   THREE construction
sp {comprehend-word*apply*lexical-access*THREE-three
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |three|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THREE
          ^is <a>
          ^orth |three|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a THREE)
}

#   THREE self.features.number <-- "pl" constraint
sp {comprehend-word*THREE-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THREE
          ^orth |three|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   THREE self.m.concept-type <-- "number" constraint
sp {comprehend-word*THREE-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THREE
          ^orth |three|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   THREE self.m.concept-handle <-- "***" constraint
sp {comprehend-word*THREE-constraint*self-m-concept-handle*ASSIGN****
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THREE
          ^orth |three|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |***| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |***|)
}

#   THREE self.m.class <-- "number" constraint
sp {comprehend-word*THREE-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THREE
          ^orth |three|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   THREE self.m.name <-- "three" constraint
sp {comprehend-word*THREE-constraint*self-m-name*ASSIGN*three
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THREE
          ^orth |three|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |three| })
-->
   (<l-slot1> ^name <target> -
              ^name |three|)
}

#   FOUR construction
sp {comprehend-word*apply*lexical-access*FOUR-four
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |four|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FOUR
          ^is <a>
          ^orth |four|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a FOUR)
}

#   FOUR self.features.number <-- "pl" constraint
sp {comprehend-word*FOUR-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FOUR
          ^orth |four|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   FOUR self.m.concept-type <-- "number" constraint
sp {comprehend-word*FOUR-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FOUR
          ^orth |four|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   FOUR self.m.concept-handle <-- "****" constraint
sp {comprehend-word*FOUR-constraint*self-m-concept-handle*ASSIGN*****
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FOUR
          ^orth |four|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |****| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |****|)
}

#   FOUR self.m.class <-- "number" constraint
sp {comprehend-word*FOUR-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FOUR
          ^orth |four|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   FOUR self.m.name <-- "four" constraint
sp {comprehend-word*FOUR-constraint*self-m-name*ASSIGN*four
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FOUR
          ^orth |four|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |four| })
-->
   (<l-slot1> ^name <target> -
              ^name |four|)
}

#   FIVE construction
sp {comprehend-word*apply*lexical-access*FIVE-five
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |five|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FIVE
          ^is <a>
          ^orth |five|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a FIVE)
}

#   FIVE self.features.number <-- "pl" constraint
sp {comprehend-word*FIVE-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FIVE
          ^orth |five|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   FIVE self.m.concept-type <-- "number" constraint
sp {comprehend-word*FIVE-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FIVE
          ^orth |five|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   FIVE self.m.concept-handle <-- "*****" constraint
sp {comprehend-word*FIVE-constraint*self-m-concept-handle*ASSIGN******
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FIVE
          ^orth |five|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |*****| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |*****|)
}

#   FIVE self.m.class <-- "number" constraint
sp {comprehend-word*FIVE-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FIVE
          ^orth |five|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   FIVE self.m.name <-- "five" constraint
sp {comprehend-word*FIVE-constraint*self-m-name*ASSIGN*five
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FIVE
          ^orth |five|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |five| })
-->
   (<l-slot1> ^name <target> -
              ^name |five|)
}

#   SIX construction
sp {comprehend-word*apply*lexical-access*SIX-six
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |six|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SIX
          ^is <a>
          ^orth |six|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a SIX)
}

#   SIX self.features.number <-- "pl" constraint
sp {comprehend-word*SIX-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SIX
          ^orth |six|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   SIX self.m.concept-type <-- "number" constraint
sp {comprehend-word*SIX-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SIX
          ^orth |six|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   SIX self.m.concept-handle <-- "******" constraint
sp {comprehend-word*SIX-constraint*self-m-concept-handle*ASSIGN*******
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SIX
          ^orth |six|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |******| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |******|)
}

#   SIX self.m.class <-- "number" constraint
sp {comprehend-word*SIX-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SIX
          ^orth |six|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   SIX self.m.name <-- "six" constraint
sp {comprehend-word*SIX-constraint*self-m-name*ASSIGN*six
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SIX
          ^orth |six|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |six| })
-->
   (<l-slot1> ^name <target> -
              ^name |six|)
}

#   SEVEN construction
sp {comprehend-word*apply*lexical-access*SEVEN-seven
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |seven|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SEVEN
          ^is <a>
          ^orth |seven|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a SEVEN)
}

#   SEVEN self.features.number <-- "pl" constraint
sp {comprehend-word*SEVEN-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SEVEN
          ^orth |seven|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   SEVEN self.m.concept-type <-- "number" constraint
sp {comprehend-word*SEVEN-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SEVEN
          ^orth |seven|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   SEVEN self.m.concept-handle <-- "*******" constraint
sp {comprehend-word*SEVEN-constraint*self-m-concept-handle*ASSIGN********
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SEVEN
          ^orth |seven|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |*******| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |*******|)
}

#   SEVEN self.m.class <-- "number" constraint
sp {comprehend-word*SEVEN-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SEVEN
          ^orth |seven|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   SEVEN self.m.name <-- "seven" constraint
sp {comprehend-word*SEVEN-constraint*self-m-name*ASSIGN*seven
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SEVEN
          ^orth |seven|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |seven| })
-->
   (<l-slot1> ^name <target> -
              ^name |seven|)
}

#   EIGHT construction
sp {comprehend-word*apply*lexical-access*EIGHT-eight
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |eight|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name EIGHT
          ^is <a>
          ^orth |eight|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a EIGHT)
}

#   EIGHT self.features.number <-- "pl" constraint
sp {comprehend-word*EIGHT-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EIGHT
          ^orth |eight|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   EIGHT self.m.concept-type <-- "number" constraint
sp {comprehend-word*EIGHT-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EIGHT
          ^orth |eight|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   EIGHT self.m.concept-handle <-- "********" constraint
sp {comprehend-word*EIGHT-constraint*self-m-concept-handle*ASSIGN*********
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EIGHT
          ^orth |eight|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |********| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |********|)
}

#   EIGHT self.m.class <-- "number" constraint
sp {comprehend-word*EIGHT-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EIGHT
          ^orth |eight|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   EIGHT self.m.name <-- "eight" constraint
sp {comprehend-word*EIGHT-constraint*self-m-name*ASSIGN*eight
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a EIGHT
          ^orth |eight|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |eight| })
-->
   (<l-slot1> ^name <target> -
              ^name |eight|)
}

#   NINE construction
sp {comprehend-word*apply*lexical-access*NINE-nine
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |nine|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name NINE
          ^is <a>
          ^orth |nine|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a NINE)
}

#   NINE self.features.number <-- "pl" constraint
sp {comprehend-word*NINE-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NINE
          ^orth |nine|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   NINE self.m.concept-type <-- "number" constraint
sp {comprehend-word*NINE-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NINE
          ^orth |nine|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   NINE self.m.concept-handle <-- "*********" constraint
sp {comprehend-word*NINE-constraint*self-m-concept-handle*ASSIGN**********
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NINE
          ^orth |nine|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |*********| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |*********|)
}

#   NINE self.m.class <-- "number" constraint
sp {comprehend-word*NINE-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NINE
          ^orth |nine|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   NINE self.m.name <-- "nine" constraint
sp {comprehend-word*NINE-constraint*self-m-name*ASSIGN*nine
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NINE
          ^orth |nine|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |nine| })
-->
   (<l-slot1> ^name <target> -
              ^name |nine|)
}

#   TEN construction
sp {comprehend-word*apply*lexical-access*TEN-ten
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |ten|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name TEN
          ^is <a>
          ^orth |ten|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a TEN)
}

#   TEN self.features.number <-- "pl" constraint
sp {comprehend-word*TEN-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TEN
          ^orth |ten|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   TEN self.m.concept-type <-- "number" constraint
sp {comprehend-word*TEN-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TEN
          ^orth |ten|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   TEN self.m.concept-handle <-- "**********" constraint
sp {comprehend-word*TEN-constraint*self-m-concept-handle*ASSIGN***********
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TEN
          ^orth |ten|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |**********| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |**********|)
}

#   TEN self.m.class <-- "number" constraint
sp {comprehend-word*TEN-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TEN
          ^orth |ten|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   TEN self.m.name <-- "ten" constraint
sp {comprehend-word*TEN-constraint*self-m-name*ASSIGN*ten
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TEN
          ^orth |ten|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |ten| })
-->
   (<l-slot1> ^name <target> -
              ^name |ten|)
}

#   ELEVEN construction
sp {comprehend-word*apply*lexical-access*ELEVEN-eleven
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |eleven|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ELEVEN
          ^is <a>
          ^orth |eleven|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a ELEVEN)
}

#   ELEVEN self.features.number <-- "pl" constraint
sp {comprehend-word*ELEVEN-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ELEVEN
          ^orth |eleven|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   ELEVEN self.m.concept-type <-- "number" constraint
sp {comprehend-word*ELEVEN-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ELEVEN
          ^orth |eleven|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   ELEVEN self.m.concept-handle <-- "***********" constraint
sp {comprehend-word*ELEVEN-constraint*self-m-concept-handle*ASSIGN************
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ELEVEN
          ^orth |eleven|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |***********| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |***********|)
}

#   ELEVEN self.m.class <-- "number" constraint
sp {comprehend-word*ELEVEN-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ELEVEN
          ^orth |eleven|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   ELEVEN self.m.name <-- "eleven" constraint
sp {comprehend-word*ELEVEN-constraint*self-m-name*ASSIGN*eleven
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ELEVEN
          ^orth |eleven|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |eleven| })
-->
   (<l-slot1> ^name <target> -
              ^name |eleven|)
}

#   TWELVE construction
sp {comprehend-word*apply*lexical-access*TWELVE-twelve
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |twelve|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name TWELVE
          ^is <a>
          ^orth |twelve|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CardinalNumber
          ^first-lex nil)
   (<a> ^a TWELVE)
}

#   TWELVE self.features.number <-- "pl" constraint
sp {comprehend-word*TWELVE-constraint*self-features-number*ASSIGN*pl
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWELVE
          ^orth |twelve|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |pl| })
-->
   (<l-slot1> ^number <target> -
              ^number |pl|)
}

#   TWELVE self.m.concept-type <-- "number" constraint
sp {comprehend-word*TWELVE-constraint*self-m-concept-type*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWELVE
          ^orth |twelve|
          ^m <l-slot1>)
   (<l-slot1> ^concept-type { <target> <> |number| })
-->
   (<l-slot1> ^concept-type <target> -
              ^concept-type |number|)
}

#   TWELVE self.m.concept-handle <-- "************" constraint
sp {comprehend-word*TWELVE-constraint*self-m-concept-handle*ASSIGN*************
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWELVE
          ^orth |twelve|
          ^m <l-slot1>)
   (<l-slot1> ^concept-handle { <target> <> |************| })
-->
   (<l-slot1> ^concept-handle <target> -
              ^concept-handle |************|)
}

#   TWELVE self.m.class <-- "number" constraint
sp {comprehend-word*TWELVE-constraint*self-m-class*ASSIGN*number
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWELVE
          ^orth |twelve|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |number| })
-->
   (<l-slot1> ^class <target> -
              ^class |number|)
}

#   TWELVE self.m.name <-- "twelve" constraint
sp {comprehend-word*TWELVE-constraint*self-m-name*ASSIGN*twelve
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a TWELVE
          ^orth |twelve|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |twelve| })
-->
   (<l-slot1> ^name <target> -
              ^name |twelve|)
}

#   NumberAssertion schema
sp {comprehend-word*evoked-schema*NumberAssertion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema NumberAssertion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name NumberAssertion
               ^is <a>
               ^number nil)
   (<a> ^a NumberAssertion)
   (<e1> ^schema Assertion
         ^target <e-target>)
}

#   NumberAssertion schema
sp {comprehend-word*evoked-schema*NumberAssertion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema NumberAssertion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^number nil)
   (<a> ^a NumberAssertion)
   (<e1> ^schema Assertion
         ^target <e-target>)
}

