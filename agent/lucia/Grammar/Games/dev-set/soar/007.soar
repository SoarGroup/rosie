#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\007.ecg'.

#   BLUE construction
sp {comprehend-word*apply*lexical-access*BLUE-blue
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |blue|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name BLUE
          ^is <a>
          ^orth |blue|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a BLUE)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   BLUE self.m.class <-- @color constraint
sp {comprehend-word*BLUE-constraint*self-m-class*ASSIGN*AT-color
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BLUE
          ^orth |blue|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |color| })
-->
   (<l-slot1> ^class <target> -
              ^class |color|)
}

#   BLUE self.m.name <-- "blue1" constraint
sp {comprehend-word*BLUE-constraint*self-m-name*ASSIGN*blue1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BLUE
          ^orth |blue|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |blue1| })
-->
   (<l-slot1> ^name <target> -
              ^name |blue1|)
}

#   YELLOW construction
sp {comprehend-word*apply*lexical-access*YELLOW-yellow
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |yellow|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name YELLOW
          ^is <a>
          ^orth |yellow|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a YELLOW)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   YELLOW self.m.class <-- @color constraint
sp {comprehend-word*YELLOW-constraint*self-m-class*ASSIGN*AT-color
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YELLOW
          ^orth |yellow|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |color| })
-->
   (<l-slot1> ^class <target> -
              ^class |color|)
}

#   YELLOW self.m.name <-- "yellow1" constraint
sp {comprehend-word*YELLOW-constraint*self-m-name*ASSIGN*yellow1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YELLOW
          ^orth |yellow|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |yellow1| })
-->
   (<l-slot1> ^name <target> -
              ^name |yellow1|)
}

