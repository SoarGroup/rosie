#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\013.ecg'.

#   Propose an operator for the PropertySetRelClause construction
sp {comprehend-word*propose*match-construction*PropertySetRelClause
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <clause>)
   (<clause> ^is.a RelativeClause
             ^previous <subject>)
   (<subject> ^is.a PropertySet
              ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name PropertySetRelClause
        ^span 2
        ^lexicals 0
        ^clause <clause>
        ^subject <subject>
        ^previous <previous>
        ^debug-info (concat |Match a PropertySetRelClause construction, combination 0.|))
}

#   Apply the operator for the PropertySetRelClause construction
sp {comprehend-word*apply*match-construction*PropertySetRelClause
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name PropertySetRelClause
        ^subject <subject>
        ^clause <clause>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name PropertySetRelClause
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of PropertySet
              ^constituents <constituents>
              ^subject <subject>
              ^clause <clause>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a PropertySetRelClause)
   (<constituents> ^subject <subject>
                   ^clause <clause>)
   (<e-meaning> ^schema RefDesc
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a PropertySetRelClause construction.|))
}

#   PropertySetRelClause self.m.givenness <--> subject.m.givenness constraint
sp {comprehend-word*PropertySetRelClause-constraint*self-m-givenness*UNIFY*subject-m-givenness
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertySetRelClause
          ^m <l-slot1>
          ^subject <r-slot1>)
   (<l-slot1> ^givenness { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^givenness <value>)
-->
   (<l-slot1> ^givenness <target> -
              ^givenness <value>)
}

#   PropertySetRelClause self.m.referent <--> clause.m.referent constraint
sp {comprehend-word*PropertySetRelClause-constraint*self-m-referent*UNIFY*clause-m-referent
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertySetRelClause
          ^m <l-slot1>
          ^clause <r-slot1>)
   (<l-slot1> ^referent { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^referent <value>)
-->
   (<l-slot1> ^referent <target> -
              ^referent <value>)
}

#   PropertySetRelClause self.m.relation <--> clause.m.relation constraint
sp {comprehend-word*PropertySetRelClause-constraint*self-m-relation*UNIFY*clause-m-relation
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertySetRelClause
          ^m <l-slot1>
          ^clause <r-slot1>)
   (<l-slot1> ^relation { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^relation <value>)
-->
   (<l-slot1> ^relation <target> -
              ^relation <value>)
}

#   PropertySetRelClause self.m.modifiers <--> clause.m.modifiers constraint
sp {comprehend-word*PropertySetRelClause-constraint*self-m-modifiers*UNIFY*clause-m-modifiers
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertySetRelClause
          ^m <l-slot1>
          ^clause <r-slot1>)
   (<l-slot1> ^modifiers { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^modifiers <value>)
-->
   (<l-slot1> ^modifiers <target> -
              ^modifiers <value>)
}

#   Propose an operator for the PropertySetIsProperty construction
sp {comprehend-word*propose*match-construction*PropertySetIsProperty
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <prop>)
   (<prop> ^is.a Property
           ^previous <tobe>)
   (<tobe> ^is.a FiniteToBe
           ^previous <propSet>)
   (<propSet> ^is.a PropertySet
              ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name PropertySetIsProperty
        ^span 3
        ^lexicals 0
        ^prop <prop>
        ^tobe <tobe>
        ^propSet <propSet>
        ^previous <previous>
        ^debug-info (concat |Match a PropertySetIsProperty construction, combination 0.|))
}

#   Apply the operator for the PropertySetIsProperty construction
sp {comprehend-word*apply*match-construction*PropertySetIsProperty
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name PropertySetIsProperty
        ^propSet <propSet>
        ^tobe <tobe>
        ^prop <prop>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name PropertySetIsProperty
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Declarative
              ^constituents <constituents>
              ^propSet <propSet>
              ^tobe <tobe>
              ^prop <prop>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a PropertySetIsProperty)
   (<constituents> ^propSet <propSet>
                   ^tobe <tobe>
                   ^prop <prop>)
   (<e-meaning> ^schema PropertyApplication
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a PropertySetIsProperty construction.|))
}

#   PropertySetIsProperty self.m.property <--> prop.m constraint
sp {comprehend-word*PropertySetIsProperty-constraint*self-m-property*UNIFY*prop-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertySetIsProperty
          ^m <l-slot1>
          ^prop <r-slot1>)
   (<l-slot1> ^property { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^property <target> -
              ^property <value>)
}

#   PropertySetIsProperty self.m.target <--> propSet.m constraint
sp {comprehend-word*PropertySetIsProperty-constraint*self-m-target*UNIFY*propset-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertySetIsProperty
          ^m <l-slot1>
          ^propSet <r-slot1>)
   (<l-slot1> ^target { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^target <target> -
              ^target <value>)
}

#   Propose an operator for the NegatedPrepPhrase construction
sp {comprehend-word*propose*match-construction*NegatedPrepPhrase
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <base>)
   (<base> ^is.a PrepPhrase
           ^previous <negator>)
   (<negator> ^is.a NOT
              ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name NegatedPrepPhrase
        ^span 2
        ^lexicals 1
        ^base <base>
        ^negator <negator>
        ^previous <previous>
        ^debug-info (concat |Match a NegatedPrepPhrase construction, combination 0.|))
}

#   Apply the operator for the NegatedPrepPhrase construction
sp {comprehend-word*apply*match-construction*NegatedPrepPhrase
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name NegatedPrepPhrase
        ^negator <negator>
        ^base <base>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name NegatedPrepPhrase
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of PrepPhrase
              ^constituents <constituents>
              ^negator <negator>
              ^base <base>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a NegatedPrepPhrase)
   (<constituents> ^negator <negator>
                   ^base <base>)
   (<e-meaning> ^schema NegatedPrepRelation
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a NegatedPrepPhrase construction.|))
}

#   NegatedPrepPhrase self.m.prep <--> base.m.prep constraint
sp {comprehend-word*NegatedPrepPhrase-constraint*self-m-prep*UNIFY*base-m-prep
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NegatedPrepPhrase
          ^m <l-slot1>
          ^base <r-slot1>)
   (<l-slot1> ^prep { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^prep <value>)
-->
   (<l-slot1> ^prep <target> -
              ^prep <value>)
}

#   NegatedPrepPhrase self.m.object <--> base.m.object constraint
sp {comprehend-word*NegatedPrepPhrase-constraint*self-m-object*UNIFY*base-m-object
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NegatedPrepPhrase
          ^m <l-slot1>
          ^base <r-slot1>)
   (<l-slot1> ^object { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^object <value>)
-->
   (<l-slot1> ^object <target> -
              ^object <value>)
}

#   NegatedPrepPhrase self.m.negation <-- "true" constraint
sp {comprehend-word*NegatedPrepPhrase-constraint*self-m-negation*ASSIGN*true
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NegatedPrepPhrase
          ^m <l-slot1>)
   (<l-slot1> ^negation { <target> <> |true| })
-->
   (<l-slot1> ^negation <target> -
              ^negation |true|)
}

#   NegatedPrepRelation schema
sp {comprehend-word*evoked-schema*NegatedPrepRelation*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema NegatedPrepRelation
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name NegatedPrepRelation
               ^is <a>
               ^negation nil)
   (<a> ^a NegatedPrepRelation)
   (<e1> ^schema PrepRelation
         ^target <e-target>)
}

#   NegatedPrepRelation schema
sp {comprehend-word*evoked-schema*NegatedPrepRelation*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema NegatedPrepRelation
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^negation nil)
   (<a> ^a NegatedPrepRelation)
   (<e1> ^schema PrepRelation
         ^target <e-target>)
}

