#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\005.ecg'.

#   Propose an operator for the IfConditionThenStatement construction
sp {comprehend-word*propose*match-construction*IfConditionThenStatement
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <statement>)
   (<statement> ^is.a Declarative
                ^previous <conditionPart>)
   (<conditionPart> ^is.a IfConditionThen
                    ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name IfConditionThenStatement
        ^span 2
        ^lexicals 0
        ^statement <statement>
        ^conditionPart <conditionPart>
        ^previous <previous>
        ^debug-info (concat |Match a IfConditionThenStatement construction, combination 0.|))
}

#   Apply the operator for the IfConditionThenStatement construction
sp {comprehend-word*apply*match-construction*IfConditionThenStatement
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name IfConditionThenStatement
        ^conditionPart <conditionPart>
        ^statement <statement>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name IfConditionThenStatement
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Conditional
              ^constituents <constituents>
              ^conditionPart <conditionPart>
              ^statement <statement>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a IfConditionThenStatement)
   (<constituents> ^conditionPart <conditionPart>
                   ^statement <statement>)
   (<e-meaning> ^schema IfThenStatement
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a IfConditionThenStatement construction.|))
}

#   IfConditionThenStatement self.m.condition <--> conditionPart.condition.declarative.m constraint
sp {comprehend-word*IfConditionThenStatement-constraint*self-m-condition*UNIFY*conditionpart-condition-declarative-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IfConditionThenStatement
          ^m <l-slot1>
          ^conditionPart <r-slot1>)
   (<l-slot1> ^condition { <target> <> <value> })
   (<r-slot1> ^condition <r-slot2>)
   (<r-slot2> ^declarative <r-slot3>)
   (<r-slot3> ^m <value>)
-->
   (<l-slot1> ^condition <target> -
              ^condition <value>)
}

#   IfConditionThenStatement self.m.statement <--> statement.m constraint
sp {comprehend-word*IfConditionThenStatement-constraint*self-m-statement*UNIFY*statement-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a IfConditionThenStatement
          ^m <l-slot1>
          ^statement <r-slot1>)
   (<l-slot1> ^statement { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^statement <target> -
              ^statement <value>)
}

#   IfThenStatement schema
sp {comprehend-word*evoked-schema*IfThenStatement*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema IfThenStatement
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name IfThenStatement
               ^is <a>
               ^condition nil
               ^statement nil)
   (<a> ^a IfThenStatement)
}

#   IfThenStatement schema
sp {comprehend-word*evoked-schema*IfThenStatement*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema IfThenStatement
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^condition nil
               ^statement nil)
   (<a> ^a IfThenStatement)
}

