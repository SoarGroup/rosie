#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\008.ecg'.

#   THE-NUMBER-OF construction
sp {comprehend-word*apply*lexical-access*THE-NUMBER-OF-the-number-of
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |of|
           ^content <content3>)
   (<s> ^superstate.comprehension.lex-stack <previous1>)
   (<previous1> ^word.orth |number|
                ^word.content <content2>
                ^previous <previous2>)
   (<previous2> ^word.orth |the|
                ^word.content <content1>
                ^previous <previous3>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name THE-NUMBER-OF
          ^is <a>
          ^orth |the number of|
          ^text (concat <content1> | | <content2> | | <content3>)
          ^f <form>
          ^m <meaning>
          ^subcase-of FunctionName
          ^first-lex <previous2>)
   (<a> ^a THE-NUMBER-OF)
}

#   THE-NUMBER-OF self.m.fn-handle <-- "number1" constraint
sp {comprehend-word*THE-NUMBER-OF-constraint*self-m-fn-handle*ASSIGN*number1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a THE-NUMBER-OF
          ^orth |the number of|
          ^m <l-slot1>)
   (<l-slot1> ^fn-handle { <target> <> |number1| })
-->
   (<l-slot1> ^fn-handle <target> -
              ^fn-handle |number1|)
}

#   LOCATIONS construction
sp {comprehend-word*apply*lexical-access*LOCATIONS-locations
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |locations|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name LOCATIONS
          ^is <a>
          ^orth |locations|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a LOCATIONS)
   (<e-meaning> ^schema Location
                ^target <meaning>)
}

#   LOCATIONS self.features.case <-- "nom" constraint
sp {comprehend-word*LOCATIONS-constraint*self-features-case*ASSIGN*nom
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LOCATIONS
          ^orth |locations|
          ^features <l-slot1>)
   (<l-slot1> ^case { <target> <> |nom| })
-->
   (<l-slot1> ^case <target> -
              ^case |nom|)
}

#   LOCATIONS self.features.number <-- "plural" constraint
sp {comprehend-word*LOCATIONS-constraint*self-features-number*ASSIGN*plural
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LOCATIONS
          ^orth |locations|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |plural| })
-->
   (<l-slot1> ^number <target> -
              ^number |plural|)
}

#   LOCATIONS self.features.person <-- "3rd" constraint
sp {comprehend-word*LOCATIONS-constraint*self-features-person*ASSIGN*3rd
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LOCATIONS
          ^orth |locations|
          ^features <l-slot1>)
   (<l-slot1> ^person { <target> <> |3rd| })
-->
   (<l-slot1> ^person <target> -
              ^person |3rd|)
}

#   BLOCKS construction
sp {comprehend-word*apply*lexical-access*BLOCKS-blocks
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |blocks|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name BLOCKS
          ^is <a>
          ^orth |blocks|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a BLOCKS)
   (<e-meaning> ^schema Block
                ^target <meaning>)
}

#   BLOCKS self.features.case <-- "nom" constraint
sp {comprehend-word*BLOCKS-constraint*self-features-case*ASSIGN*nom
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BLOCKS
          ^orth |blocks|
          ^features <l-slot1>)
   (<l-slot1> ^case { <target> <> |nom| })
-->
   (<l-slot1> ^case <target> -
              ^case |nom|)
}

#   BLOCKS self.features.number <-- "plural" constraint
sp {comprehend-word*BLOCKS-constraint*self-features-number*ASSIGN*plural
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BLOCKS
          ^orth |blocks|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |plural| })
-->
   (<l-slot1> ^number <target> -
              ^number |plural|)
}

#   BLOCKS self.features.person <-- "3rd" constraint
sp {comprehend-word*BLOCKS-constraint*self-features-person*ASSIGN*3rd
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BLOCKS
          ^orth |blocks|
          ^features <l-slot1>)
   (<l-slot1> ^person { <target> <> |3rd| })
-->
   (<l-slot1> ^person <target> -
              ^person |3rd|)
}

#   COVERED construction
sp {comprehend-word*apply*lexical-access*COVERED-covered
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |covered|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name COVERED
          ^is <a>
          ^orth |covered|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a COVERED)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   COVERED self.m.class <-- @property constraint
sp {comprehend-word*COVERED-constraint*self-m-class*ASSIGN*AT-property
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a COVERED
          ^orth |covered|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |property| })
-->
   (<l-slot1> ^class <target> -
              ^class |property|)
}

#   COVERED self.m.name <-- "covered" constraint
sp {comprehend-word*COVERED-constraint*self-m-name*ASSIGN*covered
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a COVERED
          ^orth |covered|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |covered| })
-->
   (<l-slot1> ^name <target> -
              ^name |covered|)
}

#   FORMER construction
sp {comprehend-word*apply*lexical-access*FORMER-former
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |former|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name FORMER
          ^is <a>
          ^orth |former|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a FORMER)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   FORMER self.m.class <-- @property constraint
sp {comprehend-word*FORMER-constraint*self-m-class*ASSIGN*AT-property
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FORMER
          ^orth |former|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |property| })
-->
   (<l-slot1> ^class <target> -
              ^class |property|)
}

#   FORMER self.m.name <-- "former1" constraint
sp {comprehend-word*FORMER-constraint*self-m-name*ASSIGN*former1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FORMER
          ^orth |former|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |former1| })
-->
   (<l-slot1> ^name <target> -
              ^name |former1|)
}

#   DiPreposition construction
sp {comprehend-word*generalize-cxn*DiPreposition*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of DiPreposition
          ^is <a>
          ^m <meaning>)
   (<a> -^a DiPreposition)
-->
   (<a> ^a DiPreposition)
   (<cxn> ^subcase-of DiPreposition -
          ^subcase-of Word
          ^evokes <e-meaning>)
   (<e-meaning> ^schema PrepCore
                ^target <meaning>)
}

#   BETWEEN construction
sp {comprehend-word*apply*lexical-access*BETWEEN-between
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |between|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name BETWEEN
          ^is <a>
          ^orth |between|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of DiPreposition
          ^first-lex nil)
   (<a> ^a BETWEEN)
}

#   BETWEEN self.m.name <-- "between" constraint
sp {comprehend-word*BETWEEN-constraint*self-m-name*ASSIGN*between
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BETWEEN
          ^orth |between|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |between| })
-->
   (<l-slot1> ^name <target> -
              ^name |between|)
}

#   Propose an operator for the BetweenPropertySets construction
sp {comprehend-word*propose*match-construction*BetweenPropertySets
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <props2>)
   (<props2> ^is.a PropertySet
             ^previous <props1>)
   (<props1> ^is.a PropertySetAnd
             ^previous <prep>)
   (<prep> ^is.a DiPreposition
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name BetweenPropertySets
        ^span 3
        ^lexicals 0
        ^props2 <props2>
        ^props1 <props1>
        ^prep <prep>
        ^previous <previous>
        ^debug-info (concat |Match a BetweenPropertySets construction, combination 0.|))
}

#   Apply the operator for the BetweenPropertySets construction
sp {comprehend-word*apply*match-construction*BetweenPropertySets
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name BetweenPropertySets
        ^prep <prep>
        ^props1 <props1>
        ^props2 <props2>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name BetweenPropertySets
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of PrepPhrase
              ^constituents <constituents>
              ^prep <prep>
              ^props1 <props1>
              ^props2 <props2>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a BetweenPropertySets)
   (<constituents> ^prep <prep>
                   ^props1 <props1>
                   ^props2 <props2>)
   (<e-meaning> ^schema PrepRelation2
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a BetweenPropertySets construction.|))
}

#   BetweenPropertySets self.m.prep <--> prep.m.name constraint
sp {comprehend-word*BetweenPropertySets-constraint*self-m-prep*UNIFY*prep-m-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BetweenPropertySets
          ^m <l-slot1>
          ^prep <r-slot1>)
   (<l-slot1> ^prep { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^name <value>)
-->
   (<l-slot1> ^prep <target> -
              ^prep <value>)
}

#   BetweenPropertySets self.m.object <--> props1.m constraint
sp {comprehend-word*BetweenPropertySets-constraint*self-m-object*UNIFY*props1-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BetweenPropertySets
          ^m <l-slot1>
          ^props1 <r-slot1>)
   (<l-slot1> ^object { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^object <target> -
              ^object <value>)
}

#   BetweenPropertySets self.m.object2 <--> props2.m constraint
sp {comprehend-word*BetweenPropertySets-constraint*self-m-object2*UNIFY*props2-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a BetweenPropertySets
          ^m <l-slot1>
          ^props2 <r-slot1>)
   (<l-slot1> ^object2 { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^object2 <target> -
              ^object2 <value>)
}

#   Propose an operator for the PropertySetAnd construction
sp {comprehend-word*propose*match-construction*PropertySetAnd
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <and>)
   (<and> ^is.a AND
          ^previous <props>)
   (<props> ^is.a PropertySet
            ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name PropertySetAnd
        ^span 2
        ^lexicals 1
        ^and <and>
        ^props <props>
        ^previous <previous>
        ^debug-info (concat |Match a PropertySetAnd construction, combination 0.|))
}

#   Apply the operator for the PropertySetAnd construction
sp {comprehend-word*apply*match-construction*PropertySetAnd
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name PropertySetAnd
        ^props <props>
        ^and <and>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name PropertySetAnd
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^props <props>
              ^and <and>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a PropertySetAnd)
   (<constituents> ^props <props>
                   ^and <and>)
   (<e-meaning> ^schema PropertySetDescriptor
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a PropertySetAnd construction.|))
}

#   PropertySetAnd self.m <--> props.m constraint
sp {comprehend-word*PropertySetAnd-constraint*self-m*UNIFY*props-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a PropertySetAnd
          ^m { <target> <> <value> }
          ^props <r-slot1>)
   (<r-slot1> ^m <value>)
-->
   (<cxn> ^m <target> -
          ^m <value>)
}

#   Propose an operator for the RefIsRef construction
sp {comprehend-word*propose*match-construction*RefIsRef
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <object>)
   (<object> ^is.a RefExpr
             ^previous <tobe>)
   (<tobe> ^is.a FiniteToBe
           ^previous <reference>)
   (<reference> ^is.a RefExpr
                ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name RefIsRef
        ^span 3
        ^lexicals 0
        ^object <object>
        ^tobe <tobe>
        ^reference <reference>
        ^previous <previous>
        ^debug-info (concat |Match a RefIsRef construction, combination 0.|))
}

#   Apply the operator for the RefIsRef construction
sp {comprehend-word*apply*match-construction*RefIsRef
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name RefIsRef
        ^reference <reference>
        ^tobe <tobe>
        ^object <object>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name RefIsRef
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Declarative
              ^constituents <constituents>
              ^reference <reference>
              ^tobe <tobe>
              ^object <object>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a RefIsRef)
   (<constituents> ^reference <reference>
                   ^tobe <tobe>
                   ^object <object>)
   (<e-meaning> ^schema EqualComparison
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a RefIsRef construction.|))
}

#   RefIsRef self.m.value1 <--> reference.m constraint
sp {comprehend-word*RefIsRef-constraint*self-m-value1*UNIFY*reference-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RefIsRef
          ^m <l-slot1>
          ^reference <r-slot1>)
   (<l-slot1> ^value1 { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^value1 <target> -
              ^value1 <value>)
}

#   RefIsRef self.m.value2 <--> object.m constraint
sp {comprehend-word*RefIsRef-constraint*self-m-value2*UNIFY*object-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a RefIsRef
          ^m <l-slot1>
          ^object <r-slot1>)
   (<l-slot1> ^value2 { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^value2 <target> -
              ^value2 <value>)
}

#   PrepRelation2 schema
sp {comprehend-word*evoked-schema*PrepRelation2*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema PrepRelation2
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>
          ^evokes <e2>)
   (<e-target> ^schema-name PrepRelation2
               ^is <a>
               ^object2 <r1>)
   (<a> ^a PrepRelation2)
   (<e1> ^schema RefDesc
         ^target <r1>)
   (<e2> ^schema PrepRelation
         ^target <e-target>)
}

#   PrepRelation2 schema
sp {comprehend-word*evoked-schema*PrepRelation2*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema PrepRelation2
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>
          ^evokes <e2>)
   (<e-target> ^object2 <r1>)
   (<a> ^a PrepRelation2)
   (<e1> ^schema RefDesc
         ^target <r1>)
   (<e2> ^schema PrepRelation
         ^target <e-target>)
}

#   EqualComparison schema
sp {comprehend-word*evoked-schema*EqualComparison*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema EqualComparison
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>
          ^evokes <e2>)
   (<e-target> ^schema-name EqualComparison
               ^is <a>
               ^value1 <r1>
               ^value2 <r2>)
   (<a> ^a EqualComparison)
   (<e1> ^schema RefDesc
         ^target <r1>)
   (<e2> ^schema RefDesc
         ^target <r2>)
}

#   EqualComparison schema
sp {comprehend-word*evoked-schema*EqualComparison*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema EqualComparison
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>
          ^evokes <e2>)
   (<e-target> ^value1 <r1>
               ^value2 <r2>)
   (<a> ^a EqualComparison)
   (<e1> ^schema RefDesc
         ^target <r1>)
   (<e2> ^schema RefDesc
         ^target <r2>)
}

