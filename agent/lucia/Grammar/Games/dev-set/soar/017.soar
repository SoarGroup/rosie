#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\017.ecg'.

#   SOLUTION construction
sp {comprehend-word*apply*lexical-access*SOLUTION-solution
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |solution|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name SOLUTION
          ^is <a>
          ^orth |solution|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a SOLUTION)
   (<e-meaning> ^schema Solution
                ^target <meaning>)
}

#   HAS construction
sp {comprehend-word*apply*lexical-access*HAS-has
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |has|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name HAS
          ^is <a>
          ^orth |has|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of ActionVerb
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a HAS)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   HAS self.m.class <-- @action constraint
sp {comprehend-word*HAS-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a HAS
          ^orth |has|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   HAS self.m.name <-- "has1" constraint
sp {comprehend-word*HAS-constraint*self-m-name*ASSIGN*has1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a HAS
          ^orth |has|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |has1| })
-->
   (<l-slot1> ^name <target> -
              ^name |has1|)
}

#   STEPS construction
sp {comprehend-word*apply*lexical-access*STEPS-steps
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |steps|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name STEPS
          ^is <a>
          ^orth |steps|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a STEPS)
   (<e-meaning> ^schema Steps
                ^target <meaning>)
}

#   STEPS self.features.case <-- "nom" constraint
sp {comprehend-word*STEPS-constraint*self-features-case*ASSIGN*nom
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a STEPS
          ^orth |steps|
          ^features <l-slot1>)
   (<l-slot1> ^case { <target> <> |nom| })
-->
   (<l-slot1> ^case <target> -
              ^case |nom|)
}

#   STEPS self.features.number <-- "plural" constraint
sp {comprehend-word*STEPS-constraint*self-features-number*ASSIGN*plural
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a STEPS
          ^orth |steps|
          ^features <l-slot1>)
   (<l-slot1> ^number { <target> <> |plural| })
-->
   (<l-slot1> ^number <target> -
              ^number |plural|)
}

#   STEPS self.features.person <-- "3rd" constraint
sp {comprehend-word*STEPS-constraint*self-features-person*ASSIGN*3rd
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a STEPS
          ^orth |steps|
          ^features <l-slot1>)
   (<l-slot1> ^person { <target> <> |3rd| })
-->
   (<l-slot1> ^person <target> -
              ^person |3rd|)
}

#   Propose an operator for the SubjectHas construction
sp {comprehend-word*propose*match-construction*SubjectHas
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <has>)
   (<has> ^is.a HAS
          ^previous <subject>)
   (<subject> ^is.a RefExpr
              ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name SubjectHas
        ^span 2
        ^lexicals 1
        ^has <has>
        ^subject <subject>
        ^previous <previous>
        ^debug-info (concat |Match a SubjectHas construction, combination 0.|))
}

#   Apply the operator for the SubjectHas construction
sp {comprehend-word*apply*match-construction*SubjectHas
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name SubjectHas
        ^subject <subject>
        ^has <has>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name SubjectHas
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^subject <subject>
              ^has <has>
              ^previous <previous>)
   (<a> ^a SubjectHas)
   (<constituents> ^subject <subject>
                   ^has <has>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a SubjectHas construction.|))
}

#   Propose an operator for the SubjectHasObject construction
sp {comprehend-word*propose*match-construction*SubjectHasObject
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <object>)
   (<object> ^is.a RefExpr
             ^previous <subjectHas>)
   (<subjectHas> ^is.a SubjectHas
                 ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name SubjectHasObject
        ^span 2
        ^lexicals 0
        ^object <object>
        ^subjectHas <subjectHas>
        ^previous <previous>
        ^debug-info (concat |Match a SubjectHasObject construction, combination 0.|))
}

#   Apply the operator for the SubjectHasObject construction
sp {comprehend-word*apply*match-construction*SubjectHasObject
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name SubjectHasObject
        ^subjectHas <subjectHas>
        ^object <object>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name SubjectHasObject
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Imperative
              ^constituents <constituents>
              ^subjectHas <subjectHas>
              ^object <object>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a SubjectHasObject)
   (<constituents> ^subjectHas <subjectHas>
                   ^object <object>)
   (<e-meaning> ^schema SubjectActOnIt
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a SubjectHasObject construction.|))
}

#   SubjectHasObject self.m.subject <--> subjectHas.subject.m constraint
sp {comprehend-word*SubjectHasObject-constraint*self-m-subject*UNIFY*subjecthas-subject-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SubjectHasObject
          ^m <l-slot1>
          ^subjectHas <r-slot1>)
   (<l-slot1> ^subject { <target> <> <value> })
   (<r-slot1> ^subject <r-slot2>)
   (<r-slot2> ^m <value>)
-->
   (<l-slot1> ^subject <target> -
              ^subject <value>)
}

#   SubjectHasObject self.m.action <--> subjectHas.has.m constraint
sp {comprehend-word*SubjectHasObject-constraint*self-m-action*UNIFY*subjecthas-has-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SubjectHasObject
          ^m <l-slot1>
          ^subjectHas <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^has <r-slot2>)
   (<r-slot2> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   SubjectHasObject self.m.object <--> object.m constraint
sp {comprehend-word*SubjectHasObject-constraint*self-m-object*UNIFY*object-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a SubjectHasObject
          ^m <l-slot1>
          ^object <r-slot1>)
   (<l-slot1> ^object { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^object <target> -
              ^object <value>)
}

#   Solution schema
sp {comprehend-word*evoked-schema*Solution*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Solution
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Solution
               ^is <a>
               ^constraint <c1>)
   (<a> ^a Solution)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value solution1)
}

#   Solution schema
sp {comprehend-word*evoked-schema*Solution*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Solution
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Solution)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<e-target> ^constraint <c1>)
   (<c1> ^attr rosie-category
         ^value solution1)
}

#   Steps schema
sp {comprehend-word*evoked-schema*Steps*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Steps
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Steps
               ^is <a>
               ^shape |steps1|
               ^constraint <c1>)
   (<a> ^a Steps)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value object)
}

#   Steps schema
sp {comprehend-word*evoked-schema*Steps*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Steps
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^shape |steps1|
               ^constraint <c1>)
   (<a> ^a Steps)
   (<e1> ^schema RosieObject
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value object)
}

#   SubjectActOnIt schema
sp {comprehend-word*evoked-schema*SubjectActOnIt*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema SubjectActOnIt
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name SubjectActOnIt
               ^is <a>
               ^subject nil)
   (<a> ^a SubjectActOnIt)
   (<e1> ^schema ActOnIt
         ^target <e-target>)
}

#   SubjectActOnIt schema
sp {comprehend-word*evoked-schema*SubjectActOnIt*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema SubjectActOnIt
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^subject nil)
   (<a> ^a SubjectActOnIt)
   (<e1> ^schema ActOnIt
         ^target <e-target>)
}

