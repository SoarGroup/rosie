#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\002.ecg'.

#   LOAD construction
sp {comprehend-word*apply*lexical-access*LOAD-load
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |load|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name LOAD
          ^is <a>
          ^orth |load|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of LoadVerb
          ^first-lex nil)
   (<a> ^a LOAD)
}

#   LoadVerb construction
sp {comprehend-word*generalize-cxn*LoadVerb*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of LoadVerb
          ^is <a>
          ^m <meaning>)
   (<a> -^a LoadVerb)
-->
   (<a> ^a LoadVerb)
   (<cxn> ^subcase-of LoadVerb -
          ^subcase-of ActionVerb
          ^evokes <e-meaning>)
   (<e-meaning> ^schema ActionDescriptor
                ^target <meaning>)
}

#   LoadVerb self.m.class <-- @action constraint
sp {comprehend-word*LoadVerb-constraint*self-m-class*ASSIGN*AT-action
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LoadVerb
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |action| })
-->
   (<l-slot1> ^class <target> -
              ^class |action|)
}

#   LoadVerb self.m.name <-- "load1" constraint
sp {comprehend-word*LoadVerb-constraint*self-m-name*ASSIGN*load1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LoadVerb
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |load1| })
-->
   (<l-slot1> ^name <target> -
              ^name |load1|)
}

#   Propose an operator for the LoadWorldFile construction
sp {comprehend-word*propose*match-construction*LoadWorldFile
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <word>)
   (<word> ^is.a UNKNOWN-WORD
           ^previous <verb>)
   (<verb> ^is.a LoadVerb
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name LoadWorldFile
        ^span 2
        ^lexicals 1
        ^word <word>
        ^verb <verb>
        ^previous <previous>
        ^debug-info (concat |Match a LoadWorldFile construction, combination 0.|))
}

#   Apply the operator for the LoadWorldFile construction
sp {comprehend-word*apply*match-construction*LoadWorldFile
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name LoadWorldFile
        ^verb <verb>
        ^word <word>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name LoadWorldFile
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^verb <verb>
              ^word <word>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a LoadWorldFile)
   (<constituents> ^verb <verb>
                   ^word <word>)
   (<e-meaning> ^schema LoadWorldCommand
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a LoadWorldFile construction.|))
}

#   LoadWorldFile self.m.action <--> verb.m constraint
sp {comprehend-word*LoadWorldFile-constraint*self-m-action*UNIFY*verb-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LoadWorldFile
          ^m <l-slot1>
          ^verb <r-slot1>)
   (<l-slot1> ^action { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^action <target> -
              ^action <value>)
}

#   LoadWorldFile self.m.word <--> word.word.orth constraint
sp {comprehend-word*LoadWorldFile-constraint*self-m-word*UNIFY*word-word-orth
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a LoadWorldFile
          ^m <l-slot1>
          ^word <r-slot1>)
   (<l-slot1> ^word { <target> <> <value> })
   (<r-slot1> ^word <r-slot2>)
   (<r-slot2> ^orth <value>)
-->
   (<l-slot1> ^word <target> -
              ^word <value>)
}

#   LoadWorldCommand schema
sp {comprehend-word*evoked-schema*LoadWorldCommand*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema LoadWorldCommand
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name LoadWorldCommand
               ^is <a>
               ^action nil
               ^word nil)
   (<a> ^a LoadWorldCommand)
}

#   LoadWorldCommand schema
sp {comprehend-word*evoked-schema*LoadWorldCommand*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema LoadWorldCommand
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^action nil
               ^word nil)
   (<a> ^a LoadWorldCommand)
}

