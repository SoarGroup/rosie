#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\001.ecg'.

#   NAME construction
sp {comprehend-word*apply*lexical-access*NAME-name
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |name|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name NAME
          ^is <a>
          ^orth |name|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a NAME)
   (<e-meaning> ^schema Name
                ^target <meaning>)
}

#   PUZZLE construction
sp {comprehend-word*apply*lexical-access*PUZZLE-puzzle
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |puzzle|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name PUZZLE
          ^is <a>
          ^orth |puzzle|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of CommonNoun
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a PUZZLE)
   (<e-meaning> ^schema Puzzle
                ^target <meaning>)
}

#   OF construction
sp {comprehend-word*apply*lexical-access*OF-of
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |of|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name OF
          ^is <a>
          ^orth |of|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Preposition
          ^first-lex nil)
   (<a> ^a OF)
}

#   OF self.m.name <-- "of1" constraint
sp {comprehend-word*OF-constraint*self-m-name*ASSIGN*of1
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a OF
          ^orth |of|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |of1| })
-->
   (<l-slot1> ^name <target> -
              ^name |of1|)
}

#   Propose an operator for the TheName construction
sp {comprehend-word*propose*match-construction*TheName
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <name-lex>)
   (<name-lex> ^is.a NAME
               ^previous <spec>)
   (<spec> ^is.a THE
           ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name TheName
        ^span 2
        ^lexicals 2
        ^name-lex <name-lex>
        ^spec <spec>
        ^previous <previous>
        ^debug-info (concat |Match a TheName construction, combination 0.|))
}

#   Apply the operator for the TheName construction
sp {comprehend-word*apply*match-construction*TheName
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name TheName
        ^spec <spec>
        ^name-lex <name-lex>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name TheName
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^spec <spec>
              ^name-lex <name-lex>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a TheName)
   (<constituents> ^spec <spec>
                   ^name-lex <name-lex>)
   (<e-meaning> ^schema Name
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a TheName construction.|))
}

#   Propose an operator for the NameDefinitionSentence construction
sp {comprehend-word*propose*match-construction*NameDefinitionSentence
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <word>)
   (<word> ^is.a UNKNOWN-WORD
           ^previous <tobe>)
   (<tobe> ^is.a FiniteToBe
           ^previous <prep-phrase>)
   (<prep-phrase> ^is.a SimplePrepPhrase
                  ^previous <name-np>)
   (<name-np> ^is.a TheName
              ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name NameDefinitionSentence
        ^span 4
        ^lexicals 1
        ^word <word>
        ^tobe <tobe>
        ^prep-phrase <prep-phrase>
        ^name-np <name-np>
        ^previous <previous>
        ^debug-info (concat |Match a NameDefinitionSentence construction, combination 0.|))
}

#   Apply the operator for the NameDefinitionSentence construction
sp {comprehend-word*apply*match-construction*NameDefinitionSentence
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name NameDefinitionSentence
        ^name-np <name-np>
        ^prep-phrase <prep-phrase>
        ^tobe <tobe>
        ^word <word>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name NameDefinitionSentence
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^constituents <constituents>
              ^name-np <name-np>
              ^prep-phrase <prep-phrase>
              ^tobe <tobe>
              ^word <word>
              ^evokes <e-meaning>
              ^salient <salient>
              ^evokes <e-salient>
              ^previous <previous>)
   (<a> ^a NameDefinitionSentence)
   (<constituents> ^name-np <name-np>
                   ^prep-phrase <prep-phrase>
                   ^tobe <tobe>
                   ^word <word>)
   (<e-meaning> ^schema NameDefinition
                ^target <meaning>)
   (<e-salient> ^schema Salient
                ^target <salient>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a NameDefinitionSentence construction.|))
}

#   NameDefinitionSentence self.m.name <--> name-np.m constraint
sp {comprehend-word*NameDefinitionSentence-constraint*self-m-name*UNIFY*name-np-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NameDefinitionSentence
          ^m <l-slot1>
          ^name-np <r-slot1>)
   (<l-slot1> ^name { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^name <target> -
              ^name <value>)
}

#   NameDefinitionSentence self.m.relation <--> prep-phrase.m constraint
sp {comprehend-word*NameDefinitionSentence-constraint*self-m-relation*UNIFY*prep-phrase-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NameDefinitionSentence
          ^m <l-slot1>
          ^prep-phrase <r-slot1>)
   (<l-slot1> ^relation { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^relation <target> -
              ^relation <value>)
}

#   NameDefinitionSentence self.m.word <--> word.word.orth constraint
sp {comprehend-word*NameDefinitionSentence-constraint*self-m-word*UNIFY*word-word-orth
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NameDefinitionSentence
          ^m <l-slot1>
          ^word <r-slot1>)
   (<l-slot1> ^word { <target> <> <value> })
   (<r-slot1> ^word <r-slot2>)
   (<r-slot2> ^orth <value>)
-->
   (<l-slot1> ^word <target> -
              ^word <value>)
}

#   NameDefinitionSentence self.salient.reference <--> prep-phrase.object.m constraint
sp {comprehend-word*NameDefinitionSentence-constraint*self-salient-reference*UNIFY*prep-phrase-object-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a NameDefinitionSentence
          ^salient <l-slot1>
          ^prep-phrase <r-slot1>)
   (<l-slot1> ^reference { <target> <> <value> })
   (<r-slot1> ^object <r-slot2>)
   (<r-slot2> ^m <value>)
-->
   (<l-slot1> ^reference <target> -
              ^reference <value>)
}

#   Name schema
sp {comprehend-word*evoked-schema*Name*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Name
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Name
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Name)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value name1)
}

#   Name schema
sp {comprehend-word*evoked-schema*Name*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Name
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Name)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value name1)
}

#   Puzzle schema
sp {comprehend-word*evoked-schema*Puzzle*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Puzzle
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name Puzzle
               ^is <a>
               ^constraint <c1>
               ^constraint <c2>)
   (<a> ^a Puzzle)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value puzzle1)
}

#   Puzzle schema
sp {comprehend-word*evoked-schema*Puzzle*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Puzzle
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<a> ^a Puzzle)
   (<e1> ^schema Concept
         ^target <e-target>)
   (<e-target> ^constraint <c1>
               ^constraint <c2>)
   (<c1> ^attr rosie-category
         ^value concept)
   (<c2> ^attr concept-handle
         ^value puzzle1)
}

#   NameDefinition schema
sp {comprehend-word*evoked-schema*NameDefinition*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema NameDefinition
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name NameDefinition
               ^is <a>
               ^word nil
               ^relation nil
               ^name nil)
   (<a> ^a NameDefinition)
}

#   NameDefinition schema
sp {comprehend-word*evoked-schema*NameDefinition*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema NameDefinition
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^word nil
               ^relation nil
               ^name nil)
   (<a> ^a NameDefinition)
}

