#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\003.ecg'.

#   YES construction
sp {comprehend-word*apply*lexical-access*YES-ok
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |ok|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name YES
          ^is <a>
          ^orth |ok|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of YesWord
          ^first-lex nil)
   (<a> ^a YES)
}

#   YesWord construction
sp {comprehend-word*generalize-cxn*YesWord*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of YesWord
          ^is <a>)
   (<a> -^a YesWord)
-->
   (<a> ^a YesWord)
   (<cxn> ^subcase-of YesWord -
          ^subcase-of YesNo)
}

#   YesWord self.m.answer <-- "yes" constraint
sp {comprehend-word*YesWord-constraint*self-m-answer*ASSIGN*yes
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a YesWord
          ^m <l-slot1>)
   (<l-slot1> ^answer { <target> <> |yes| })
-->
   (<l-slot1> ^answer <target> -
              ^answer |yes|)
}

