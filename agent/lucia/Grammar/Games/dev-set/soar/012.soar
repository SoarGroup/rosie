#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\012.ecg'.

#   ACCESSIBLE construction
sp {comprehend-word*apply*lexical-access*ACCESSIBLE-accessible
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^input.word <word>)
   (<o> ^name lexical-access)
   (<word> ^orth |accessible|
           ^content <content1>)
-->
   (<s> ^cxn <cxn>)
   (<cxn> ^cxn-name ACCESSIBLE
          ^is <a>
          ^orth |accessible|
          ^text <content1>
          ^f <form>
          ^m <meaning>
          ^subcase-of Property
          ^first-lex nil
          ^evokes <e-meaning>)
   (<a> ^a ACCESSIBLE)
   (<e-meaning> ^schema PropertyDescriptor
                ^target <meaning>)
}

#   ACCESSIBLE self.m.class <-- @property constraint
sp {comprehend-word*ACCESSIBLE-constraint*self-m-class*ASSIGN*AT-property
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ACCESSIBLE
          ^orth |accessible|
          ^m <l-slot1>)
   (<l-slot1> ^class { <target> <> |property| })
-->
   (<l-slot1> ^class <target> -
              ^class |property|)
}

#   ACCESSIBLE self.m.name <-- "accessible" constraint
sp {comprehend-word*ACCESSIBLE-constraint*self-m-name*ASSIGN*accessible
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ACCESSIBLE
          ^orth |accessible|
          ^m <l-slot1>)
   (<l-slot1> ^name { <target> <> |accessible| })
-->
   (<l-slot1> ^name <target> -
              ^name |accessible|)
}

#   Propose an operator for the Properties2Set construction, combination 0
sp {comprehend-word*propose*match-construction*Properties2Set*0
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <class>)
   (<class> ^is.a PropertyClassName
            ^previous <props>)
   (<props> ^is.a Properties2
            ^previous <previous>)
   (<previous> -^is.a Determiner)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name Properties2Set
        ^span 2
        ^lexicals 0
        ^class <class>
        ^props <props>
        ^det nil
        ^previous <previous>
        ^debug-info (concat |Match a Properties2Set construction, combination 0.|))
}

#   Propose an operator for the Properties2Set construction, combination 1
sp {comprehend-word*propose*match-construction*Properties2Set*1
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <class>)
   (<class> ^is.a PropertyClassName
            ^previous <props>)
   (<props> ^is.a Properties2
            ^previous <det>)
   (<det> ^is.a Determiner
          ^previous <previous>)
   (<previous> -^is.a Determiner)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name Properties2Set
        ^span 3
        ^lexicals 0
        ^class <class>
        ^props <props>
        ^det <det>
        ^previous <previous>
        ^debug-info (concat |Match a Properties2Set construction, combination 1.|))
}

#   Apply the operator for the Properties2Set construction
sp {comprehend-word*apply*match-construction*Properties2Set
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name Properties2Set
        ^det <det>
        ^props <props>
        ^class <class>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name Properties2Set
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of PropertySet
              ^constituents <constituents>
              ^det <det>
              ^props <props>
              ^class <class>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a Properties2Set)
   (<constituents> ^det <det>
                   ^props <props>
                   ^class <class>)
   (<e-meaning> ^schema PropertySetDescriptor
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a Properties2Set construction.|))
}

#   Properties2Set self.m.givenness <--> det.m.givenness constraint
sp {comprehend-word*Properties2Set-constraint*self-m-givenness*UNIFY*det-m-givenness
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Properties2Set
          ^m <l-slot1>
          ^det <r-slot1>)
   (<l-slot1> ^givenness { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^givenness <value>)
-->
   (<l-slot1> ^givenness <target> -
              ^givenness <value>)
}

#   Properties2Set self.m.property <--> props.m constraint
sp {comprehend-word*Properties2Set-constraint*self-m-property*UNIFY*props-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Properties2Set
          ^m <l-slot1>
          ^props <r-slot1>)
   (<l-slot1> ^property { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^property <target> -
              ^property <value>)
}

#   Properties2Set self.m.property2 <--> props.m.next constraint
sp {comprehend-word*Properties2Set-constraint*self-m-property2*UNIFY*props-m-next
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Properties2Set
          ^m <l-slot1>
          ^props <r-slot1>)
   (<l-slot1> ^property2 { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^next <value>)
-->
   (<l-slot1> ^property2 <target> -
              ^property2 <value>)
}

#   Properties2Set self.m.predicate <--> class.m.predicate constraint
sp {comprehend-word*Properties2Set-constraint*self-m-predicate*UNIFY*class-m-predicate
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a Properties2Set
          ^m <l-slot1>
          ^class <r-slot1>)
   (<l-slot1> ^predicate { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^predicate <value>)
-->
   (<l-slot1> ^predicate <target> -
              ^predicate <value>)
}

