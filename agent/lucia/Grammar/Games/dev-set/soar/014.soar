#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\014.ecg'.

#   Propose an operator for the ThereAreRefExpr construction
sp {comprehend-word*propose*match-construction*ThereAreRefExpr
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <ref>)
   (<ref> ^is.a RefExpr
          ^previous <there-are>)
   (<there-are> ^is.a ThereAre
                ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name ThereAreRefExpr
        ^span 2
        ^lexicals 0
        ^ref <ref>
        ^there-are <there-are>
        ^previous <previous>
        ^debug-info (concat |Match a ThereAreRefExpr construction, combination 0.|))
}

#   Apply the operator for the ThereAreRefExpr construction
sp {comprehend-word*apply*match-construction*ThereAreRefExpr
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name ThereAreRefExpr
        ^there-are <there-are>
        ^ref <ref>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name ThereAreRefExpr
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of Declarative
              ^constituents <constituents>
              ^there-are <there-are>
              ^ref <ref>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a ThereAreRefExpr)
   (<constituents> ^there-are <there-are>
                   ^ref <ref>)
   (<e-meaning> ^schema RefExprAssertion
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a ThereAreRefExpr construction.|))
}

#   ThereAreRefExpr self.m.reference <--> ref.m constraint
sp {comprehend-word*ThereAreRefExpr-constraint*self-m-reference*UNIFY*ref-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a ThereAreRefExpr
          ^m <l-slot1>
          ^ref <r-slot1>)
   (<l-slot1> ^reference { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^reference <target> -
              ^reference <value>)
}

#   RefExprAssertion schema
sp {comprehend-word*evoked-schema*RefExprAssertion*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema RefExprAssertion
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^schema-name RefExprAssertion
               ^is <a>
               ^reference nil)
   (<a> ^a RefExprAssertion)
   (<e1> ^schema Assertion
         ^target <e-target>)
}

#   RefExprAssertion schema
sp {comprehend-word*evoked-schema*RefExprAssertion*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema RefExprAssertion
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>)
   (<e-target> ^reference nil)
   (<a> ^a RefExprAssertion)
   (<e1> ^schema Assertion
         ^target <e-target>)
}

