#   Soar code produced automatically 
#   from file 'C:\Users\plind\OneDrive\GitHub\PLCode\Lucia\Grammars\Games\dev-set\ecg\g-functions.ecg'.

#   FunctionName construction
sp {comprehend-word*generalize-cxn*FunctionName*simple
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^name << lexical-access match-construction >>)
   (<cxn> ^subcase-of FunctionName
          ^is <a>
          ^m <meaning>)
   (<a> -^a FunctionName)
-->
   (<a> ^a FunctionName)
   (<cxn> ^subcase-of FunctionName -
          ^evokes <e-meaning>)
   (<e-meaning> ^schema Function
                ^target <meaning>)
}

#   Propose an operator for the FunctionWithArgument construction
sp {comprehend-word*propose*match-construction*FunctionWithArgument
   (state <s> ^problem-space comprehend-word
              ^lexical-access done)
   #   Look for the constituents
   (<s> ^cxn <argument>)
   (<argument> ^is.a RefExpr
               ^previous <function>)
   (<function> ^is.a FunctionName
               ^previous <previous>)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-construction
        ^type construction
        ^cxn-name FunctionWithArgument
        ^span 2
        ^lexicals 0
        ^argument <argument>
        ^function <function>
        ^previous <previous>
        ^debug-info (concat |Match a FunctionWithArgument construction, combination 0.|))
}

#   Apply the operator for the FunctionWithArgument construction
sp {comprehend-word*apply*match-construction*FunctionWithArgument
   (state <s> ^problem-space comprehend-word
              ^operator <o>)
   (<o> ^name match-construction
        ^cxn-name FunctionWithArgument
        ^function <function>
        ^argument <argument>
        ^previous <previous>)
-->
   (<s> ^cxn-new <cxn-new>)
   (<cxn-new> ^cxn-name FunctionWithArgument
              ^is <a>
              ^f <form>
              ^m <meaning>
              ^subcase-of RefExpr
              ^constituents <constituents>
              ^function <function>
              ^argument <argument>
              ^evokes <e-meaning>
              ^previous <previous>)
   (<a> ^a FunctionWithArgument)
   (<constituents> ^function <function>
                   ^argument <argument>)
   (<e-meaning> ^schema FunctionApplication
                ^target <meaning>)
   #   Write a message for the construction that matched.
   (write (crlf) (concat |Matched a FunctionWithArgument construction.|))
}

#   FunctionWithArgument self.m.name <--> function.m.fn-handle constraint
sp {comprehend-word*FunctionWithArgument-constraint*self-m-name*UNIFY*function-m-fn-handle
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FunctionWithArgument
          ^m <l-slot1>
          ^function <r-slot1>)
   (<l-slot1> ^name { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^fn-handle <value>)
-->
   (<l-slot1> ^name <target> -
              ^name <value>)
}

#   FunctionWithArgument self.m.category <-- "function" constraint
sp {comprehend-word*FunctionWithArgument-constraint*self-m-category*ASSIGN*function
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FunctionWithArgument
          ^m <l-slot1>)
   (<l-slot1> ^category { <target> <> |function| })
-->
   (<l-slot1> ^category <target> -
              ^category |function|)
}

#   FunctionWithArgument self.m.argument <--> argument.m constraint
sp {comprehend-word*FunctionWithArgument-constraint*self-m-argument*UNIFY*argument-m
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FunctionWithArgument
          ^m <l-slot1>
          ^argument <r-slot1>)
   (<l-slot1> ^argument { <target> <> <value> })
   (<r-slot1> ^m <value>)
-->
   (<l-slot1> ^argument <target> -
              ^argument <value>)
}

#   FunctionWithArgument self.m.predicate <--> function.m.predicate constraint
sp {comprehend-word*FunctionWithArgument-constraint*self-m-predicate*UNIFY*function-m-predicate
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^cxn-new <cxn>)
   (<o> ^type construction)
   (<cxn> ^is.a FunctionWithArgument
          ^m <l-slot1>
          ^function <r-slot1>)
   (<l-slot1> ^predicate { <target> <> <value> })
   (<r-slot1> ^m <r-slot2>)
   (<r-slot2> ^predicate <value>)
-->
   (<l-slot1> ^predicate <target> -
              ^predicate <value>)
}

#   Function schema
sp {comprehend-word*evoked-schema*Function*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Function
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^schema-name Function
               ^is <a>
               ^fn-handle nil)
   (<a> ^a Function)
}

#   Function schema
sp {comprehend-word*evoked-schema*Function*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema Function
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -)
   (<e-target> ^fn-handle nil)
   (<a> ^a Function)
}

#   FunctionApplication schema
sp {comprehend-word*evoked-schema*FunctionApplication*create
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema FunctionApplication
             ^target <e-target>)
   (<e-target> -^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>
          ^evokes <e2>)
   (<e-target> ^schema-name FunctionApplication
               ^is <a>
               ^argument <r1>
               ^predicate nil)
   (<a> ^a FunctionApplication)
   (<e1> ^schema RefDesc
         ^target <r1>)
   (<e2> ^schema RefDesc
         ^target <e-target>)
}

#   FunctionApplication schema
sp {comprehend-word*evoked-schema*FunctionApplication*exists
   (state <s> ^problem-space comprehend-word
              ^operator <o>
              ^<< cxn cxn-new >> <cxn>)
   (<o> ^type construction)
   (<cxn> ^evokes <evoked>)
   (<evoked> ^schema FunctionApplication
             ^target <e-target>)
   (<e-target> ^is <a>)
-->
   (<cxn> ^evokes <evoked> -
          ^evokes <e1>
          ^evokes <e2>)
   (<e-target> ^argument <r1>
               ^predicate nil)
   (<a> ^a FunctionApplication)
   (<e1> ^schema RefDesc
         ^target <r1>)
   (<e2> ^schema RefDesc
         ^target <e-target>)
}

