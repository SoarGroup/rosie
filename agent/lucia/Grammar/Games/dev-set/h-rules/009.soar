##!
# @file
#
# @created plindes 20200828
# File: 009.soar
# Author: Peter Lindes
# Created: 28 August 2020
#
# Desc: This file contains all the processing rules
#       needed to add to be able to process sentence 009
#       of the Games development set.
#
#  This is sentence #5 of 01.03_king-stacking-frogs script.txt.
#  The sentence is:
#      If a location is below an object then it is covered.
#
#  This sentence is much like #5 of 01.01_blocks-world script.txt:
#      If a location is not below an object then it is clear.
#
#   The proposal rule comes from that sentence.
#


#   Build a message for an IfThenStatement like this one:
#       If a location is below an object then it is covered.
# TAKE THIS MEANING:
#(M20 ^condition M13 ^is A63 ^schema-name IfThenStatement ^source I28
#       ^statement M19
#       ^text |If a location is below an object then it is covered.|)
#  (M13 ^is A39 ^modifier nil ^preprel M12 ^schema-name PrepPhraseAssertion
#         ^source I21 ^target M6 ^text |a location is below an object|)
#    (A39 ^a PrepPhraseAssertion ^a Assertion)
#    (M12 ^is A35 ^object M11 ^prep below1 ^schema-name PrepRelation
#           ^source I19 ^text |below an object|)
#      (A35 ^a PrepRelation)
#      (M11 ^category M10 ^givenness indefinite ^is A33 ^modifiers nil
#             ^name Object ^referent O60 ^relation nil ^schema-name RefDesc
#             ^source I18 ^text |an object|)
#        (M10 ^color nil ^is A29 ^movable nil ^rosie-category object
#               ^schema-name Object ^shape nil ^size nil ^source I17 ^state nil
#               ^text object)
#          (A29 ^a RosieObject ^a Object ^a Entity)
#          (I17 ^left 6 ^right 6)
#        (A33 ^a RefDesc)
#        (O60 ^handle new-object-id2 ^item-type object ^predicates P28
#               ^predicates-copied true)
#          (P28 ^category object ^dialog-object true ^is-visible1 not-visible1)
#        (I18 ^left 5 ^right 6)
#      (I19 ^left 4 ^right 6)
#    (I21 ^left 1 ^right 6)
#    (M6 ^givenness indefinite ^is A17 ^predicate L19 (@407005) ^property nil
#           ^referent O38 ^schema-name PropertySetDescriptor ^source I13
#           ^text |a location|)
#      (A17 ^a PropertySetDescriptor)
#      (L19 ^handle location ^multiple true ^property L20 (@407000))
#        (L20 ^handle category ^item-type property ^type visual)
#      (O38 ^handle new-object-id1 ^item-type object ^predicates P27
#             ^predicates-copied true)
#        (P27 ^category location ^dialog-object true ^is-visible1 not-visible1)
#      (I13 ^left 1 ^right 2)
#  (A63 ^a IfThenStatement)
#  (I28 ^left 0 ^right 10)
#  (M19 ^is A59 ^property M18 ^schema-name PropertyApplication ^source I27
#         ^target M16 ^text |it is covered.|)
#    (A59 ^a PropertyApplication ^a Assertion)
#    (M18 ^class property ^is A56 ^name covered ^next nil
#           ^predicate L29 (@4014303) ^schema-name PropertyDescriptor
#           ^source I26 ^text |covered.|)
#      (A56 ^a PropertyDescriptor)
#      (L29 ^handle covered ^item-type concept ^type state)
#      (I26 ^left 10 ^right 10)
#    (I27 ^left 8 ^right 10)
#    (M16 ^category inanimate ^givenness pronoun ^is A49 ^modifiers nil
#           ^name nil ^referent O38 ^relation nil ^schema-name RefDesc
#           ^source I24 ^text it)
#      (A49 ^a RefDesc)
#      (I24 ^left 8 ^right 8)
#
#
# AND BUILD A MESSAGE LIKE THIS:
#(I517 ^if-subclause I528 ^message-type conditional ^then-subclause I544)
#  (I528 ^action N508 ^arg1 P563 ^predicate I538)
#    (N508 ^handle is1 ^item-type action)
#    (P563 ^handle new-object-id13 ^item-type object ^predicates P564
#           ^predicates-copied true)
#      (P564 ^category location ^dialog-object true ^is-visible1 not-visible1)
#    (I538 ^2 P582 ^handle below1 ^item-type predicate)
#      (P582 ^handle new-object-id14 ^item-type object ^predicates P583
#             ^predicates-copied true)
#        (P583 ^category object ^dialog-object true ^is-visible1 not-visible1)
#  (I544 ^action N541 ^arg1 P563 ^predicate N554)
#    (N541 ^handle is1 ^item-type action)
#    (N554 ^handle covered ^item-type predicate ^property L1246 (@100208))
#      (L1246 ^handle property ^type visual)

#   There are likely to be many variations of IfThenStatement.
#   The following rule will handle the Games/009 sentence:
#     If a location is below an object then it is covered.
#   Other variations may need different rules, since
#   these rules need to deal with a lot of details.
sp {interpret*apply*do-if-then-statement*games-009
   (state <s> ^problem-space interpret
              ^operator <o>
              ^message nil)
   (<o> ^name do-if-then-statement
        ^meaning <m>)
   (<m> ^is.a IfThenStatement
        ^condition { <condition> <> nil }
        ^statement { <statement> <> nil })
   (<condition> ^is.a PrepPhraseAssertion
                ^preprel <prep-rel>
                ^target <if-target>
                ^modifier nil)
   (<if-target> ^is.a PropertySetDescriptor
                ^referent <pp-target>)
   (<prep-rel> ^prep <prep>
               ^object.referent <pp-object>)
   #    The subject of the PropertyApplication
   #    is the target referent we want.
   #    This should work for any RefExpr as the subject,
   #    including "it."
   (<statement> ^is.a PropertyApplication
                ^property <property>
                ^target.referent <target-referent>)
   (<property> ^is.a PropertyDescriptor
               ^class property
               ^name <prop-name>
               ^predicate.property <prop-predicate>)
-->
   #    Build the message
   (<s> ^message nil -
        ^message <message>)
   (<message> ^message-type conditional
              ^if-subclause <if-clause>
              ^then-subclause <then-clause>)
   #    Build the condition - no negation here
   (<if-clause> ^predicate <if-predicate>
#                ^modifier <negation>
                ^arg1 <pp-target>
                ^action <if-action>)
   (<if-action> ^item-type action
                ^handle is1)
#   (<negation> ^modifier true
#               ^handle negation)
   (<if-predicate> ^2 <pp-object>
                   ^handle <prep>
                   ^item-type predicate)
   #    Build the statement
   (<then-clause> ^predicate <then-predicate>
                  ^arg1 <target-referent>
                  ^action <then-action>)
   (<then-action> ^item-type action
                  ^handle is1)
   (<then-predicate> ^property <prop-predicate>
                     ^handle <prop-name>
                     ^item-type predicate)
}
