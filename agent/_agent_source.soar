###########################################################################
#
# Main source file for the instruction agent
#
###########################################################################

#source deliver_chunks.soar

#srand

# Soar Parameters - settings for things like memory, chunking, etc.
source _soar_parameters.soar

# Agent Parameters - settings for how the agent performs
source _agent_parameters.soar

# Rules to aid in debugging
source debugging-rules.soar

#decide set-random-seed 21
#production optimize-attribute instance 10
#production optimize-attribute negpair 1000
# Proposals: Contains ALL proposal rules for top-state operators that resolve in op-no-changes (and substates)
source proposals.soar

# Preferences: Contains preferences rules to avoid operator ties
source preferences.soar

source interaction.soar

source create-scripted-sentences.soar

source process-new-sentence.soar

source create-internal-world.soar

source reset-agent-state.soar


#############################################################################
# Elaborations: Contains many different elaborations that operate on 
#   states or parts of the states, including the top-state, substates, stack,
#   top-state objects... 
pushd elaborations
source elaborations_source.soar
popd

############################################################################
# smem-operators
#    Common operators used to do semantic memory operations
#
# Source child problem space "smem-operators"
pushd smem-operators
source smem-operators_source.soar
popd


#############################################################################
# Operator: init-agent
#   This operator initializes the agent 
source init-agent.soar


#############################################################################
# Operator: wait
#   This operator is proposed when nothing else happens
#   Used to avoid cascading state no-change impasses
source wait.soar



#############################################################################
# Operator: interaction
# Gets proposed when something happens to change the state of the interaction
#   This could be a new message from the instructor, (nl.message)
#   If the current interaction has been satisfied (top-state.interaction.status.performed)
#   Or the agent has to initiate a new segment (top-state.interaction.status.new-segment-info)
pushd interaction
source interaction_source.soar
popd


###############################################################################
# Operator: satisfy-purpose
# This operator is selected once all the indexing has occured for the current segment purpose
# The subspace is responsible for satisfying the current purpose
# This is where learning, actions, or dialog occurs
#   If successful, it should create a performed wme on the interaction.status link

pushd satisfy-purpose
source satisfy-purpose_source.soar
popd


pushd game-learning
source game-learning_source.soar
popd


pushd svs-command-operators
source svs-command-operators_source.soar
popd

# Source child problem space "state-no-change"
pushd state-no-change
source state-no-change_source.soar
popd

### source problem space for new svs code
pushd spatial-reasoning
source spatial-reasoning_source.soar
popd

# Source child problem space "default"
pushd default
source selection.soar
source simple.soar
source selection-astar.soar
source selection-iterative-deepening-general-chunks.soar
popd


# Source child problem space "manage-world-state"
pushd manage-world-state
source manage-world-state_source.soar
popd

# Souce file "cleanup-command-links.soar"
source cleanup-command-links.soar

# Source child problem space "problem-space"
pushd problem-space
source problem-space_source.soar
popd

pushd execute-task
source execute-task_source.soar
popd

source special-case-rules.soar

#source testing/test-am-learning.soar

