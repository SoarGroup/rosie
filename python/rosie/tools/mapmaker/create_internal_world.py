#!/usr/bin/env python3

import sys

def create_internal_world(world_info, fout):
    # Find the first region that contains the robot's point
    start_loc = next( (region.handle for region in world_info.regions 
        if region.contains_point(world_info.robot.x, world_info.robot.y)), "wp01")

    # Write the start of the rule
    fout.write("### Autogenerated world file from create_internal_world.py\n")
    fout.write("### Used to test actions in a simulated world\n")
    fout.write("\n")
    fout.write("sp {top-state*domain*internal*elaborate*internal-world*" + world_info.name + "\n")
    fout.write("   (state <s> ^superstate nil\n")
    fout.write("              ^agent-params <params>)\n")
    fout.write("   (<params> ^domain internal)\n")
    fout.write("-->\n")
    fout.write("   (<params> ^simulate-perception true)\n")
    fout.write("   (<s> ^internal-world <w>)\n")
    fout.write("   (<w> ^starting-location " + start_loc + "\n")
    fout.write("        ^objects <objs>)\n")
    fout.write("\n")

    # Write the list of objects
    for obj in world_info.objects:
        if not hasattr(obj, 'preds'):
            continue
        obj_id = "<obj" + str(obj.obj_id) + ">"
        preds_id = "<obj" + str(obj.obj_id) + "-preds>"

        preds = dict( i for i in obj.preds.items() if i[1] is not None and i[0] != "temp_id")

        # Determine the object's location
        if preds['category'] == 'door1':
            obj_wp = obj.reg1 + " " + obj.reg2
        else:
            obj_wp = next( (region.handle for region in world_info.regions 
                if region.contains_point(obj.pos[0], obj.pos[1])), None)

        if obj_wp is None:
            print("ERROR No location for: " + obj.handle)
            continue
        

        fout.write("   (<objs> ^object {:s})\n".format(obj_id))
        fout.write("   ({:s} ^handle {:s} ^perc-id |{:d}| ^waypoint {:s} ^predicates {:s})\n".format(obj_id, obj.handle, obj.obj_id, obj_wp, preds_id))
        fout.write("   ({:s} {:s})\n".format(preds_id, " ".join( "^{:s} {:s}".format(cat, pred) for cat, pred in preds.items() )))

        if hasattr(obj, 'write_extra_soar_info'):
            obj.write_extra_soar_info(fout, world_info)

        fout.write("\n")
    # End of writing objects

    fout.write("}\n")


