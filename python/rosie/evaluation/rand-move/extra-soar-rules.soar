sp {top-state*elaborate*agent-params*custom
   (state <s> ^superstate nil
              ^agent-params <p>)
-->
   (<p> ^debug-ids true
#       ^report-tasks-to-output-link true
#       ^debug-op-ties true
#       ^debug-wait-limit 3

#       ^interrupt-operator retrospective-learning 
#       ^interrupt-operator interpret-message retrospective-learning
#       ^interrupt-end-of-sentence true
#       ^interrupt-new-task true
#       ^interrupt-task-search true
        
#       ^print-perception true
#       ^print-new-task true
#       ^print-wp-search-path-costs true
#       ^print-parsed-messages true
#       ^print-outgoing-messages true
#       ^print-interaction-stack true

#       ^all-objects-reachable true
   )
}

#sp {DEBUG*interrupt*top-selection*evaluate-operator*find
#   (state <s> ^name selection
#              ^top-selection true
#              ^operator <o>)
#   (<o> ^name evaluate-operator
#        ^evaluation.superoperator.name op_find1)
#-->
#   (interrupt)
#}

#explain all on

### Override the default search depth
sp {search-for-next-subtask*elaborate*search-phase-info
   (state <s> ^name search-for-next-subtask)
-->
   (<s> ^number-phases 2
        ^search-phase-info <p1> <p2>)
   # First phase - only consider subtasks with all objects in common with the current task
   (<p1> ^num 1 ^max-depth 8 ^require-all-objects-match 1)

   # Second phase - level 1: any subtasks, level 2: subtasks with 1+ matching objects, 
   #                level 3-4: only subtasks matching all objects
   (<p2> ^num 2 ^max-depth 8 ^require-matching-object 2 ^require-all-objects-match 3)
}

sp {top-state*elaborate*agent-params*task
   (state <s> ^superstate nil
              ^agent-params <params>)
-->
   # Max search depth to use when doing iterative deepending search during task planning
   # This searching is done in three phases, with different levels of specificity 
   (<params> ^retrospective-search-depth 8   # Max depth to search during retrospective learning
   )
}

### Default relations
sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates*internal
   (state <s> ^superstate nil
              ^agent-params.domain internal
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor <pred-mon>)
-->
   (<preds> ^predicate.handle in1)
   (<preds> ^predicate.handle on1)
   (<preds> ^predicate.handle holding1)
   (<preds> ^predicate.handle heard2)
}

sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates*magicbot
   (state <s> ^superstate nil
              ^agent-params.domain magicbot
              ^world.predicates <preds>
              ^perception-monitor.predicate-monitor <pred-mon>)
-->
   # Extract predicates via SVS
   (<pred-mon> ^predicate-info.predicate-handle in1)
   (<pred-mon> ^predicate-info.predicate-handle on1)

   (<preds> ^predicate.handle holding1)
   (<preds> ^predicate.handle heard2)
}


#sp {DEBUG*monitor*control-law*status
#   (state <s> ^superstate nil
#              ^io.output-link.do-control-law <law>)
#   (<law> ^name <name>
#          ^status <status>)
#-->
#   (write (crlf) |STATUS OF CONTROL LAW | <name> | is | <status> (crlf))
#}


### PRINT EVENT INFO

sp {complete-push-task-segment*report*time*info
   (state <s> ^name push-task-segment
              ^operator.name complete-push-task-segment
              ^segment-to-push.task-operator.task-handle <task-h>
              ^io.input-link.time <t>)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write |$START-TASK$ | <task-h> | | <steps> | | <ms> (crlf))
}

sp {complete-pop-task-segment*report*time*info
   (state <s> ^name pop-task-segment
              ^operator.name complete-pop-task-segment
              ^segment-to-pop.task-operator.task-handle <task-h>
              ^io.input-link.time <t>)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write |$END-TASK$ | <task-h> | | <steps> | | <ms> (crlf))
}

sp {search-for-next-subtask*start*report*time*info
   (state <s> ^operator.name search-for-next-subtask
              ^superstate.task-operator.task-handle <task-h>
              ^io.input-link.time <t>
             -^reported-time)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write |$BEGIN-SEARCH$ | <task-h> | | <steps> | | <ms> (crlf))
   (<s> ^reported-time true)
}

sp {search-for-next-subtask*finish*report*time*info
   (state <s> ^name search-for-next-subtask
              ^superstate.superstate.task-operator.task-handle <task-h>
              ^operator.name << return-successful-operator initiate-interaction >>
              ^io.input-link.time <t>)
   (<t> ^steps <steps>
        ^milliseconds <ms>)
-->
   (write |$END-SEARCH$ | <task-h> | | <steps> | | <ms> (crlf))
}

